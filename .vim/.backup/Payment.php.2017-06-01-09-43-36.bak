<?php
defined('IN_WEB') or die('Include Error!');
class Payment extends Server {
	/**
	 * 代理下单
	 * http://paywiki.oa.com/doku.php?id=接入文档:国内支付接口
	 * http://paywiki.oa.com/doku.php?id=接入文档:国外支付接口
	 * @param array $param
	 */
	public function sendOrder($param) {
		if(!$this->auth($param, 3)) {
			return $this->genRet($param['mid'], array('result'=>-101));
		}

		$api = (int)$param['api'];
		$sid = (int)$param['sid'];
		$mid = (int)$param['mid'];
		$version = $param['version'];

		$from = (int)$param['param']['from']; //支付场景编号(即商品列表类型编号)
		$rid = (int)$param['param']['rid']; //商品仓库ID
		$pmode = (int)$param['param']['pmode']; //支付中心pmode
		$data = (array)$param['param']['data']; //客户端传给支付中心的数据(除了id,mid,sitemid,user_ip这几个字段已由后端自动补上，无须传外，其他若有则可传)
		
		$o = oo::mbpay($api);
		$aUser = oo::minfo()->getMinfo($mid, array('sitemid'));
		$aRepo = $o->getRepo(0);
		$aMaps =  $aRepo[$rid]['maps'][$sid];
		if(!$pid = $aMaps[$pmode][0]) { //支付中心商品ID
			return $this->genRet($mid, array('result'=>-102));
		}

		//基础参数
		$data['id'] = $pid;
		$data['mid'] = $mid;
		$data['sitemid'] = $aUser['sitemid'];
		$data['user_ip'] = functions::getip();
		//END

		$aSend = $o->sendOrder($data);
		$ret['result'] = $aSend['data'] ? 1 : -1;
		$ret['data'] = $aSend['data'];
		return $this->genRet($mid, $ret);
	}
	
	/**
	 * 代理通知(将支付结果告知支付中心验证&发货)
	 * 例如：iOS只有客户端才能拿到支付结果，通过该接口上传给支付中心
	 */
	public function callOrder($param) {
		if(!$this->auth($param, 3)) {
			return $this->genRet($param['mid'], array('result'=>-101));
		}
		$api = (int)$param['api'];
		$mid = (int)$param['mid'];
		$from = (int)$param['param']['from']; //支付场景编号(即商品列表类型编号)
		$rid = (int)$param['param']['rid']; //商品仓库ID
		$pmode = (int)$param['param']['pmode']; //支付中心pmode
		if(!$data = (array)$param['param']['data']) { //需要传给支付中心的支付结果数据
			return $this->genRet($mid, array('result'=>-102));
		}
		$uri = null;
		if($pmode == 99) { //iOS支付
			$uri = 'pay_order.php';
			$data['time'] = $_SERVER['REQUEST_TIME'];
			$data['sign'] = functions::payCenterIphoneSign($data['pid'], $data['pdealno'], $data['time']);
		}
		if(!$uri) { //接收终端必须指定
			return $this->genRet($mid, array('result'=>-103));
		}
		$o = oo::mbpay($api);
		$aCall = $o->sendOrder($data, $uri);
		$ret['result'] = $aCall['data'] ? 1 : -1;
		$ret['data'] = $aCall['data'];
		return $this->genRet($mid, $ret);
	}

	/**
	 * 支付中心的请求地址
	 */
	private static $payCenterHost;

	public function __construct(){
		if(isset(oo::$config['noOutNetwork']) && oo::$config['noOutNetwork'] == 1){
			self::$payCenterHost = oo::$config['payCenterProxy'];
		}else if(in_array(oo::$config['sid'], array(93, 117))){
			self::$payCenterHost = oo::$config['guoNeiNewPayCenterHost'];
		}else{
			self::$payCenterHost = 'http://pay.boyaa.com/';
		}
	}

	public function __destruct(){
		//上报代理下单统计
		if ($this->_proxyOrderStatItem['aEvent']){
			$now = time();
			$csid = $this->_proxyOrderStatItem['csid'];
			foreach( (array)$this->_proxyOrderStatItem['aEvent'] as $k => $v){
				$v['uid'] = $this->_proxyOrderStatItem['mid'];
				$v['et_id'] = $k;
				$v['lts_at'] = $now;
				oo::dc()->sendData($csid,23,$v);
				(PRODUCTION_SERVER === false) && oo::logs()->debug(date("Y-m-d H:i:s###").serialize(array_merge(array('__csid' => $csid),$v)), 'Stats.eventSend', 2, false);
			}
			$this->_proxyOrderStatItem = array();
		}
	}

	public function complete($param) {
		if (!$this->auth($param, 3)) {
			return $this->genRet($param['mid'], array('sig fail'));
		}
		$mid = (int) $param['mid'];
		$sid = (int) $param['sid'];
		$api = (int) $param['api'];
		$vmid = (int) $param['vmid'];

		//iphone英文版本禁用支付
		if ($api == 6) {
			return $this->genRet($param['mid'], array());
		}

		oo::setLang($param['langtype']);

		$fmid = (int) $param['param']['fmid'];
		$pcard = (int) $param['param']['pcard'];
		$ptoken = (string) $param['param']['ptoken'];
		$pmoneynow = (int) $param['param']['pmoneynow'];
		$pmode = (int) $param['param']['pmode'];
		$pamount = (float) $param['param']['pamount']; //这里传的是总额
		$pdealno = (string) $param['param']['pdealno'];
		$pchips = (int) $param['param']['pchips'];
		$num = max(1, (int) $param['param']['num']);
		$version = empty($param['version']) ? '' : trim($param['version']);

		if (($sid == 13) || (!$api) || ($fmid != $ptoken) || (!$pamount) || (!in_array($pmode, array(105, 113, 114, 117))) || (!$vmid) || (in_array($pcard, array(33, 37)))) {
			return $this->genRet($param['mid'], array('sig fail'));
		}

		$isIphone = in_array($api, array(1, 6, 8)); //是Iphone调用的API

		$isAndriod = in_array($api, array(3, 4, 5, 10)); //是否Android

		if ($api != 8 && empty($version)) {//不是iphone用户，并且是旧版，关闭支付,但91版本又要排除在外 2011年4月13日 11:57:57
			return $this->genRet($param['mid'], array('result' => 0));
		}

		$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);
		$usdPamount = $pamount;
		if (isset($param['param']['currency'])) {//幣種，用於轉換匯率
			$currency = strtoupper($param['param']['currency']);
			if (!empty(oo::$config['isoCurrency'][$currency])) {
				$rate = floatval(oo::$config['isoCurrency'][$currency]);
				$usdPamount = $pamount * ( $rate > 0 ? $rate : 1 );
			}
		}

		if ($api != 8 && !$isAndriod && oo::$config['sid'] == 13 && oo::payment()->getPayScoreForBcenter2($fmid, $usdPamount, $pmode, $aDecryptData[1]) <= 0) {
			return $this->genRet($param['mid'], array('result' => 0));
		}

		$platFlag = ($isIphone ? 'iphone' : 'ipad') . '-' . ( empty($version) ? 'old' : 'new' );
		$platFlag = $isAndriod ? 'Android-' . $version : $platFlag;

		$pid = oo::payment()->insert($fmid, $pcard, $ptoken, $pmoneynow, $pmode, $usdPamount / $num, $pdealno, $pchips / $num, $num);

		if (($api == 10 && $pmode == 114) || ( $api == 8 && $pmode == 105 )) {//91 支付验证 @TODO 我们需要更多的支付验证，晚点封装起来
			$url = 'http://service.sj.91.com/usercenter/AP.aspx';
			$aQuery = array('AppId' => oo::$config['api'][$api][2], 'Act' => 1, 'CooOrderSerial' => $pdealno, 'AppKey' => oo::$config['api'][$api][3]);
			$aQuery['Sign'] = md5(implode($aQuery));
			unset($aQuery['AppKey']);
			$url = $url . '?' . http_build_query($aQuery);
			$respCont = array();
			try {
				$respCont = json_decode(functions::getFileContents($url, 5), true);
			} catch (Exception $e) {
				$respCont = array();
			}

			if (!isset($respCont['ErrorCode']) || $respCont['ErrorCode'] != 1) {
				$ret['result'] = 0;
				$ret['other'] = array('errorDesc' => lang::$payfail); //支付失败
				return $this->genRet($mid, $ret);
			}
		}

		$result = oo::payment()->complete($pid, $pmode, $bankId, $platFlag, $pdealno);
		$aUser = oo::minfo()->getMinfo($mid, array('mtime', 'mmoney', 'unid', 'mnick', 'mvip', 'mviptime'), false);

		if ($result > 0) {
			$prate = oo::$config['paytyperate'][$pmode] > 0 ? oo::$config['paytyperate'][$pmode] : 1;
			oo::payment()->getDevicePayment($aDecryptData[1], $pamount * $prate);

			//---用户破产及付费数据上报需求 start
			if(isset(oo::$config['mobBanAndPay']) && oo::$config['mobBanAndPay'] == 1 && of::isAndroid($api)){
				oo::bankrupt()->mobBanAndPay(array('sid' => oo::$config['api'][$api][1], 'mid' => $mid, 'type'=>1));
			}
			//---用户破产及付费数据上报需求 end

			//------统计每人每种支付的支付额度
			if (isset(oo::$config['mbModePay']) && oo::$config['mbModePay'] == 1) {//统计每个用户每种支付方式的支付额度
				$actID = 6002;
				oo::udp()->send($actID, $mid, (int)$pamount, $pmode);
			}
		}

		if (empty($param['param']['location'])) {
			$ip = functions::getip();
			$area = functions::ip2c($ip); //获取此IP对应的地区码，2位英文字母
		} else {
			$area = strtoupper(trim($param['param']['location']));
		}

		if (( $areaCode = array_search($area, oo::$config['ip2c_area']) ) === false) {
			$areaCode = 999;
		}

		$cttype = $cttype2 = 0;
		$langIdx = 19;
		if ($pcard == 0) {//直充金币
			$cttype = 70034;
			$cttype2 = 200002;
			$langIdx = 21;
		} elseif (( $pcard > 0 && $pcard <= 7 ) || ( $pcard >= 9910 && $pcard <= 9915 )) {//会员卡
			$cttype = 70033;
			$cttype2 = 200001;
			$langIdx = 8;
		} elseif ($pcard >= 10 && $pcard <= 19) {//钻类
			$cttype = 70032;
			$cttype2 = 200000;
			$langIdx = 10;
		} elseif ($pcard == 9999) {//博雅币
			$cttype = 70035;
			$cttype2 = 200003;
			$langIdx = 21;
		}

		if (date('Ym') == date('Ym', $aUser['mtime'])) {
			$cacheKey = okey::mkthismonthuser($mid);
			if (!ocache::logwin()->get($cacheKey, false)) {
				ocache::logwin()->set($cacheKey, 1, 30 * 86400, false);
			}
		}

		(!in_array($platFlag, array('ipad-new', 'iphone-new', 'Android-' . $version)) ) && oo::member()->setMstatus($mid, 5, 0); //标记此用户在iphone已支付

		$ret['result'] = (int) $result;
		$ret['desc'] = functions::lang(array('str' => lang::$buyerr[$langIdx], 0 => $num, 1 => lang::$property[$pcard][0], 2 => date(lang::$buyerrdate, $aUser['mviptime']), 4 => $aUser['mnick']));

		$aOther = array();
		$aOther['bycoins'] = oo::boyaacoins()->getBycoins($mid); //博雅币
		$aOther['money'] = (int) $aUser['mmoney'];  //游戏币
		$aOther['bbface'] = oo::gifts()->getBBface($mid); //开心宝贝表情包过期时间
		$aOther['payscore'] = (in_array(oo::$config['sid'], array(13)) && $pmode == 105) ? (int) oo::payment()->getPayScoreForBcenter2($mid, 0, 105, $aDecryptData[1]) : 0; //信用值,fb和开心001计算，其他站点不计算
		$aOther['isvip'] = (int) $aUser['mvip']; //VIP

		$ret['other'] = $aOther; //其他数据
		return $this->genRet($mid, $ret);
	}

	/**
	 * 新的支付接口
	 *
	 * @param Mixed $param
	 */
	public function order($param) {
		if (!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}

		$mid = (int) $param['mid'];
		$sid = (int) $param['sid'];
		$api = (int) $param['api'];
		$vmid = (int) $param['vmid'];

		//iphone英文版本禁用支付
		if ($api == 6) {
			return $this->genRet($param['mid'], array());
		}

		oo::setLang($param['langtype']);
		$act = (int) $param['param']['act']; //动作，1为下单，2为支付完成
		$fmid = (int) $param['param']['fmid'];
		$pcard = (int) $param['param']['pcard'];
		$ptoken = (string) $param['param']['ptoken'];
		$pmoneynow = (int) $param['param']['pmoneynow'];
		$pmode = (int) $param['param']['pmode'];
		$pamount = (float) $param['param']['pamount']; //总金额
		$pdealno = (string) $param['param']['pdealno'];
		$pchips = (int) $param['param']['pchips'];
		$num = max(1, (int) $param['param']['num']);
		$version = empty($param['version']) ? '' : trim($param['version']);

		if (($sid == 13) || empty($pdealno) || (!$api) || ($fmid != $ptoken) || (!$pamount) || (!in_array($pmode, array(105, 113, 114, 117))) || (!$vmid) || (in_array($pcard, array(33, 37)))) {
			return $this->genRet($param['mid'], array('result' => -2));
		}
//		oo::logs()->debug($param, 'order.dbg.txt');
		if (( in_array($api, array(10, 16)) && $pmode == 114) || ( ( $api == 8 || $api == 9 ) && $pmode == 105 )) {
			$thepamount = ($act == 1) ? $pamount * $num : $pamount;
			if ((PRODUCTION_SERVER === true) && oo::$config['cardlist'][$pcard]['byprice'] * $num != $thepamount) {  //91单 的价格验证(与配置中的价格不匹配则不允许下单和发货)
				$ret['result'] = -8;
				oo::logs()->debug(array('date' => date("Y-m-d H:i:s"), 'param' => $param), 'order-price-err.txt');
				return $this->genRet($mid, $ret);
			}
			if ($act == 1) {//下单
				if (empty($pdealno)) {//无订单号
					return $this->genRet($param['mid'], array('result' => -4));
				}
				$aTmpPay = oo::payment()->findPayments(array('pdealno' => $pdealno));
				oo::logs()->debug(array('time' => date("Y-m-d H:i:s"), 'aTmpPay' => $aTmpPay, 'pdealno' => $pdealno, 'param' => $param), 'order.failed.txt');

				$pid = 0;

				if (count($aTmpPay) > 0) {//已经存在该订单号
					return $this->genRet($param['mid'], array('result' => -3));
				} else {
					($api == 10) && ($pchips = oo::$config['property'][$pcard][2]);
					$pid = oo::payment()->insert($fmid, $pcard, $ptoken, $pmoneynow, $pmode, $pamount, $pdealno, $pchips, $num);
				}
				$ret['result'] = $pid > 0 ? 1 : 0; //返回结果给客户端
				if ($ret['result'] == 0) {
					oo::logs()->debug(array('fmid' => $fmid, 'pcard' => $pcard, 'ptoken' => $ptoken, 'pmoneynow' => $pmoneynow, 'pmode' => $pmode, 'pamount' => $pamount, 'pdealno' => $pdealno, 'pchips' => $pchips, 'num' => $num), 'payment.order.failed.txt');
				}
				return $this->genRet($mid, $ret);
			} elseif ($act == 2) {
				$aTmpPay = oo::payment()->findPayments(array('pdealno' => $pdealno));
				$pid = $flag = 0;
//				oo::logs()->debug($aTmpPay, 'order.dbg.txt');
				if (count($aTmpPay) > 1) {
					return $this->genRet($param['mid'], array('result' => -5));
				}
				$pid = $aTmpPay[0]['pid'];
				$isIphone = in_array($api, array(1, 6, 8)); //是Iphone调用的API
				$isAndriod = in_array($api, array(3, 4, 5, 10)); //是否Android
				$platFlag = ($isIphone ? 'iphone' : 'ipad') . '-' . ( empty($version) ? 'old' : 'new' );
				$platFlag = $isAndriod ? 'Android-' . $version : $platFlag;

				$url = 'http://service.sj.91.com/usercenter/AP.aspx';
				$aQuery = array('AppId' => oo::$config['api'][$api][2], 'Act' => 1, 'CooOrderSerial' => $pdealno, 'AppKey' => oo::$config['api'][$api][3]);
				$aQuery['Sign'] = md5(implode($aQuery));
				unset($aQuery['AppKey']);
				$respCont = functions::post_request_phone($aQuery, $url);
				$respCont = json_decode($respCont, true);

				if (!isset($respCont['ErrorCode']) || $respCont['ErrorCode'] != 1) {
					$ret['result'] = -6;
					return $this->genRet($mid, $ret);
				}
				if ($respCont['OrderMoney'] != $aTmpPay[0]['pamount']) {  //91单 的价格验证
					$ret['result'] = -7;
					oo::logs()->debug(array('date' => date("Y-m-d H:i:s"), '91-info' => $respCont, 'param' => $param), 'order-price-err.txt');
					return $this->genRet($mid, $ret);
				}
				$flag = oo::payment()->complete($pid, $pmode, '', $platFlag, $pdealno);
				$ret['result'] = 0;
				if ($flag > 0 || $flag == -2) {//如果订单已完成
					$ret['result'] = 1;
					$langIdx = 19;
					if ($pcard == 0) {//直充金币
						$langIdx = 21;
					} elseif (( $pcard > 0 && $pcard <= 7 ) || ( $pcard >= 9910 && $pcard <= 9915 )) {//会员卡
						$langIdx = 8;
					} elseif ($pcard >= 10 && $pcard <= 19) {//钻类
						$langIdx = 10;
					} elseif ($pcard == 9999) {//博雅币
						$langIdx = 21;
					}
					$aUser = oo::minfo()->getMinfo($mid, array('mviptime', 'mvip', 'mmoney', 'mnick'), false);
					$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);
					$ret['desc'] = functions::lang(array('str' => lang::$buyerr[$langIdx], 0 => $num, 1 => lang::$property[$pcard][0], 2 => date(lang::$buyerrdate, $aUser['mviptime']), 4 => $aUser['mnick']));
					$aOther = array();
					$aOther['bycoins'] = oo::boyaacoins()->getBycoins($mid); //博雅币
					$aOther['money'] = (int) $aUser['mmoney'];  //游戏币
					$aOther['bbface'] = oo::gifts()->getBBface($mid); //开心宝贝表情包过期时间
					$aOther['payscore'] = (in_array(oo::$config['sid'], array(13)) && $pmode == 105) ? (int) oo::payment()->getPayScoreForBcenter2($mid, 0, 105, $aDecryptData[1]) : 0; //信用值
					$aOther['isvip'] = $aUser['mvip']; //VIP
					$ret['other'] = $aOther; //其他数据
				}

				return $this->genRet($param['mid'], $ret);
			}
		} else {
			return $this->genRet($param['mid'], array('result' => -4));
		}
	}

	/**
	 * 返回iphone用户的最大支付限额
	 *
	 * @param Mixed $param
	 */
	public function limit($param) {
		if (!$this->auth($param, PRODUCTION_SERVER ? 3 : 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int) $param['mid'];
		$sid = (int) $param['sid'];
		$api = (int) $param['api'];
		$vmid = (int) $param['vmid'];

		oo::setLang($param['langtype']);

		if (!$api || !$mid) {
			return $this->genRet($mid, array());
		}

		//老版本iphone繁体和老版本ipad繁体不再支持
		if (in_array($api, array(1, 2, 6))) {
			return $this->genRet($mid, array('result' => 0));
		}

		//平台区分
		if (!in_array($api, array(14, 19, 20, 25, 28, 37, 38, 60,69,81))) {
			return $this->genRet($mid, array('result' => ($api == 33 || $api == 34 ? 10000 : 1000)));
		}

		//取验证头信息
		$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);

		//计算可以使用的额度
		include(PATH_LIB . 'mobile/class.paylimit.php');
		//Paylimit::test(客户端类型, 用户ID, 当前购买的金额, pmode, 机器码, 是否越狱)
		$debug = array();
		$amount = Paylimit::test($api, $mid, 0, 105,$aDecryptData[1], $aDecryptData['isJailBreak'], $debug);
		if (in_array($api, array(19))) {
			$time = date("Y-m-d H:i:s");
			oo::logs()->debug("======== [{$time}] ========\nPaylimit::test({$api}, {$mid}, 0, 105, {$aDecryptData[1]}, {$aDecryptData['isJailBreak']}) = {$amount}; //" . json_encode($debug), "payment.limit");
		}
		if (in_array($api, array(37,38))) {
			if($amount <= 0){
				$time = date("Y-m-d H:i:s");
				oo::logs()->debug("======== [{$time}] ========\nPaylimit::test({$api}, {$mid}, 0, 105, {$aDecryptData[1]}, {$aDecryptData['isJailBreak']}) = {$amount}; //" . json_encode($debug), "payment.limit");
			}
		}

		return $this->genRet($mid, array('result' => $amount));
	}

	/**
	 * mycard支付接口
	 *
	 * @param type $param
	 * @return type
	 */
	public function mycardPay($param) {
		if (!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int) $param['mid'];
		$btype = (int) $param['param']['btype']; //购买类型，1游戏币，2博雅币
		$cardNo = empty($param['param']['cardno']) ? '' : trim($param['param']['cardno']);
		$cardPwd = empty($param['param']['cardpwd']) ? '' : trim($param['param']['cardpwd']);

		if (!$mid || (!$aUser = oo::minfo()->getMinfo($mid, array('sid', 'sitemid')) )) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}

		if (strlen($cardNo) != 16 || strlen($cardPwd) != 16) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if (!in_array($btype, array(1, 2))) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}

		if ($aUser['sid'] == 79) {
			$appid = 34;
		} else {
			$appid = 2;
		}

		$payResult = json_decode(oo::payment()->cardPayCenter($appid, $aUser['sitemid'], $cardNo, $cardPwd, 'mycard', ( $btype % 2)), true);
		if ($payResult['errno'] < 0) {
			if ($payResult['errno'] == -12) {//卡密已经被使用过
				$ret['result'] = -3;
			} else {
				$ret['result'] = -2;
			}
		} else {
			$ret['result'] = $payResult['errno'];
			$ret['money'] = $btype == 1 ? $payResult['pchips'] : $payResult['coins'];
			$ret['totalmoney'] = 0; //总金币数
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 *  babi卡支付接口
	 *
	 * @param Mixed $param
	 */
	public function babiPay($param) {
		if (!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int) $param['mid'];
		$btype = (int) $param['param']['btype']; //购买类型，1游戏币，2博雅币
		$cardNo = empty($param['param']['cardno']) ? '' : trim($param['param']['cardno']);

		if (!$mid || (!$aUser = oo::minfo()->getMinfo($mid, array('sid', 'sitemid')) )) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if (strlen($cardNo) != 20) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if (!in_array($btype, array(1, 2))) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}

		if ($aUser['sid'] == 79) {
			$appid = 34;
		} else {
			$appid = 33;
		}

		$payResult = json_decode(oo::payment()->cardPayCenter($appid, $aUser['sitemid'], $cardNo, '', 'babi', ( $btype % 2)), true);
		if ($payResult['errno'] < 0) {
			$ret['result'] = -2;
		} else {
			$ret['result'] = 1;
			$ret['money'] = $btype == 1 ? $payResult['pchips'] : $payResult['coins'];
			$ret['totalmoney'] = 0; //总金币数
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取某用户的购买记录
	 * @param array $param
	 */
	public function getUserPayment($param) {
		if (!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if (!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret); //参数错误
		}
		$unid = (int) $param['unid'];
		$api = (int) $param['api'];
		$ver = $param['version'];
		$langtype = (int) $param['langtype'];

		$paySite = of::isAndroid($api) ? 7 : (of::isIphone($api) ? 5 : 0);
		
		$zhIos = false;
		if (of::isIphone($api) && in_array(oo::$config['sid'], array(93,117))) $zhIos = true;
		
		// 挂靠主站的站点，商品信息独立	
		if (isset(oo::$config['detachStatV2'][$api]) && array_key_exists($unid, oo::$config['detachStatV2'][$api])) {
			$api = $param['api'] = oo::$config['detachStatV2'][$api][$unid];
		}
		oo::setLang($param['langtype']);
		if( in_array((int)$param['unid'], array(190, 225)) ){
			oo::langDiff((int) $param['unid'], (int) $param['langtype'])->setDiff(array('usecard' => &lang::$usecard, 'cardlist'=>&lang::$cardlist));
		}
		$chips = $myList = $byList = $myListZh= array();
		if(isset(oo::$config['newShopingMall']) && oo::mobileGoods()->fit($api, $ver)){
			$suffix = oo::$config['language'][$langtype];
			$records = oo::mobileGoods()->getRepositories($api);
			foreach($records as $record){
				if(!isset($record['info'][$suffix])){//描述信息不全直接不显示,避免出现被不全信息覆盖的情况出现
					continue;
				}
				if (!oo::mobileGoods()->vercmp($ver, $record['version'])) { // 版本过滤
					continue;
				}
				$image = isset($record['info'][$suffix]) ? $record['info'][$suffix][2] : '';
				$cardName = isset($record['info'][$suffix]) ? $record['info'][$suffix][0] : '';
				if(strpos($image, '|') !== false) {
					list($image, $descImg) = explode('|', $image);
				}
				$payTypes = array_values($record['ptype']);

				if($record['pcard']) {
					if($record['pcard']==9999){
						$byList[$record['num']] = array($payTypes[0][2], $image, $record['info'][$suffix][0]);
					}else{
						if($zhIos){
							foreach ($record['ptype'] as $keyPtype => $valuePinfo){
								if(!isset($myListZh[$record['pcard']][$keyPtype])) $myListZh[$record['pcard']][$keyPtype] = array($valuePinfo[2], $image, $cardName);
							}
						}else{
							$myList[$record['pcard']] = array($payTypes[0][2], $image, $cardName);
						}
					}
				} else {
					$chips[$record['num']] = array($payTypes[0][2], $image, $record['info'][$suffix][0]);
				}
			}
		} else {
			$commodityData = oo::mobileCommodity()->getAppleGoods($api);
			foreach($commodityData['commodities'] as $commodity){
				$descs = json_decode($commodity['desc'],true);
				$descLang = isset($descs[$langtype]) ? $langtype : 0;
				if($commodity['pcard']) {
					if($commodity['pcard']==9999){
						$byList['number'] = array($commodity['current_price'],$descs[$descLang][2], $descs[$descLang][0]);
					}else{
						$myList[$commodity['pcard']] = array($commodity['current_price'],$descs[$descLang][2], $descs[$descLang][0]);
					}
				}
				else {
					$chips['number'] = array($commodity['current_price'],$descs[$descLang][2], $descs[$descLang][0]);
				}
			}
		}

		$fields = array('fmid' => $mid, 'pstatus' => 2);
		if(of::isAndroid($api)) {
			$fields['limit'] = 50;
		}
		$aPayList = oo::payment()->getOrdersAll($fields);

		if( isset(oo::$config['filterPcBuy']) && oo::$config['filterPcBuy'] == 1){//这货不是移动的(过滤PC购买记录)
			$mobilePayList = array();
			foreach ($aPayList as $k => $v){
				if( isset(oo::$config['filterPcBuy']) && oo::$config['filterPcBuy'] == 1 && ! of::isPhone($v['fsid'])) continue;//这货不是移动的(过滤PC购买记录)
				$mobilePayList[] = $v;
			}
			$aPayList = $mobilePayList;
		}

		$exception = ($api == 36 && strcmp($ver, '4.6.2') >= 0);
		if (($exception || $param['param']['showbypay'] == 1) && ($aByLogs = oo::boyaacoinslog()->findbylogs(array('fmid' => $mid)))) { //显示使用博雅币购买的记录
			foreach ($aByLogs as $v) {
				if( isset(oo::$config['filterPcBuy']) && oo::$config['filterPcBuy'] == 1 && ! of::isPhone($v['fsid'])) continue;//这货不是移动的(过滤PC购买记录)
				if (($v['blflag'] != 1) || !in_array($v['blmode'], array(1, 2, 3, 4)))
					continue;
				$aPayList[] = array('pcard' => $v['ddcard'], 'ptime' => $v['bltime'], 'pfee' => intval($v['bccoins']),"pmode"=> 0);
			}
		}
		//通过游戏币购买的记录
		if (isset(oo::$config['openPayForChips']) && oo::$config['openPayForChips'] == 1 && ($pByChips = oo::Gifts()->getPayChipsLog( $mid))){
			foreach ($pByChips as $v) {
				if( isset(oo::$config['filterPcBuy']) && oo::$config['filterPcBuy'] == 1 && ! of::isPhone($v['fsid'])) continue;//这货不是移动的(过滤PC购买记录)
				if(!is_array($v) || empty($v)) continue;
				$aPayList[] = array('pcard' => $v['pcard'], 'ptime' => $v['ptime'], 'pfee' => intval($v['pchips']),"pmode"=> 999);
			}
		}
		$list = array();
		$aPayList = array_values(functions::arrayMbSort($aPayList, 'ptime','desc'));//根据时间倒序
		foreach ((array) $aPayList as $key => $value) {
			$pcard = $value['pcard'];
			if( $pcard > 0 && $pcard < 999 && !isset(oo::$config['cardlist'][$pcard]) ){//PC专用的道具不显示
				continue;
			}
			if ($pcard == 12 && oo::$config['sid']==13) continue;//繁体的蓝钻的购买记录不显示

			$pamount2meijin = 0;
			$prate = $value['prate'];
			if(!in_array(oo::$config['sid'],array(93,117))){
				if($prate && stripos($prate,'e') !== false){
					$prate = functions::sctonum($prate);//与美金对比的汇率
				}
				$pamount2meijin = $value['pamount'] * $prate;//支付金额转换成美金
			}


			//处理金币情况
			if($pcard == 0) {
				$inShop = isset($chips[$value['pchips']]);
				$chipName = str_replace('#1', $value['pchips'], lang::$playreward['chip']);
				$chipName = $inShop ? $chips[$value['pchips']][2] : $chipName;
				if($api == 32){
					$aChipName = explode(' ',$chipName);
					$chipName =  $aChipName[0];
				}
				$chipImage = "chips.png";

				$realPid = isset($value['realPid']) ? $value['realPid'] : 0;
				$arow = array(
					$pcard,
					$chipName,
					(int) $value['pfee'],
					date("Y-m-d", $value['ptime']),
					$value['pamount'],
					oo::$config['imagesUrl'] . "phone_goods/" . ( ($inShop && $chips[$value['pchips']][1]) ? $chips[$value['pchips']][1] : $chipImage),
					$value['pamount'],
					$value['pmode'],
					$realPid,
					$pamount2meijin
				);
				$list[] = $arow;
				continue;
			}
			$thisCard = oo::$config['cardlist'][$pcard];
			if($pcard == 9999) {//博雅币
				$inShop = isset($byList[$value['pchips']]);
				$chipName = $inShop ? $byList[$value['pchips']][2] : lang::$cardlist[$pcard][0];
				if($api == 32){
					$aChipName = explode(' ',$chipName);
					$chipName =  $aChipName[0];
				}
				$realPid = isset($value['realPid']) ? $value['realPid'] : 0;
				$arow = array(
					$pcard,
					$chipName,
					(int) $value['pchips'],
					date("Y-m-d", $value['ptime']),
					$value['pamount'],
					oo::$config['imagesUrl'] . "phone_goods/boyaacoins.png",
					$value['pamount'],
					$value['pmode'],
					$realPid,
					$pamount2meijin
				);
				$list[] =$arow;
				continue;
			}
			
			$pmodeMap = array(99=>7,463=>284);//V3支付可解决
			if($zhIos && isset($myListZh[$pcard][$pmodeMap[$value['pmode']]][0])){
				$havZhIosCard = true;
			}
			
			$cardPic = isset($myList[$pcard]) ? $myList[$pcard][1] : $thisCard['cpic'];
			if($havZhIosCard) $cardPic = $myListZh[$pcard][$pmodeMap[$value['pmode']]][1];
			//获取图片全路径
			$picture = oo::$config['imagesUrl'] . "phone_goods/" . $cardPic;//cpic字段，CMS > 其它 > 道具 > 点击管理 > 图片这个字段
//			if (in_array($api, array(10)) && (float)$param['version'] >= 3.8){
//				$picture .= $thisCard['cpic'];
//			}
			$thisCardName = isset($myList[$pcard]) ? $myList[$pcard][2] : lang::$cardlist[$pcard][0] ;
			$realPid = isset($value['realPid']) ? $value['realPid'] : 0;

			$price = ($pcard ==170 && $value['pmode'] == 0) ? $value['pfee'] : ($myList[$pcard][0] * ((int) $value['pfee']));//博雅币购买的
			$arow = array(
				$pcard,
				$thisCardName,
				(int) $value['pfee'],
				date("Y-m-d", $value['ptime']),
				(int) $value['pamount'],
				$picture,
				$price,
				$value['pmode'],
				$realPid,
				$pamount2meijin
			);
			if($havZhIosCard) $arow[6] = $myListZh[$pcard][$pmodeMap[$value['pmode']]][0] * ((int) $value['pfee']);
			$list[] = $arow;
		}
		$ret['result'] = 1;
		$ret['list'] = (array) $list;
		return $this->genRet($mid, $ret);
	}

	/*
	 * 代理下单统计项容器
	 */
	private $_proxyOrderStatItem = array('csid'=>0,'mid'=>0,'aEvent'=>array());

	/*
	 * 根据支付中心商品ID找到支付名称
	 */
	private function _getPmodeNameById($api,$id){
		$api = functions::uint($api);
		$id = functions::uint($id); //支付中心商品ID
		$aCfg = oo::mobileConfig()->getDeploy($api,'product',"mb/product/{$api}.php");
		if ( (! $aCfg) || ( ! is_array($aCfg)) ){// 没找到商品配置不统计
			return NULL;
		}
		if ( isset($aCfg[$id])){
			$k = $aCfg[$id][0] . '_' . $aCfg[$id][1];
			return isset(oo::$config['paycenter_chanel'][$k]) ? oo::$config['paycenter_chanel'][$k][0] : 'unknown';
		}
		return 'unknown';
	}

	/*
	 * 代理下单各种状态统计
	 */
	private function _proxyOrderStat($eid,$param,$extra = array()){
		$eid = intval($eid);//事件分类ID
		$api = intval($param['api']);
		$sid = intval($param['sid']);

		$pmodeName = $this->_getPmodeNameById($api,$param['param']['id']);
		if ($pmodeName === NULL){ //无商品配置不统计
			return -1;
		}
		$aItem = &$this->_proxyOrderStatItem['aEvent'];
		$itemName = '';
		switch($eid){
			case 21100: //客户端代理下单总数
			case 21101: //业务机请求支付中心下单数
			case 21102: //业务机请求支付中心失败再次下单数
			case 21103: //请求支付中心成功数
			case 21104: //请求支付中心失败数
			case 21107: //支付中心下单失败数
				$itemName = $pmodeName;
				break;
			case 21105: //请求支付中心失败各种网络状态统计
				$errCode = isset($extra['errcode']) ? $extra['errcode'] : 'unknown';
				$itemName = "code({$errCode})";
				break;
			case 21106: //支付中心下单成功数(区分不同成功状态码)
				$succCode = isset($extra['succcode']) ? $extra['succcode'] : 'unknown';
				$itemName = "{$pmodeName}(code:{$succCode})";
				break;
			case 21108: //支付中心下单各种失败原因统计
				$errCode = isset($extra['errcode']) ? $extra['errcode'] : 'unknown';
				$itemName = "{$pmodeName}(code:{$errCode})";
				break;
		}
		if ($itemName != ''){
			$cnt = isset($extra['cnt']) ? $extra['cnt'] : 1;
			$aItem[$eid][$itemName] += $cnt;
		}
		return 1;
	}

	/*
	 * 安卓/iphone越狱代理下单
	 */
	public function andrCreateOrder($param) {
		$api	= functions::uint($param['api']);
		$mid	= functions::uint($param['mid']);
		$unid = functions::uint($param['unid']);
		$langtype = functions::uint($param['langtype']);
		$autoPayType = isset($param['param']['autopay']) ? $param['param']['autopay']:0; //自动续费对应的支付方式id(业务这边的id)
		$this->_proxyOrderStatItem['mid'] = $mid;
		$this->_proxyOrderStatItem['csid'] = isset(oo::$config['api'][$api]) ? oo::$config['api'][$api][1] : $unid;

		////////////客户端代理下单总数///////
		$this->_proxyOrderStat(21100,$param);
		/////////////////////////////////////
		$errLogFile = 'andrCreateOrderErr';
		$checkLevel = PRODUCTION_SERVER? 3 : 0;//验证级别线上为3，内网为0，为了内网的下单测试
		if (!$this->auth($param, $checkLevel)) {
			oo::logs()->debug(array(-1,$param), $errLogFile);
			return $this->genRet($param['mid'], array('result' => -1, 'error' => 'Signature is invalid'));
		}
		
		// 挂靠主站的站点，商品信息独立	
		if (isset(oo::$config['detachStatV2'][$api]) && array_key_exists($unid, oo::$config['detachStatV2'][$api])) {
			$api = $param['api'] = oo::$config['detachStatV2'][$api][$unid];
		}		
		
		if (!$mid) {
			oo::logs()->debug(array(-9,$param), $errLogFile);
			$ret['result'] = -9;
			return $this->genRet($param['mid'], $ret); //参数错误
		}
		
		if (oo::mobileConfig()->getSwc($api, 'pmodelimit')) { //阿语安卓每日钱海支付
			$goods = oo::mobileGoods()->getGoodByPayCenterGId($param['param']['id'], $api);
			$plimit = oo::mobilepayment()->payLimitByPmode($api, $mid);
			$plimitDay = 70;
			$plimitMonth = 210;
			$plimitDayLastpay = 60;
			$aIp = oo::IpLocation()->getlocation( functions::getip() ); //country
			$aIpCheck = array('伊拉克', '阿联酋');
			$isIP = false;
			foreach((array)$aIpCheck as $v){
				if( strstr($aIp['country'], $v)!==false ){
					$isIP = true;
					break;
				}
			}
			if ($isIP) {
				$plimitDay = 200;
				$plimitMonth = 1000;
			}
			if ($goods['ptype'] == 247) {
				if ( ($plimit['day'][247] > $plimitDay) || ($plimit['month'][247] > $plimitMonth) || (time() - $plimit['day']['lastpay'] < $plimitDayLastpay) ) {
					$ret['result'] = -9;
					$ret['refret'] = json_encode($plimit);
					return $this->genRet($param['mid'], $ret);
				}
				//更新下单时间用于支付时间限制
				ocache::mongoTemp()->hSet(okey::mkandroidPromo("D{$api}|{$mid}"), 'lastpay', time());
			}
		}
		
		#实时检查用户的额度限制是否可以购买该商品,支付方式防欺诈功能
		$isQizha = 0; // 是否开启支付防欺诈功能
		if(oo::mobileConfig()->getSwc($api, 'buserplim')){
			$isQizha = 1;
			$chePtype = -1;
			if(isset($param['param']['buyche'])){ // 新版本,非快捷支付
				$chePtype = $param['param']['buyche']['pt']; // 支付方式
				$chePri = $param['param']['buyche']['pri']; // 商品单价
			} else {
				//if(oo::mobileConfig()->getSwc($api, 'oldbuserplim')){ // 老版本也要检测
					$aTmpPidPtype = ocache::kvs()->get(okey::mkPidToPtype($api)); // pid到Ptype和单价的映射
					if(empty($aTmpPidPtype)){
						$aTmpPidPtype = oo::mobileGoods()->mkPidToPtype($api);
					}
					if(isset($aTmpPidPtype[ $param['param']['id'] ])){
						$chePtype = $aTmpPidPtype[ $param['param']['id'] ]['ptype'];
						$chePri = $aTmpPidPtype[ $param['param']['id'] ]['price'];
					}
				//}
			}	
			if($chePtype != -1){
				$aTmpConf = oo::mobileConfig()->getDeploy($api,'buserplim');
				$tmpLang = oo::$config['language'][ $param['langtype']  ];
				$tmpV = $param['version'];
				if(!empty($aTmpConf[ $chePtype ])){
					$tmpNowTime = time();
					if(!empty($aTmpConf[ $chePtype ]['eg']['osecond']) && !isset($aTmpConf[ $chePtype ]['eg']['wmids'][$mid])){ // 先检查下单时间间隔
						$aTmpPayDetail = oo::mobilePlist()->getPayDetail($mid,'beorder');
						if(!empty($aTmpPayDetail['ordertime'])){
							$tmpDuration = $tmpNowTime - $aTmpPayDetail['ordertime'];
							if( $tmpDuration < $aTmpConf[ $chePtype ]['eg']['osecond'] && (empty($aTmpPayDetail['lasttime']) || $aTmpPayDetail['lasttime'] < $aTmpPayDetail['ordertime']) ){ // 在指定时间间隔内不允许下单,除非有发货成功
								$tmpBuyTip = isset($aTmpConf[ $chePtype ]['eg']['osedesc'][ $tmpLang ])? $aTmpConf[ $chePtype ]['eg']['osedesc'][ $tmpLang ]:'';
								$tmpSkey = 'dur'.$aTmpConf[ $chePtype ]['eg']['osecond'];
								$dcData = array( 'uid' => $mid, 'lts_at' => $tmpNowTime, 'et_id'=> 'orderqizhadata', "$tmpV"=>1,'ptype'=>$chePtype,"$tmpSkey"=>1);
								oo::dc()->sendData( oo::$config['api'][$api][1] , 23, $dcData);
								oo::mf()->send( oo::$config['api'][$api][1],$mid,'event_logs',array('et_id'=>'orderqizhadata', 'lts_at'=>$tmpNowTime,'e_api'=>$api,'eventCat'=>'防欺诈下单间隔限制','osv'=>$tmpV),$tmpNowTime);
								return $this->genRet($param['mid'], array('result' => -15,'data' =>array('RET'=>-15,'MSG'=>$tmpBuyTip) ));
							}
						}
					}
					
					$aTmpLim = oo::mobilePlist()->getPtypeLimitConf($mid,$api,$chePtype,'buserplim');
					if(!empty($aTmpLim)){
						if(oo::mobileConfig()->getSwc($api, 'buserplim2')){
							$aTmpPayLeft = oo::mobilePlist()->getPayLeft($mid,$api,$chePtype ,$aTmpLim);
						} else {
							$aTmpPayLeft['n'] = 1;
							$aTmpPayLeft['m'] = oo::mobilePlist()->getPayMoneyLeft($mid,$api,$chePtype ,$aTmpLim);
						}	
						$isPass = 1;
						if($aTmpPayLeft['n'] <= 0 || $aTmpPayLeft['m'] < $chePri){ // 如果该支付方式剩余单数或剩余额度不能买该商品
							$isPass = 0;
						} else if(isset($aTmpPayLeft['gtsnum'][ $chePri.'-' ]) && $aTmpPayLeft['gtsnum'][ $chePri.'-' ] <= 0 ){
							$isPass = -1;
						}
						if($isPass <= 0){
							$dcData = array( 'uid' => $mid, 'lts_at' => $tmpNowTime, 'et_id'=> 'qizhadata', "$tmpV"=>1,'ptype'=>$chePtype,'order'=>1);
							$tmpBuyTip = isset($aTmpConf[ $chePtype ]['eg']['desc'][ $tmpLang ])? $aTmpConf[ $chePtype ]['eg']['desc'][ $tmpLang ]:'';
							if($isPass == -1){
								$tmpBuyTip = isset($aTmpConf[ $chePtype ]['eg']['gtdesc'][ $tmpLang ])? $aTmpConf[ $chePtype ]['eg']['gtdesc'][ $tmpLang ]:$tmpBuyTip;
							} 
							oo::dc()->sendData( oo::$config['api'][$api][1] , 23, $dcData);
							oo::mf()->send( oo::$config['api'][$api][1],$mid,'event_logs',array('et_id'=>'qizhadata', 'lts_at'=>$tmpNowTime,'e_api'=>$api,'eventCat'=>'防欺诈拦截用户','osv'=>$tmpV,'payid'=>$chePtype),$tmpNowTime);
							return $this->genRet($param['mid'], array('result' => -15,'data' =>array('RET'=>-15,'MSG'=>$tmpBuyTip) )); 
						}
					}
				}
			}		
		}
		oo::setLang($param['langtype']);
		$id = functions::uint($param['param']['id']);
		//$api	= functions::uint($param['api']);
		//$unid = functions::uint($param['unid']);
		$oldGoods		= functions::uint($param['param']['oldGoods']);//1是老商城商品，0是新商城商品
		$pcenterData = $param['param']['pcenterData']; //安卓需要传给支付中心的数据
		$ver	= $param['version'];
		//$mid	= functions::uint($param['mid']);
		$ptype	= isset($param['param']['ptype']) ? (int) $param['param']['ptype'] : 0; //短信支付类型
		$mlist	= (array)$param['param']['mlist']; //短信支付商品id列表  array($type=>$id)
		$paytype = functions::uint($param['param']['paytype']);//支付类型，暂用于更改域名

		if (BY::concurrent($mid, '', true)) {//防止并发请求
			oo::logs()->debug(array(-12, $param), $errLogFile);
			$ret['result'] = -12;
			return $this->genRet($param['mid'], $ret); //参数错误
		}
		//支付宝下单需要支付token
		if($api == 102 && !$param['param']['refresh_token'] ){
			oo::logs()->debug(array(-8, $param), $errLogFile);
			return $this->genRet($param['mid'], array('result' => -8, 'error' => 'Missing some fields'));
		}


		//蛋痛,临时兼容客户端错误参数
		if($api == 22 && is_array($mlist)){
			$mlistKyes = array_keys($mlist);
			if($mlistKyes[0] == 56 && $param['param']['pamount'] == 34){
				$tempValue = $param['param']['pamount'];
				$param['param']['pamount'] = $ptype;
				$ptype = $tempValue;
			}
		}

		if(!$id && $mlist){//如果id没有传，去mlist第一个值
			$id = current($mlist);
		}
		$requestTo = (string) $param['param']['requestTo']; //安卓不同支付类型会请求支付中心不同接口地址
		if(empty($pcenterData)){
			oo::logs()->debug(array(-2, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -2, 'error' => 'Missing some fields'));
		}
		//验证安全协议
		//if (functions::isUseXTunnelVerify($api, $ver)) {
		//	$xTunnelVerify = functions::getXTunnelVerify($api);
		//	if (!$xTunnelVerify) {
		//		oo::logs()->debug(array(-3, $param), $errLogFile);
		//		return $this->genRet($mid, array('result' => -3, 'error' => 'Verify field is invalid'));
		//	}
		//}
		// 刷我的卡需求(帮其它人购买)
		if (oo::mobileConfig()->getSwc($api, 'pay2other') && ($param['param']['paytomid'])) {
			$pay2other = array('from'=>$mid,'to'=>functions::uint($param['param']['paytomid']),'id'=>$id);
			$mid = $pay2other['to']; // 把下单人改成接收人
		}
		//验证用户
		$aUser = oo::minfo()->getMinfo($mid, array('sid', 'mstatus', 'sitemid', 'mpay','mmoney', 'mbank','mlevel'));
		if(!$aUser || (int)$aUser['mstatus'] == 1){
			oo::logs()->debug(array(-4, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -4, 'error' => 'User is not exists/User is disabled'));
		}
		$sid = $aUser['sid'];
		if(in_array(oo::$config['sid'], array(117, 93)) && (!$firstGoodPay = $this->firstGoodPay($api, $mlist, $sid, $id)) ){
			if($aUser['mpay']){//首付大礼包防刷
				$purchased = property_exists(lang,'purchased') ? lang::$purchased : "you have purchased";
				oo::logs()->debug(array(-11, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -11, 'error' => $purchased));
			}
		}

		//首付礼包只能下单限制
		if(oo::$config['mFirstPayStat'] == 1){
			if(oo::misc()->getFirstPayLog($mid) && oo::misc()->isFirstPay($api, $mlist, $sid, $id)){
				oo::logs()->debug(array(-13, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -13, 'error' => "you have purchased"));
			}
		}

		if(oo::mobileConfig()->getSwc($api, 'orderLimit') && array_key_exists(99, $mlist)){
			if(oo::stats()->e2pLimit($api, $mid)){
				oo::logs()->debug(array(-14, $param), $errLogFile);
				$e2plimit = property_exists(lang,'e2plimit') ? lang::$e2plimit : "Your orded is being processed. Please don't press Buy again.";
				return $this->genRet($mid, array('result' => -14, 'error' => $e2plimit));
			}
		}
		
		//渠道支付额度限制
		if(oo::mobileConfig()->getSwc($api, 'mbchnpaylimt') && oo::mobilepayment()->payLimitByChannel($api, $mid, 0, true)){
			return $this->genRet($mid, array());	
		}
		
		//支付额度限制开关
		if(isset(oo::$config['openPayLimit']) && oo::$config['openPayLimit'] == 1  && $mlist && array_key_exists( $ptype, oo::$config['payCreditList'])){
			$imsino		= $mid;
			$pamount		= isset($param['param']['pamount']) ? $param['param']['pamount'] : 0;
			//检测支付记录
			$id = oo::payment()->checkPayByImsi($mlist,$mid,$imsino,$pamount,$ptype,$api);
			if(!$id){
				$sEmsg = in_array($api, array(22, 36, 65)) ? lang::$payInfo['limit'] : 'Over the money to pay';
				oo::logs()->debug(array(-10, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -10, 'error' => $sEmsg));
			}
			$stype = array_search($id, (array)$mlist);
		}

		////////////////////////////////////////////////////////////////////////////////////////////
		if ( oo::mobileConfig()->getSwc($api,'openAndrPayLimit',$mid)){//安卓支付限制
			$oTmp = oo::mobMod('AndrPayLimit',array('unid'=>$unid));
			$iAvailAmount = $oTmp->getAvailAmount($mid,is_array($xTunnelVerify) ? $xTunnelVerify : array() );
			if ($iAvailAmount <= 0){
				oo::logs()->debug(array(-20, $param), $errLogFile);
				return $this->genRet($mid,array('result' => -20,'error' => $oTmp->getTips($langtype)));
			}
			if (is_array($xTunnelVerify)){ //记录当前下单设备编号以及下单IP地址
				//$oTmp->logProxyOrderExtra($mid,array(1 => $xTunnelVerify[1]),functions::getip());
				oo::callback()->add("oo::mobMod('AndrPayLimit',array('unid'=>{$unid}))->logProxyOrderExtra",array($mid,array(1 => $xTunnelVerify[1]),functions::getip()));
			}
		}
		////////////////////////////////////////////////////////////////////////////////////////////

		//联运大厅引导
		$qpay21Goods = false;
		if(oo::mobileConfig()->getSwc($api, 'hallFirstPayPop')){
			$qpay21Products = oo::mobileQpay()->getAllQpay21($api);
			if(in_array($id, $qpay21Products)){
				$qpay21Goods = true;
				if(!oo::mobileConfig()->getSwc($api, 'hallFirstPayPop')){//开关未开启禁止购买
					oo::logs()->debug(array(-8080, $param), $errLogFile);
					return $this->genRet($mid, array('result' => -8080, 'error' => 'pid not exist'));
				}
					
				$checkExists = oo::mobileQpay()->checkQpay21PidExists($mid, $api, $id);
				if($checkExists !== true){//确认商品是否是所配商品
					oo::logs()->debug(array($checkExists, $param), $errLogFile);
					return $this->genRet($mid, array('result' => $checkExists, 'error' => 'pid not exist'));
				}
					
				if(oo::mobileQpay()->checkQpay21UserLmt($mid, $api) !== true){//用户条件不满足
					oo::logs()->debug(array(-8089, $param), $errLogFile);
					return $this->genRet($mid, array('result' => -8089, 'error' => 'pid not exist'));
				}
			}
		}
		
		if ($id && !$qpay21Goods) { //某些支付方式没有商品id
			if (of::isHtml5($api)) { //h5没有走cms商城
				$pcenterData['id'] = $id;
			} else {
				//修正商品id  客户缓存会导致游客和平台(腾讯和新浪)商品id混乱 
				if (!$productid = oo::mobileGoods()->redressPid($api, $sid, $id)) {
					$productid = oo::mobileCommodity()->cidExist($api, $sid, $id);
				}
				if (!$productid) {
					oo::logs()->debug(array(-6, $param), $errLogFile);
					return $this->genRet($mid, array('result' => -6, 'error' => 'Item is not exists'));
				}

				$pcenterData['id'] = $id = $productid;
			}
		}
		
		$pcenterData['mid'] = $mid; //支付中心支持mid下单
		$pcenterData['sitemid'] = $aUser['sitemid'];
		$pcenterData['user_ip'] = functions::getip();
		if($api == 87){ //h5移动基地
			$pcenterData['sid'] = $sid;
			$pcenterData['cpServiceId'] = '626420067696'; //计费代码
			$pcenterData['channelId'] = '10558000'; //计费代码
			$consumeCodes = array( '56888' => '000067695010',  '56889' => '000067695011');//道具计费代码
			if(!array_key_exists($id, $consumeCodes)){
				$param[] = $id;
				oo::logs()->debug(array(-11, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -11));
			}
			$pcenterData['consumeCode'] = $consumeCodes[$id];
		}
		
		//安卓国内支付中心域名用paycn(俄语平台不属于FB,但是下单要走海外域名)
		self::$payCenterHost = (of::isFacebook(oo::$config['sid']) || in_array(oo::$config['sid'], array(197))) ? self::$payCenterHost : 'http://paycn.boyaa.com/';
		if(oo::$config['guoNeiNewPayCenterHost']){//国内下单加速域名
			self::$payCenterHost = oo::$config['guoNeiNewPayCenterHost'];
		}
		//93百度多酷 、96联想支付、107乐逗支付更改域名
		if (in_array($paytype, array(93, 96, 107))) {
			self::$payCenterHost = oo::$config['guoNeiNewPayCenterHost'] ? oo::$config['guoNeiNewPayCenterHost'] : "http://paycn.boyaa.com/";
		}

		if(SERVER_TYPE == "demo"){//测试环境下单地址
			self::$payCenterHost = of::isForeignSite(oo::$config['sid']) ? "http://pay_test.oa.com/" : "http://paycn_test.oa.com/";
			if(array_key_exists('pcenterData', $pcenterData)){//联通沃下单地址不一样，内网测试需要用这个地址，原谅我，阿门
				self::$payCenterHost = 'http://paycn.boyaa.com/';
			}		
		}
		
		if(oo::mobileConfig()->getSwc($api, 'alisigendV2')){//签约小额代扣V2
			$_pmode = oo::mobileGoods()->getProductPmode($api, $id);
			if($_pmode == 242){
				$pcenterData['externalAgreementNo'] = oo::mobMod('alisigned')->getExternalAgreementNo($api, $mid);//商户附加信息
				$pcenterData['notifyUrl'] = oo::mobMod('alisigned')->getNotiyUrl($api, $mid);//回调签约
			}
		}
		
		//请求支付中心接口 默认create_order.php
		if($isV3){//支付中心内外网URL还没确定 暂时用这个
			$url = 'http://bypaycn-debug.oa.com/Pay/unifiedOrder';
		}else{
			$url = strlen($requestTo) > 4 ? (self::$payCenterHost . $requestTo) : (self::$payCenterHost . 'create_order.php');
		}
		$url .= ('?'.http_build_query($pcenterData));

		if(!PRODUCTION_SERVER || of::isBoyaaIp($pcenterData['user_ip']) ){
			oo::logs()->debug("timestamp:{$param['time']}--url:{$url}",  'andrCreateOrder_url', 1);
		}
		$tryCnt = 0;
		$timeout = 10;
		if(in_array($api, array(22)) && array_key_exists(86, $mlist)){
			$timeout = 15;
			set_time_limit(15);
		} elseif ($api == 128) {
			$timeout = PRODUCTION_SERVER? 30 : 45;
			set_time_limit($timeout);
		}elseif($api == 52 && isset($pcenterData['voucher'])){//土耳其gscash支付
			$timeout = 20;
			set_time_limit(20);
		}
		if(oo::mobileConfig()->getSwc($api,'paymentLimitNew',$mid)){                                                 
			//支付防刷限制检测，chenlb
			$limitresult=oo::paymentLimitNew()->Limit($mid,$pcenterData['user_ip'],$pcenterData['id'],$api,$langtype);
			if(!$limitresult['result']){
				if(oo::$config['sid']==57){
					oo::paymentLimitNew()->SendDcCenter($mid,$param['version'],$limitresult['ptype'],$api);
					return $this->genRet($param['mid'], array('result' => -15,'data' =>array('RET'=>-15,'MSG'=>$limitresult['msg']))); 
				}else{
					return $this->genRet($param['mid'], array('result' => -20,'error' =>$limitresult['msg'])); 		
				}
			}
		}
		
		//重试3次
		$res_data = $this->createOrderGetFileContents($url, $timeout, PRODUCTION_SERVER ? 3 : 1);
		
		///////////////////////////////////////////////////////////////////////////
		// 业务机请求支付中心下单数
		$this->_proxyOrderStat(21101,$param,array('cnt'=>$res_data['try_cnt']+1));
		//业务机请求支付中心失败再次下单数
		if ($res_data['try_cnt'] > 0){
			$this->_proxyOrderStat(21102,$param,array('cnt'=>$res_data['try_cnt']));
		}

		$iErrCnt = 0;
		foreach( (array)$res_data['a_http_code'] as $k => $v){
			if ($v == 200){ //请求支付中心成功数
				$this->_proxyOrderStat(21103,$param);
			} else {
				$iErrCnt++;//请求支付中心失败各种网络状态统计
				$this->_proxyOrderStat(21105,$param,array('errcode'=>$v));
			}
		}

		//请求支付中心失败数
		if ($iErrCnt > 0){
			$this->_proxyOrderStat(21104,$param,array('cnt'=>$iErrCnt));
		}
		/////////////////////////////////////////////////////////////////////////////

		//记录网络错误
		if($res_data['http_code'] != 200){
			$osip = functions::osip();
			oo::logs()->debug(array('osip' => $osip, 'host' => self::$payCenterHost, 'http_code' => $res_data['http_code'], 'param' => $param), 'andrCreateOrderErr_netErr');
		}
		$resp = $res_data['file_contents'];


		if(empty($resp)){
			//////////////////////////////////////////////////
			if ($res_data['http_code'] == 200){
				//支付中心下单失败数
				$this->_proxyOrderStat(21107,$param);
				//支付中心下单失败各种原因统计
				$this->_proxyOrderStat(21108,$param,array('errcode'=>'-def0'));
			}
			//////////////////////////////////////////////////

			oo::logs()->debug('['. date('Y-m-d H:i:s') .'] '. $url, 'reserro_andrCreateOrder', 1, 'bak');
			$sEmsg = in_array($api, array(22, 36, 65)) ? lang::$payInfo['failed'] : 'Request failed';
			$param['http_code'] = $res_data['http_code'];
			$param['reqUrl'] = $url;
			oo::logs()->debug(array(-7,$url, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -7, 'error' => $sEmsg ));
		}
		$ret['result'] = 1;

		(!PRODUCTION_SERVER || of::isBoyaaIp() ) && oo::logs()->debug(date('Y-m-d H:i:s').$resp."||||URL:{$url}\n", 'createorderdebug.log');
		$ret['data'] = json_decode($resp, true);//纯数字 返回数字 不是NULL

		if(isset($ret['data']['PMODE']) && $ret['data']['PMODE'] == 754){//繁体台哥大支付 需要返回第三方id
			$goodsInfo = oo::mobileGoods()->getGoodsinfoByPid($api, _LANGTYPE_, $id,true);
			$ret['data']['thirdId'] = (string)$goodsInfo['thirdId'];
		}


		if(!is_array($ret['data'])){
			oo::logs()->debug(array(-8,$url, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -8, 'error' => 'Result is not a json string', 'payRet' => (!PRODUCTION_SERVER ? array($url, $resp) : '')));
		}
		////////////////////////////////////////////////////////////////////////////////
		if ($ret['data']['ORDER']){ //订单号存在 默认为下单成功
			$this->_proxyOrderStat(21106,$param,array('succcode'=>$ret['data']['RET']));
		} else { //代理下单失败
			//支付中心下单失败数
			$this->_proxyOrderStat(21107,$param);
			//支付中心下单失败各种原因统计
			$this->_proxyOrderStat(21108,$param,array('errcode'=>$ret['data']['RET']));
		}
		/////////////////////////////////////////////////////////////////////////////////

		//支付额度限制开关
		if( in_array($api, array(109,22))){
			if(isset(oo::$config['openPayLimit']) && oo::$config['openPayLimit']==1 && isset($imsino) && $stype !=0  && $ver >= '4.6.2'){
				//添加支付记录
				$json = $ret['data'];//json_decode($resp, true);
				oo::payment()->insertPayLog($mid, $json['ORDER'], $imsino, $stype, $api, $ptype);
			}
			if($json['RET'] == -3){
				$sEmsg = lang::$payInfo['payCenterLimit'] ? lang::$payInfo['payCenterLimit'] : 'Over the money to pay';
				$param['reqUrl'] = $url;
				oo::logs()->debug(array('-10-1',$url, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -10, 'error' => $sEmsg));
			}
		}
		if(in_array($api, array(22)) && array_key_exists(86, $mlist) && (!$ret['data']['token'] || !$ret['data']['servicenum'])){
			oo::logs()->debug(date('Y-m-d H:i:s').$resp."||||URL:{$url}\n", 'mbOrderError.log',1, 'bak');
		}
		if($api == 102){//淘宝支付版本，帮客户端刷新token
			$ret['token'] = $param['param']['refresh_token'] ? $this->refreshAliToken($param['param']['refresh_token']) : "";
		}
		//$ret['data'] = json_decode($resp, true);

		// android成功下单记录用户用户最近商品 用来记录未支付消息推送
		// 额外字段，判断是哪种推送过来的
		$msgpushType = isset($param['param']['statData']) &&
					   isset($param['param']['statData']['pushMsgType']) ?
					   (int) $param['param']['statData']['pushMsgType'] : 0;
		$order_str = $api == 128 ? $mid : $ret['data']['ORDER']; // 百度多酷无ORDER情况
		$tmpFlag = oo::mobileConfig()->getSwc($api, 'close3rdUnpayPush',$mid); //关闭第三方未完成支付推送开关
		$tmpSend = ($tmpFlag && ($ret['data']['PMODE'] != 12)) ? false : true; //pmode=12 GOOGLE CHECKOUT
		$tmpSend && oo::msgPush()->order($mid, $api, $msgpushType, $order_str, $id, $ptype);
		// android记录成功推荐商品
		if(oo::$config['paidRecomGoods']){
			$isPaidRecom = (int) $param['param']['statData']['paidRecomGoods'];
			oo::msgtips()->prgOrder($mid, $api, $ret['data']['ORDER'], $id, $ptype, $isPaidRecom);
		}

		//记录快捷支付
		if(isset(oo::$config['mQbank']) && oo::$config['mQbank'] == 1){
			$payScene = trim($param['param']['payScene']);
			//待优化
			if($payScene == "大厅破产弹窗的支付引导"){
				$payScene = 1;
			}else if($payScene == "玩牌买入不足的支付引导"){
				$payScene = 2;
			}
			in_array($payScene, array(1, 2)) && oo::stats()->qBankRupt($api, $mid, $ret['data']['ORDER'], $id, $payScene);
		}
		$statData = (array) $param['param']['statData'];
		//成功下单上报数据中心
		if (isset($param['param']['payScene'])) {
			$sparam = array('api' => $api, 'mid' => $mid, 'orderId' => $ret['data']['ORDER'], 'pid' => $id,'aUser' => $aUser,
				'pamount' => isset($param['param']['pamount']) ? $param['param']['pamount'] : 0,
				'payScene'=>$param['param']['payScene'],
				'payParty'=>$param['param']['payPayty']
			);
			$this->sendToDataCenter($sparam);
		}

		//成功支付详细数据统计统计(记录下单时用户数据--房间内/外 盲注...)
		if(oo::$config['mbPayDetailStat']){
			$statData = (array)$param['param']['statData'];
			oo::stats()->orderLog($mid, $ret['data']['ORDER'], $statData);
		}
		//sms快捷支付下单记录
		if(oo::$config['mQuickPay'] && in_array($api, array(22)) && array_key_exists(86, $mlist)){
			$mStatData = (array)$param['param']['statData'];
			($mStatData['entrance'] == "房间内商城" && !$mStatData['pushMsgType']) && oo::payment()->smsQuckPay($mid, $unid, $ret['data']['ORDER'], true);
		}

		//记录E2P下单
		if(oo::mobileConfig()->getSwc($api, 'orderLimit') && array_key_exists(99, $mlist)){
			oo::stats()->e2pLimit($api, $mid, $ret['data']['ORDER'], 'add');
		}
		//记录玩家上次下单成功的支付方式
		if(isset(oo::$config['mblogPtype']) && oo::$config['mblogPtype'] == 1 && of::isAndroid($api)){
			if(oo::mobileConfig()->getSwc($api,'payiprec')){ // 同时记录ip
				oo::mobilePlist()->setPayLog($mid,$api, $id,$ret['data']['ORDER'],functions::getip());
			} else {
				oo::mobilePlist()->setPayLog($mid,$api, $id,$ret['data']['ORDER']);
			}
		}
		//e2pay到额度推荐12call商品
		if(functions::version_compare($param['version'], '5.0.2') >= 0 && isset(oo::$config['e2payLimit']) && oo::$config['e2payLimit']==1 && $mlist && array_key_exists(23,$mlist) && isset($ret['data']['RET'] ) && $ret['data']['RET'] == '-3'){//如果E2pay=23被限制，推荐12call商品
			$good = oo::mobileGoods()->get12Call($mid,$api,$param['langtype']);
			if($good){
				$ret['data'] = array_merge($ret['data'],$good);
			}
		}

		// 刷我的卡需求，下单成功后记录订单信息
		if (oo::mobileConfig()->getSwc($api, 'pay2other') && (isset($pay2other))) {
			$pay2other['orderid'] = $ret['data']['ORDER'];
			oo::mobilePlist()->pay2otherOrder($pay2other);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		//阿语shinymob被刷 订单达到限制ret = -3 临时方案 待客户端支持删除此段代码
		//added by WadeYu
		if ( (oo::$config['sid'] == 124) && ($ret['data']['PMODE'] == 208) && ($ret['data']['RET'] == -3)){
			$ret['data']['RET'] = 0;
			$ret['data']['ORDER'] = '';
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		#如果为自动续费支付记录下单号，发货时会用到
		if($autoPayType && oo::mobileConfig()->getSwc($api,'newDiamond')){ // 目前只有新宝石用自动续费功能
			if($ret['result'] == 1 && !empty($ret['data']['ORDER'])){
				ocache::free()->set( okey::mkAutoPayGood(substr($ret['data']['ORDER'], -12, 12)),1,3600); //缓存一个小时
			}	
		}	
		#如果需要充值成功后通过喇叭回调客户端
		if(isset($param['param']['laba']) && $ret['result'] == 1 && !empty($ret['data']['ORDER'])){
			ocache::free()->set( okey::mkMbPaySendLaba(substr($ret['data']['ORDER'], -12, 12)),$param['param']['laba'],180); 
		}
		oo::$config['mbPayTempLog'] && oo::misc()->tempLog(17,array($id),array($ret['data']['ORDER']));
		
		//支付防刷限制，日志记录 chenlb
		if(oo::mobileConfig()->getSwc($api,'paymentLimitNew',$mid)){
			if($ret['result'] == 1 && !empty($ret['data']['ORDER'])){			
				oo::paymentLimitNew()->beforeLog($mid, $pcenterData['id'], $api, time(),$pcenterData['user_ip']);
			}
		}
		#支付防欺诈记录最近下单时间，限制下单间隔
		if($isQizha && $ret['result'] == 1 && !empty($ret['data']['ORDER'])){
			oo::mobilePlist()->setPayDetail($mid,'order');
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 给支付中心下单 (ios/安卓短信代理下单)(短代)
	 *
	 * @param array $param 请求参数
	 * @return array 返回结果
	 */
	public function createOrder($param) {
		$errLogFile = of::isAndroid($param['api']) ? 'createOrderErr_andr' : 'createOrderErr_ios';
		$checkLevel = PRODUCTION_SERVER? 3 : 0;//内外网参数验证级别分开，不然内网下不了单
		if (!$this->auth($param, $checkLevel)) {
			oo::logs()->debug(array(-1,$param), $errLogFile);
			return $this->genRet($param['mid'], array('result' => -1, 'error' => 'Signature is invalid'));
		}
		if (!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -9;
			return $this->genRet($param['mid'], $ret); //参数错误
		}
		$api = (int) $param['api'];
		$ver = $param['version'];
		$mid = (int) $param['mid'];
		$ids = $param['param']['id'];
		$lang = (int) $param['langtype'];
		$ptype = isset($param['param']['ptype']) ? (int) $param['param']['ptype'] : 0; //短信支付运营商类型  31 移动...
		$oldGoods = (int) $param['param']['oldGoods']; //1是老商城商品，0是新商城商品
		$pcenterData = $param['param']['pcenterData']; //传给支付中心的数据
		$id = is_array($ids) ? $ids[0] : (int) $ids; //默认取第一个0 1
		$mlist = (array) $param['param']['mlist']; //短信支付商品id列表  array($type=>$id)
		if (BY::concurrent($mid, '', true)) {//防止并发请求
			$ret['result'] = -12;
			oo::logs()->debug(array($ret['result'],$param), $errLogFile);
			return $this->genRet($param['mid'], $ret); //参数错误
		}
		oo::setLang($lang);
		$ip = functions::getip();
		$smsptype=0;
		$stype=0;//短信支付类型 21移动基地...
		
		// 挂靠主站的站点，商品信息独立	
		if (isset(oo::$config['detachStatV2'][$api]) && array_key_exists($param['unid'], oo::$config['detachStatV2'][$api])) {
			$api = $param['api'] = oo::$config['detachStatV2'][$api][$param['unid']];
		}		

		if (!$mlist && is_array($ids)) {
			$oldPayConf = array(31 => array(0 => 21, 1 => 29), 32 => array(0 => 18, 1 => 34), 33 => array(0 => 54, 1 => 55)); //由于老版本客户端写死排序，强制将id转为mlist[支付类型][支付中心id]
			if (array_key_exists($ptype, $oldPayConf)) {
				$mlist[$oldPayConf[$ptype][0]] = isset($ids[0]) ? $ids[0] : 0;
				$mlist[$oldPayConf[$ptype][1]] = isset($ids[1]) ? $ids[1] : 0;
			}
		}

		//cms设置mlist排序 即短信支付方式优先级
		if (!empty($mlist)) {
			$time = time();
			if($time >1395158100 && $time < 1395162600){
				if(key_exists(21, $mlist)){
					unset($mlist[21]);
				}
			}
			if($aMpaySwitch = oo::mobileConfig()->getDeploy($api, 'mpayswitch')){	//这里使用新的移动支付开关
				$paySortCnfs = $aMpaySwitch['sort'];
			}else{
				$paySortCnfs = oo::mobileConfig()->paySort();
			}
			if (array_key_exists($ptype, $paySortCnfs)) {
				$paySortCnf = $paySortCnfs[$ptype];
				asort($paySortCnf);
				$tempArr = array();
				foreach ($paySortCnf as $key => $value) {
					key_exists($key, $mlist) && $tempArr[$key] = $mlist[$key];
				}
				foreach ($mlist as $key => $value) { //mlist数组长度大于paySortCnf的情况
					!key_exists($key, $tempArr) && $tempArr[$key] = $mlist[$key];
				}
				$mlist = $tempArr;
			}
		}
		if (!PRODUCTION_SERVER) {//测试服务器记录所有的日志var_export($data, true)
			oo::logs()->debug('<br>[' . date('Y-m-d H:i:s') . '] ' . json_encode($param) . "<br>", "mobilepay.txt");
		}
		//判断字段是否有空
		if(!$ids && !$mlist){
			return $this->genRet($mid, array('result' => -2, 'error' => 'Missing some fields'));
		}

		//验证安全协议
		if(functions::isUseXTunnelVerify($api, $ver)) {
			$xTunnelVerify = functions::getXTunnelVerify($api);
			if(!$xTunnelVerify){
				return $this->genRet($mid, array('result' => -3, 'error' => 'Verify field is invalid'));
			}
		}

		//验证用户
		$aUser = oo::minfo()->getMinfo($mid, array('sid', 'mstatus', 'sitemid', 'mpay','mmoney', 'mbank'));
		$sid = (int)$aUser['sid'];
		if(!$aUser || (int)$aUser['mstatus']==1){
			oo::logs()->debug(array(-4, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -4, 'error' => 'User is not exists/User is disabled'));
		}
		$showConf = oo::misc()->isShowFirstPay($api,$mid);
		if(in_array(oo::$config['sid'], array(117, 93)) && (!$firstGoodPay = $this->firstGoodPay($api, $mlist, $sid, $id)) && (($showConf['errorNo'] == 1) && ($showConf['entranceArr'][0] == 0) && ($showConf['entranceArr'][1] == 0))){
			if($aUser['mpay']){//首付大礼包防刷
				$purchased = property_exists(lang,'purchased') ? lang::$purchased : "you have purchased";
				oo::logs()->debug(array(-11, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -11, 'error' => $purchased));
			}
		}

		//首付礼包下单限制
		if(oo::$config['mFirstPayStat'] == 1){
			if(oo::misc()->getFirstPayLog($mid) && oo::misc()->isFirstPay($api, $mlist, $sid, $id)){
				oo::logs()->debug(array(-13, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -13, 'error' => "you have purchased"));
			}
		}
		
		//渠道支付额度限制
		if( oo::mobileConfig()->getSwc($api, 'mbchnpaylimt') && oo::mobilepayment()->payLimitByChannel($api, $mid, 0, true)){
			oo::logs()->debug(array(-14, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -14, 'error' => 'channel pay limit'));
		}
		$sEmsg = '';
		//支付额度限制开关
		 if(isset(oo::$config['openPayLimit']) && oo::$config['openPayLimit']==1  && $mlist && array_key_exists( $ptype, oo::$config['payCreditList'])){
			$imsino		= isset($param['param']['imsino']) ? $param['param']['imsino'] : 0;
			$pamount		= isset($param['param']['pamount']) ? $param['param']['pamount'] : 0;
			//检测支付记录
			$id=oo::payment()->checkPayByImsi($mlist,$mid,$imsino,$pamount,$ptype,$api);
			if(!$id){
				$sEmsg = in_array($api, array(22, 36, 65)) ? lang::$payInfo['limit'] : 'Over the money to pay';
				if($aMpaySwitch = oo::mobileConfig()->getDeploy($api, 'mpayswitch')){
					$mbPayLang = (array)$aMpaySwitch['lang'];
				}else{
					$mbPayLang = (array)oo::andrthirdpay_blacklist()->mbPayLang();
				}
				$sEmsg = (is_array($mbPayLang) && $mbPayLang[$ptype]) ? (string)$mbPayLang[$ptype]  : $sEmsg;
				oo::logs()->debug(array(-10, $param), $errLogFile);
				return $this->genRet($mid, array('result' => -10, 'error' => $sEmsg));//客户端toast展示
			}
			if($ids){
				$smsptype=array_search($id, (array)$ids)+1;
			}
			$stype = array_search($id, (array)$mlist);
		}
		if(!PRODUCTION_SERVER){//测试服务器记录所有的日志var_export($data, true)
			$aIp = oo::IpLocation()->getlocation(functions::getip() );
			oo::logs()->debug('<br>['. date('Y-m-d H:i:s') .'] '. "stype:{$stype}|smsptype:{$smsptype}===mlist".json_encode($mlist)."=ids==".json_encode($ids)."=aIp==".json_encode($aIp)."<br>", "mobilepay.txt");
		}

		if(!$productid = oo::mobileGoods()->redressPid($api, $sid, $id)){
			$productid = oo::mobileCommodity()->cidExist($api, $sid, $id);
		}
		if(!$productid){
			oo::logs()->debug(array(-6, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -6, 'error' => 'Item is not exists'));
		}
		
		//联运大厅引导
		if(oo::mobileConfig()->getSwc($api, 'hallFirstPayPop')){
			$qpay21Products = oo::mobileQpay()->getAllQpay21($api);
			if(in_array($productid, $qpay21Products)){
				$checkExists = oo::mobileQpay()->checkQpay21PidExists($mid, $api, $productid);
				if($checkExists !== true){//确认商品是否是所配商品
					oo::logs()->debug(array($checkExists, $param), $errLogFile);
					return $this->genRet($mid, array('result' => $checkExists, 'error' => 'pid not exist'));
				}
					
				if(oo::mobileQpay()->checkQpay21UserLmt($mid, $api) !== true){//用户条件不满足
					oo::logs()->debug(array(-8089, $param), $errLogFile);
					return $this->genRet($mid, array('result' => -8089, 'error' => 'pid not exist'));
				}
			}
		}
		
		//发送请求
		if (in_array(oo::$config['sid'], array(93, 117)) || of::isAndroid($api) || in_array($api, array(8))){//国内强制使用加速站点
			if(oo::$config['guoNeiNewPayCenterHost']){//国内代理下单加速域名
				self::$payCenterHost = oo::$config['guoNeiNewPayCenterHost'];
			}else{
				self::$payCenterHost= 'http://paycn.boyaa.com/';
			}
		}
		
		
		//传给支付中心必要的参数
		$pcenterData['id'] = $productid;
		$pcenterData['mid'] = $mid;
		$pcenterData['sitemid'] = $aUser['sitemid'];
		$pcenterData['user_ip'] = $ip;

		if(SERVER_TYPE == "demo"){//测试环境下单地址
			self::$payCenterHost = (of::isForeignSite(oo::$config['sid'])) ? "http://pay_test.oa.com/" : "http://paycn_test.oa.com/";
		}

		if( $api == 198 && $ptype == 32) {//豌豆荚联运的联通支付 加传下单参数
			//$imei = oo::deviceloginlog()->cacheGet($mid);
			//$imei or $imei = oo::member()->logUserDevice($mid);
			$aDev = oo::mobileinfo()->get($mid);
			$pcenterData['appname'] 	= $param['param']['appname'];
			$pcenterData['feename']		= $param['param']['feename'];
			$pcenterData['appid']		= $param['param']['appid'];
			$pcenterData['userip']		= $ip;
			$pcenterData['serviceid']	= $param['param']['serviceid'];
			$pcenterData['channelid'] 	= $param['param']['channelid'];
			$pcenterData['appversion'] 	= $param['version'];
			$pcenterData['imei'] 		= $aDev['imei'];//
			$pcenterData['mac'] 		= str_replace(':','',$aDev['mac_addr']);//MAC地址去掉冒号
		}

		
        if($isV3){//支付中心V3测试URL还没确定 暂时用这个
        	$url = 'http://bypaycn-debug.oa.com/Pay/unifiedOrder/?'.http_build_query($pcenterData);
        }else{
        	$url = self::$payCenterHost.('create_order.php?'.http_build_query($pcenterData));
        }

		if(!PRODUCTION_SERVER || of::isBoyaaIp($ip)){
			oo::logs()->debug("timestamp:{$param['time']}--url:{$url}", 'createOrder_url', 1);
		}
		if(oo::mobileConfig()->getSwc($api,'paymentLimitNew',$mid)){
			////支付防刷限制检测，chenlb
			$limitresult=oo::paymentLimitNew()->Limit($mid,$pcenterData['user_ip'],$pcenterData['id'],$api,$lang);
			if(!$limitresult['result']){
				return $this->genRet($param['mid'], array('result' => -20,'error' =>$limitresult['msg'])); 
			}
		}
		//3次重试机会
		$res_data = $this->createOrderGetFileContents($url, 10, PRODUCTION_SERVER ? 3 : 1);

		//记录网络错误
		if($res_data['http_code'] != 200){
			$osip = functions::osip();
			oo::logs()->debug(array('osip' => $osip, 'host' => self::$payCenterHost, 'http_code' => $res_data['http_code'], 'param' => $param), 'createOrderErr_netErr');
		}
		//p($res_data);
		$resp = $res_data['file_contents'];
		if(empty($resp)){
			oo::logs()->debug(array(-7, $url, $param), $errLogFile);
			$sEmsg = in_array($api, array(22, 36, 65)) ? lang::$payInfo['failed'] : 'Request failed';
			return $this->genRet($mid, array('result' => -7, 'error' => $sEmsg));
		}

		//判断请求是否成功
		$json = json_decode($resp, true);
		if(!PRODUCTION_SERVER){//测试服务器记录所有的日志var_export($data, true)
			$pid = isset($json['ORDER']) ? $json['ORDER'] : "";
			oo::logs()->debug('<br>['. date('Y-m-d H:i:s') .'] '. "requestUrl:{$url}|||Pid={$pid}<br>", "mobilepay.txt");
		}

		if(!$json){
			oo::logs()->debug(array(-8, $url, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -8, 'error' => 'Result is not a json string'));
		}

		//判断结果是否正确
		if($json['RET']!=0 || empty($json['ORDER'])){
			oo::logs()->debug(array(-9, $url, $param), $errLogFile);
			return $this->genRet($mid, array('result' => -9, 'error' => 'PayCenter:'.$json['MSG']));
		}
		//移动基地短信支付收入异高 返回根据cms配置优先级的支付方式给客户端...支付中心返回 -3为收入异高
		if ($json['RET'] == -3) {
			oo::logs()->debug(date('Y-m-d H:i:s') . ",{$mid},{$api},{$aUser['sitemid']},{$productid}", 'toohigh');
			if (isset($mlist[21])) {
				unset($mlist[21]);
			}
			if (empty($mlist)) { //没有可用短信支付
				if($aMpaySwitch = oo::mobileConfig()->getDeploy($api, 'mpayswitch')){
					$mbPayLang = (array)$aMpaySwitch['lang'];
				}else{
					$mbPayLang = (array)oo::andrthirdpay_blacklist()->mbPayLang();
				}
				$sEmsg = (is_array($mbPayLang) && $mbPayLang[$ptype]) ? (string) $mbPayLang[$ptype] : $sEmsg;
				return $this->genRet($mid, array('result' => -10, 'error' => $sEmsg)); //客户端toast展示
			}
			foreach ($mlist as $SMStype => $pid) {
				$stype = $SMStype;
				if (isset(oo::$config['newShopingMall']) && oo::mobileGoods()->fit($api, $ver) && $oldGoods != 1) {
					$productid = oo::mobileGoods()->redressPid($api, $sid, $productid);
				} else {
					$productid = oo::mobileCommodity()->cidExist($api, $sid, $productid);
				}
				$productid = $productid ? $productid : $productid;
			}
		}
		// android成功下单记录用户用户最近商品 用来记录未支付消息推送
		// 额外字段，判断是哪种推送过来的
		$msgpushType = isset($param['param']['statData']) &&
					   isset($param['param']['statData']['pushMsgType']) ?
					   (int) $param['param']['statData']['pushMsgType'] : 0;
		oo::msgPush()->order($mid, $api, $msgpushType, $json['ORDER'], $productid, $ptype);

		// IOS 成功下单记录用户用户最近商品 用来记录未支付消息推送
		$msgpushType = isset($param['param']['msgpushType']) ? (int) $param['param']['msgpushType'] : 0;
		oo::msgPush()->order($mid, $api, $msgpushType, $json['ORDER'], $productid, $ptype);
		// IOS记录成功推荐商品
		if(oo::$config['paidRecomGoods']){
			$isPaidRecom = (int) $param['param']['paidRecomGoods'];
			oo::msgtips()->prgOrder($mid, $api, $json['ORDER'], $productid, $ptype, $isPaidRecom);
		}
		//成功下单上报数据中心
		if (isset($param['param']['payScene'])) {
			$sparam = array('api' => $api, 'mid' => $mid, 'orderId' => $json['ORDER'], 'pid' => $productid,'aUser' => $aUser,
				'pamount' => isset($param['param']['pamount']) ? $param['param']['pamount'] : 0,
				'payScene'=>$param['param']['payScene'],
				'payParty'=>$param['param']['payPayty']
			);
			$this->sendToDataCenter($sparam);
		}

		//成功支付统计(记录下单时用户数据--房间内/外 盲注...)
		if(oo::$config['mbPayDetailStat']){
				  $statData = (array) $param['param']['statData'];
			oo::stats()->orderLog($mid, $json['ORDER'], $statData);
		}
		//支付额度限制开关
		if(isset(oo::$config['openPayLimit']) && oo::$config['openPayLimit']==1 && isset($imsino) && $stype !=0  && $ver >= '4.6.2'){
			//添加支付记录
			oo::payment()->insertPayLog($mid,$json['ORDER'], $imsino,$stype,$api,$ptype);
		}
		if(oo::mobileConfig()->getSwc($api, 'threeCardsQuick') && of::isIphone($api)){
			$payScene = trim($param['param']['payScene']);
			//待优化
			if($payScene == "三张牌商品引导"){
				$payScene = 3;
			}
			!PRODUCTION_SERVER && oo::logs()->debug(array(date("Y-m-d H:i:s"), $param['param']['payScene'], $api, $mid, $json['ORDER'], $id),'threeQuick.txt');
			in_array($payScene, array(3)) && oo::stats()->qBankRupt($api, $mid, $json['ORDER'], $id, $payScene);
		}
		
		$notify_url = "";
		if(isset($json['notify_url'])){
			$notify_url = $json['notify_url'];
		}
		//记录玩家上次下单成功的支付方式
		if(isset(oo::$config['mblogPtype']) && oo::$config['mblogPtype'] == 1 && of::isAndroid($api)){
			oo::mobilePlist()->setPayLog($mid,$api, $productid,$json['ORDER']);
		}
		//oo::logs()->debug($stype, 'sorttest');
		//支付防刷限制，日志记录 chenlb
		if(oo::mobileConfig()->getSwc($api,'paymentLimitNew',$mid)){
			if($json['ORDER']){			
				oo::paymentLimitNew()->beforeLog($mid, $pcenterData['id'], $api, time(),$pcenterData['user_ip']);
			}
		}
		//返回结果给客户端
		$retData = array('result' => 1, 'error' => '', 'pid' => $json['ORDER'],'smsptype'=> $smsptype,'stype'=> $stype,'notify_url'=> $notify_url);
		
		$retData['data'] = $json;//存储支付中心返回 与andrcreateorder保持一致
		return $this->genRet($mid, $retData);
	}

	/**
	 * 通知支付中心发货
	 *
	 * @param array $param 请求参数
	 * @return array 返回结果
	 */
	public function payOrder($param){
		if (!$this->auth($param, 3)){
			return $this->genRet($param['mid'], array('result' => -1, 'error' => 'Signature is invalid'));
		}
		$api		= (int)$param['api'];
		$mid		= (int)$param['mid'];
		$ip    		= functions::getip();
		$unid 		= (int)$param['unid'];

		if(SERVER_TYPE == "demo"){//测试环境下单地址
			if( !in_array($mid , array(34712,9326))){
				self::$payCenterHost = (of::isForeignSite(oo::$config['sid']) || of::isIphone($api)) ? "http://pay_test.oa.com/" : "http://paycn_test.oa.com/";
			}
		}

		$url = self::$payCenterHost . 'pay_order.php';

		oo::logs()->debug(date("Y-m-d") . ":" . json_encode($param), 'ios_payorder.log',  1, "bak");//保证每个扣钱的订单都有据可查
		//判断字段是否有空
		if(empty($param['param']['pdealno']) || empty($param['param']['pid']) || empty($param['param']['receipt'])){
			return $this->genRet($mid, array('result' => -2, 'error' => 'Missing some fields'));
		}

		//验证安全协议
		$xTunnelVerify = functions::getXTunnelVerify($api);
		if(!$xTunnelVerify){
			return $this->genRet($mid, array('result' => -3, 'error' => 'Verify field is invalid'));
		}

		//验证用户
		$aUser = oo::minfo()->getMinfo($mid, array('mstatus', 'sitemid'));
		if(!$aUser || (int)$aUser['mstatus']==1){
			return $this->genRet($mid, array('result' => -4, 'error' => 'User is not exists/User is disabled'));
		}

		//winphone英语代理发货 支付方式微软支付 请求前特殊操作
		if (isset($param['param']['x_ptype']) && $param['param']['x_ptype'] = 104 && in_array($api, array(137))) {
			$url = self::$payCenterHost . "pay_order_winphone.php?sitemid={$aUser['sitemid']}&t={$param['param']['time']}&s={$param['param']['sign']}";
			$phpInput = file_get_contents('php://input');
			$matchDo = preg_match('/.+\"output\":\"([^\"]+)/i', $phpInput, $matchData);
			$output = ($matchDo > 0 && $matchData[1]) ? (string)$matchData[1] : ''; //需要通过POST请求的原数据
			$res_dataX = $this->payOrder4PhpInput($output, $url);
			$resp = $res_dataX['file_contents'];
			if (empty($resp)) { //请求失败
				return $this->genRet($mid, array('result' => -5, 'error' => 'Request faild'));
			}
			$json = json_decode($resp, true);
			if (!$json || !is_array($json)) { //判断请求是否成功
				oo::logs()->debug('[' . date('Y-m-d H:i:s') . '] ' . json_encode($param['param']) . ' = ' . $resp, __FUNCTION__);
				return $this->genRet($mid, array('result' => -6, 'error' => 'Result is not a json string'));
			}
			if (!isset($json['status'])) { //判断结果是否正确
				oo::logs()->debug('[' . date('Y-m-d H:i:s') . '] ' . json_encode($param['param']) . ' = ' . $resp, __FUNCTION__);
//				return $this->genRet($mid, array('result' => -7, 'error' => 'PayCenter:'.$json['msg']));
			}
			!PRODUCTION_SERVER && oo::logs()->debug(array(date("Y-m-d H:i:s"), $url, $param['param'], $output, $res_dataX), 'payOrderWeiruan.txt');
			return $this->genRet($mid, $json); //返回结果给客户端
		}

		$iPmode = isset($param['param']['pmode']) ? $param['param']['pmode'] : 0;

		//发送请求
		if(!isset($param['param']['time'])){
			$param['param']['time'] = $_SERVER['REQUEST_TIME'];
		}
		ksort($param['param']);
		$param['param']['sign'] = functions::payCenterIphoneSign($param['param']['pid'], $param['param']['pdealno'], $param['param']['time']);

		$aTmpParam = $param['param'];

		switch($iPmode){
			case 318: //WePlay支付方式 签名方法：md5(pid+pdealno+status+key) 小写
				$sTmpKey = 'lxd5OPQNrIY3RJdAjnCfQhWA3QTUiIFi';
				$param['param']['sign'] = md5($aTmpParam['pid'].$aTmpParam['pdealno'].$aTmpParam['status'].$sTmpKey);
				$param['param']['sign'] = strtolower($param['param']['sign']);
			break;
			case 316: //vSharePay支付方式 签名方法：md5(pid+pdealno+status+key) 小写
				$sTmpKey = 'C5LphInKVyrGRCuS2yoa8KtWd1wRbVYY';
				$param['param']['sign'] = md5($aTmpParam['pid'].$aTmpParam['pdealno'].$aTmpParam['status'].$sTmpKey);
				$param['param']['sign'] = strtolower($param['param']['sign']);
			break;
		}

		if( (oo::$config['sid'] == 999) && (oo::$config['unid'] == 999) ){ //146不准代理发货，以防发到正式了
			return $this->genRet($mid, array('result' => -8));
		}

		$res_data = $this->payOrderPOSTPhone( $param['param'], $url, false, false );
		$resp = $res_data['file_contents'];
		$json = json_decode($resp, true);

		$in_api  = in_array( $api, array(19,24,14,20,25,28,61,89,68) );//泰语繁简体
		$res_fai = empty($resp) || !$json || $json['ErrorCode']!= 1 || empty($json['pdealno']);

		if(empty($resp)){
			return $this->genRet($mid, array('result' => -5, 'error' => 'Request faild'));
		}
		switch ($iPmode){
			case 318://WEPLAY支付方式 返回格式是字符串 支付中心改动怕出现问题 暂时这样搞下				
				return $this->genRet($mid,array('result'=>($json['ErrorCode'] == '1') ? 1 : -7,'msg'=>$json['ErrorDesc'],'pid'=>$json['pid'],'pdealno'=>$json['pdealno']));
			case 316: //vSharePay支付方式 响应内容：　1）成功：success  2) 失败：fail
				return $this->genRet($mid,array('result'=>$resp=='success'?1:-7));
		}
		//判断请求是否成功
		if(!$json){
			oo::logs()->debug('['. date('Y-m-d H:i:s') .'] '. json_encode($param['param']) .' = '. $resp, __FUNCTION__);
			return $this->genRet($mid, array('result' => -6, 'error' => 'Result is not a json string'));
		}
		
		if(in_array( $api, array(20,25,28,61,89) ) &&  ($json['ErrorCode'] == 6)){//简体交易号重复处理
			$pid = oo::msgtips()->formatOrderID($json['pid']);
			$aOs = oo::payment()->findPayments(array('pdealno' => $pid), false);
			if(is_array($aOs[0]) && ($aOs[0]['pstatus'] == 2)){
				oo::logs()->debug('['. date('Y-m-d H:i:s') .'] '. json_encode($param['param']) .' = '. $resp, 'iphone_err_6.txt');
				return $this->genRet($mid, array('result' => 1, 'error' => '', 'pdealno' => $json['pdealno'], 'pid' => $json['pid']));
			}
		}

		$tryCnt = 3;
		while ($tryCnt > 0 && $json['ErrorCode'] != 1){
			$tryCnt -= 1;
			$res_data = $this->payOrderPOSTPhone( $param['param'], $url, false, false );
			$resp = $res_data['file_contents'];
			$json = json_decode($resp, true);
		}

		//判断结果是否正确
		if($json['ErrorCode']!=1 || empty($json['pdealno'])){
			oo::logs()->debug('['. date('Y-m-d H:i:s') .'] '. json_encode($param['param']) .' = '. $resp, __FUNCTION__);
			return $this->genRet($mid, array('result' => -7, 'error' => 'PayCenter:'.$json['ErrorDesc']));
		}

		// IOS 更新领奖标志
		oo::msgPush()->updateMsgpushReward($mid, $json['pid']);
		// IOS支付成功推荐商品
		if (oo::$config['paidRecomGoods']) {
			oo::msgtips()->prgOrderSuccess($unid, $mid, $json['pid']);
		}

		//返回结果给客户端
		return $this->genRet($mid, array('result' => 1, 'error' => '', 'pdealno' => $json['pdealno'], 'pid' => $json['pid']));
	}

	/**
	 * 根据订单号取订单状态 status -2查询非自己订单 -1订单不存在 0提交了订单 1取消了订单 2完成了订单
	 *
	 * @param Mixed $param
	 */
	public function getOrderStatus($param) {
		if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}

		$mid = (int) $param['mid'];
		$pdealno = $param['param']['pdealno'];

		$dealno = 'by'.ltrim(substr($pdealno, -12),'0');

		$order = oo::payment()->getOnebyPdealno($dealno);

		$status = isset($order['pstatus']) ? $order['pstatus'] : -1;

		if(isset($order['fmid']) && $order['fmid'] != $mid){
			$status = -2;
		}

		return $this->genRet($mid, array('result' => 1, 'status' => $status));
	}

	/* 移动基地支付限制
	 *
	 */

	public function JiDiPayLimit($param) {
		if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}
		$pamount = (int)$param['param']['money'];
		$mid = (int) $param['mid'];
		$limitArr = array(1 => array(PRODUCTION_SERVER ? 10 : 2, 30), 2 => array(5, 20), 5 => array(2, 15), 6 => array(1, 18), 10 => array(1, 18), 15 => array(1, 7), 20 => array(1, 7), 25 => array(1, 4), 30 => array(1, 1),);
		if (!key_exists(intval($pamount), $limitArr)) {
			return $this->genRet($mid, array('result' => 1));
		}
		$cache = ocache::cache();
		$dailyKey = okey::jidiDayPayLimit($mid, $pamount);
		$minuteKey = okey::jidiMinutePayLimit($mid, $pamount);
		$dailyNum = $cache->get($dailyKey);
		$minuteNum = $cache->get($minuteKey);
		if ($minuteNum > $limitArr[$pamount][0]) {
			return $this->genRet($mid, array('result' => 0));
		}
		if ($dailyNum > $limitArr[$pamount][1]) {
			return $this->genRet($mid, array('result' => 0));
		}
		return $this->genRet($mid, array('result' => 1));
	}

	/**
	 * 创建订单 支付中心请求
	 *
	 */
	public function createOrderGetFileContents( $url, $timeout = 1, $try = 1) {
		$timeout = functions::uint( $timeout );
		$try = min($try, 5);//最多5次
		$result = array( 'file_contents'=>'', 'http_code'=>'', 'cost_time'=>'','try_cnt'=>0,'a_http_code'=>array() );
		if(function_exists('curl_init')){
				$ch = curl_init();
				curl_setopt( $ch, CURLOPT_URL, $url );   //设置访问的url地址
				curl_setopt( $ch, CURLOPT_TIMEOUT, $timeout );	 //设置超时
				curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );  //返回结果
				$i = 1;

				$j = 0;

				do{
					$j++;

					$file_contents = curl_exec( $ch );
					$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);//http状态码
					$cost_time = curl_getinfo($ch, CURLINFO_TOTAL_TIME);//通信耗时
					$result['file_contents'] = $file_contents;
					$result['http_code'] 	 = $http_code;
					$result['cost_time']     = $cost_time;

					$result['a_http_code'][] = $http_code;

					if($http_code != 200){
						$ch_no = curl_errno($ch);
						$ch_or = curl_error($ch);
					}else{
						break;
					}
				}while($i++ < $try);

				$result['try_cnt'] = $j - 1;

				curl_close( $ch );
		}else{
			$ctx = stream_context_create( array(
					'http' => array(
						'timeout' => $timeout, //设置一个超时时间，单位为秒
					)
				)
			);
			$file_contents = @file_get_contents( $url, 0, $ctx );
			$result['file_contents'] = $file_contents;
		}
		return $result;
	}

	/**
	 * 通知支付中心下单请求
	 */
	public static function payOrder4PhpInput($str, $server_addr, $addUserAgent = false)
	{
		$str = (string)$str;
		$result = array('file_contents' => '', 'http_code' => '', 'cost_time' => '');
		$useragent = 'BOYAA.COM API PHP5 Client 1.0 (curl) ' . phpversion(); //Agent头信息
		if (function_exists('curl_init')) {
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $server_addr);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $str);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			if ($addUserAgent) curl_setopt($ch, CURLOPT_USERAGENT, $useragent);
			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
			curl_setopt($ch, CURLOPT_TIMEOUT, 15);
			$file_contents = curl_exec($ch);
			$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); //http状态码
			$cost_time = curl_getinfo($ch, CURLINFO_TOTAL_TIME); //通信耗时
			curl_errno($ch) && ($file_contents = ''); //错误的请求如域名不存在网络错误等...
			curl_close($ch);

			$result['file_contents'] = $file_contents;
			$result['http_code'] = $http_code;
			$result['cost_time'] = $cost_time;

		} else {
			$file_contents = @file_get_contents($server_addr . "?" . $str);
			$result['file_contents'] = $file_contents;
		}
		return $result;
	}

	/**
	 * 通知支付中心下单请求
	 */
	public static function payOrderPOSTPhone( $param, $server_addr, $sort=true, $addUserAgent=true ){
		$str = $sort ? self::joins( $param, null, false, false ) : http_build_query($param);
		$result = array( 'file_contents'=>'', 'http_code'=>'', 'cost_time'=>'' );
		$useragent = 'BOYAA.COM API PHP5 Client 1.0 (curl) ' . phpversion(); //Agent头信息
		if( function_exists( 'curl_init' ) ){
			$ch = curl_init();
			curl_setopt( $ch, CURLOPT_URL, $server_addr );
			curl_setopt( $ch, CURLOPT_POSTFIELDS, $str );
			curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
			if($addUserAgent) curl_setopt( $ch, CURLOPT_USERAGENT, $useragent );
			curl_setopt( $ch, CURLOPT_CONNECTTIMEOUT, 10 );
			curl_setopt( $ch, CURLOPT_TIMEOUT, 15 );
			$file_contents = curl_exec( $ch );
			$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);//http状态码
			$cost_time = curl_getinfo($ch, CURLINFO_TOTAL_TIME);//通信耗时
			curl_errno( $ch ) && ($file_contents = ''); //错误的请求如域名不存在网络错误等...
			curl_close( $ch );

			$result['file_contents'] = $file_contents;
			$result['http_code'] 	 = $http_code;
			$result['cost_time']     = $cost_time;

		}else{
			$file_contents = @file_get_contents( $server_addr . "?" . $str );
			$result['file_contents'] = $file_contents;
		}
		return $result;
	}

	/**
	 * 为api=102支付宝版本刷新token值
	 */
	public static function refreshAliToken( $refresh_token){
		return oo::pmb('Alipay')->refreshTkn($refresh_token);
	}

	/**
	 * 短信支付优先发货接口
	 * @param array $param
	 */

	public function flashPayOrder( $param ){
		if (!$this->auth($param, 3)){
			return $this->genRet($param['mid'], array('result' => -1, 'error' => 'Signature is invalid'));
		}
		if( oo::$config['openFlashPay'] != 1 ){ //开关没打开，不允许优先发货
			return $this->genRet($param['mid'], array());
		}
		if(empty($param['param']['pid'])) return $this->genRet($param['mid'], array('result' => -2, 'error' => 'param err'));
		$result = oo::payment()->flashPayOrder(array('pid'=>strval($param['param']['pid'])));
		return $this->genRet($param['mid'], array('result'=>intval($result['ret']), 'pid'=>strval($result['pid']), 'status'=>intval($result['status'])));
	}
	//第三方支付推送类型
	public function pushPay($param) {
		if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}
		$api = (int) $param['api'];
		$mid = functions::uint($param['mid']);
		$arrCmsConfig = oo::mobileConfig()->getCommonConfig($api);
		$aOnline = oo::membertable()->onlineinfo($mid);
		$aOnline && $tInfo = oo::tables()->getTableById( $aOnline['tid'], true,array('tblindmin') );
		(oo::$config['blowup'] > 1) && $arrCmsConfig['tblindminChip'] = $arrCmsConfig['tblindminChip'] * oo::$config['blowup'];
		$ret['payEvent'] = 1;//小场
		if(isset($tInfo['tblindmin']) && isset($arrCmsConfig['tblindminChip']) && $tInfo['tblindmin'] >= $arrCmsConfig['tblindminChip']){//大场
			$ret['payEvent'] = 2;//大场
		}
		$ret['payList'] = array(99);//fortumo
		$aIp = oo::IpLocation()->getlocation(functions::getip() );

		$islog = in_array($api, array(22)) && strcmp(_VERSION_, '5.3.0') >= 0;
		$islog && oo::logs()->debug($aIp, 'sms_pushPay');
		in_array($aIp['country'], array('马来西亚')) && array_push($ret['payList'], 161);//马来西亚添加e2p支付方式
		if(in_array($api, array(22)) && (!PRODUCTION_SERVER || in_array($aIp['country'], array('台湾省'))) && strcmp(_VERSION_, '5.3.2') >= 0){
			$config['smsPay'] = array(
				'sigkey'=> 'L2I0M1T4upPaybOYaa',
				'url'=> 'https://pay.boyaa.com/api/apiPayLimit.php',
			);
			$time = time();
			$dcData = array(
				'uid' => $mid,
				'lts_at' => $time,
				'et_id'=> 18075,//dc中心的id
				'show'=> 1,
			);
			$data['id'] = functions::uint($param['param']['id']);
			$ptype = functions::uint($param['param']['ptype']);
			$aInfo = oo::minfo()->getMinfo($mid, array('sitemid'));
			$data['sitemid'] = $aInfo['sitemid'];
			$data['sign'] = md5($data['id']. $data['sitemid']. $time. $config['smsPay']['sigkey']);
			$data['time'] = $time;
			$config['smsPay']['url'] .= '?'.http_build_query($data);
			if($islog){
				oo::logs()->debug('['. date('Y-m-d H:i:s') .'] '. $config['smsPay']['url'], 'sms_pushPay');
			}
			$res = @file_get_contents($config['smsPay']['url']);
			$res = json_decode($res, true);
			$islog && oo::logs()->debug($res, 'sms_pushPay');
			if($res['errno'] ==  1000){//没有达到上限SMS支付
				$ret['payList'] = array($ptype);
				$dcData['et_id'] = 18074;
			}
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, $dcData);
		}
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 首付商品防刷
	 * @param type $api
	 * @param type $mlist
	 * @param type $id
	 * @param type $sid
	 * @return boolean 首付包存在:false  不存在:true
	 */
	private function firstGoodPay($api, $mlist, $sid = 79, $id = 0){
		$api = (int)$api;
		$mlist = (array)$mlist;
		$sid = (int)$sid;
		$id = (int)$id;
		$goods = (array)oo::mobileGoods()->getRepositories($api);
		$firstPayGoods = array();
		$ptypeArr = array();
		$version = _VERSION_;
		$fitStatus = (in_array($api, array(98)) && ((functions::version_compare($version, '4.9.59') >= 0))) ;
		if($fitStatus){
			$firstGoodsId = 250;//精简版的6元首付包
		}elseif(in_array(oo::$config['sid'], array(93,117))){
			$firstGoodsId = 246;//简体的首付包
		}else{
			$firstGoodsId = 210;//精简版的2元首付包
		}
		foreach($goods as $k=>$v){
			if($v['pcard'] == $firstGoodsId){//首付大礼包
				$firstPayGoods = $v;
				break;
			}
		}
		if(!empty($firstPayGoods)){
			$ptypes = (array)$firstPayGoods['ptype'];

			foreach( $ptypes as $type => $info ){
				if(oo::$config['limitBinding']){
					$pid = intval(array_key_exists($sid, oo::$config['sidToPayindex']) ? $info[oo::$config['sidToPayindex'][$sid]] : $info[1]);
					if(!$pid) break;
					$ptypeArr[] = $pid;
				}
			}
		}
		if($id){
			if(in_array($id, $ptypeArr)){
				return false;
			}
		}
		foreach($mlist as $k=>$v){
			$proId = $v;
			if(in_array($proId, $ptypeArr)){
				return false;
			}
		}
		return true;
	}

	public function getRoomPtype($param){
		if (!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}
		$api = (int)$param['api'];
		$suportWxPay = (int)(int)$param['param']['suportWxPay']; //客户端是否支持微信支付
		if(!$suportWxPay){
			$ret['ptype'] = 5;
			return $this->genRet($param['mid'], $ret);
		}
		$wxpayCnf = oo::mobileGoods()->getWxPayCnf($api);
		$rand = mt_rand(1, 100);
		$ret['ptype'] = ($rand <= $wxpayCnf['rate']) ? 100 : 5;
		return $this->genRet($param['mid'], $ret);
	}
	/**
	 *    下单支付上报数据
	 * @param type $param
	 * @return boolean
	 */

	public function sendToDataCenter($param){
		$mid = $param['mid'];
		$orderId = (int)substr($param['orderId'], -12);
		$aUser = $param['aUser'];
		$pamount = $param['pamount'];
		$pid = $param['pid'];
		$api = $param['api'];
		$ip = functions::getip();//(string)$param['ip'];
		$payScene = (string)$param['payScene'];
		$payParty = $param['payParty'];//付费场景和付费场次 两个参数
		//$partPayParty =explode('-',$payParty);

		if(!$mid ||  !$aUser  || !$api){
					return false;
		}
		$ptconfig = oo::bankrupt()->getMptbankruptconf(); //判断是否破产
		$aUser['mmoney'] += (int) $aUser['mbank'];
			  $bpt_status = ($aUser['mmoney'] > $ptconfig['brmoney']) ? 0 : 1;
		$platform = isset(oo::$config['dclogin_platform'] ) ? oo::$config['dclogin_platform'] : array(79=>1,233=>4,237=>5,238=>6);//1游客  2默认平台[VK,Facebook,新浪] 3,4通行证[3是绑定过的，4未绑定] 5twitter账号 6Yahoo

		$goods = oo::mobileGoods()->getGoodsByPid($pid, $api, !PRODUCTION_SERVER);
		$item_category = $goods['pcard']==0 ? 4 : ($goods['pcard']==9999 ? 5 : (in_array($goods['pcard'],array_keys(oo::$config['cardlist'])) ? 1 : 0));//0 未定义 1 虚拟道具 4 游戏币 5 博雅币 pcard: 0: 游戏币， 9999 博雅币， 其它则为道具
		$payTypeName = isset(oo::$config['mobile_pay_types'][$goods['ptype']]) ? oo::$config['mobile_pay_types'][$goods['ptype']] : '';
		$items_id = isset($goods['id']) && $goods['id'] ? $goods['id'] :  0;
		$tmp_sta_data = array(
			"uid" => $aUser['mid'],
			"platform_uid" => $aUser['sitemid'],
			"entrance_id"=>($aUser['sid'] == 233 ? ((oo::$config['limitBinding'] && oo::mobileBinding()->isGuestBinding($aUser['mid'])) ? 3 : 4) : (isset($platform[$aUser['sid']]) ? $platform[$aUser['sid']] : 2 )),
			"order_at" =>time(),
			"order_id" =>$orderId,
			"gameparty_pname" =>isset($payParty[0]) ? $payParty[0] : '',
			"gameparty_subname" =>isset($payParty[1]) ? $payParty[1] : '',
			"gameparty_anto" =>isset($payParty[2]) ? (int)$payParty[2] : 0,
			"bankrupt" =>$bpt_status,
			"pay_scene" =>$payScene,
			"pm_name" =>$payTypeName,
			"balance" =>$aUser['mmoney'],
			"grade" =>$aUser['mlevel'],
//			"currency_type" =>0,
			"currency_num" =>$pamount,
			"item_category" =>$item_category,
			"item_id" =>$items_id,
			"item_num" =>1,//每次下单都是1
			"ip" => $ip
		);
		oo::dc()->sendData(oo::$config['api'][$api][1], 'user_generate_order',$tmp_sta_data );
		return true;
	}

	/*
	 * 代理请求至支付中心(无逻辑处理)
	 */
	public function proxy2PayCenter($param){
		if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}
		$requestTo = $param['param']['Interface'];
		$data = (array)$param['param']['data'];
		
        if (of::isForeignSite(oo::$config['sid'])) {
            $host = PRODUCTION_SERVER ? self::$payCenterHost : 'http://pay_test.oa.com/';
        } else {
            $host = PRODUCTION_SERVER ?
                    ( oo::$config['guoNeiNewPayCenterHost'] ? oo::$config['guoNeiNewPayCenterHost'] : 'http://paycn.boyaa.com/') :
                    'http://paycn_test.oa.com/';
        }
        $url = $host . $requestTo;
		$url .= ('?'.http_build_query($data));
		!PRODUCTION_SERVER && oo::logs()->debug(date('ymd-h:i:s')." $url", __FUNCTION__);
		$res_data = $this->createOrderGetFileContents($url, 10, 1);
		if($res_data['http_code'] != 200){
			return $this->genRet($param['mid'], array('result' => -2));
		}
		$resp = $res_data['file_contents'];
		if(empty($resp)){
			return $this->genRet($param['mid'], array('result' => -3));
		}
		$ret['result'] = 1;
		$ret['data'] = json_decode($resp, true);
		return $this->genRet($param['mid'], $ret);
	}
	
	/**
	 * 支付宝小额代扣签约
	 * @param array $param
	 * @return array
	 */
	public function TVAliSigned($param){
		if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}
		
		$data = oo::mobMod('alisigned')->signUrl(functions::uint($param['api']), functions::uint($param['mid']));
		return $this->genRet($param['mid'], $data);
	}
	
	/**
	 * 支付中心V3 sign
		获取发货的appkey作为signkey
		对所有参数按照a-z大小排序
		sha1(key1=value1key2=value2key3=value3…..keyn=valuensignkey)
	 */
	public function payCenterOrderKeyV3($param = array()){
		if(!$param) return false;
		ksort($param);
		$signkey = 'hhfb47nknfoi49ilgkn3o2jamfwjg';//发货Key 待优化
		
		$paramStr = '';
		foreach ($param as $key=>$value){
			$paramStr .= $key . '=' . $value;
		}
		$paramStr .= $signkey;
		return sha1($paramStr);
	}
	
	/**
	 * 查询站点的appid
	 * @param int $unid
	 * @param int $pc_sid
	 * @return mixed int||bool
	 */
	public function getPCAppid($unid,$pc_sid){
		if(!$unid || !$pc_sid) return false;
		$_pc_appid = 0;
		if(!isset(oo::$config['pcapps'][$pc_sid])){
			oo::logs()->debug(array(date('Y-m-d H:i:s'),'empty',$unid,$pc_sid),'getPCAppid.txt');
			return false;
		}
		$sidData = oo::$config['pcapps'][$pc_sid];
		
		foreach ($sidData as $pc_appid => $siteInfo){
			if($siteInfo['sid'] == $unid) return $pc_appid;
		}
		
		oo::logs()->debug(array(date('Y-m-d H:i:s'),'not find',$unid,$pc_sid),'getPCAppid.txt');
		return false;
	}
}
