<?php

class Server {


	/**
	 * 制作一个好友列表
	 */
	protected function mkFriendList($array, $mid, $sid, $type=1, $unid=0, $withTableType=false){
		$key = 0;
		$getList = ocache::$acache['getList'];
		$aTid = array();
		$obSvids = !empty(oo::$config['act824_obArr']) ? (array)explode(',', oo::$config['act824_obArr']) : array();//锦标赛旁观灰度svid

		foreach ((array)$array as $value){
			$aList[$key][0] = (int)$value['mid'];  //用户ID
			$aList[$key][1] = (string)$value['mnick'];//用户昵称
			$aList[$key][2] = (string)$value['unname']; //区域名字(站点名),开心的存在mhowntown里面
			$aList[$key][3] = (string)$value['micon']; //头像
			$aList[$key][4] = (int)$value['sid']; //站点id
			$aList[$key][5] = (int)$value['mmoney'];  //资产
			$aList[$key][6] = mb_substr($value['sname'], 0, 40, 'UTF-8'); //站点名字
			$aList[$key][7] = (string)$value['mlocation']; //当前住址
			$aList[$key][8] = (string)$value['mhometown']; //所在城市
			$aList[$key][9] = (int)$value['mlevel']; //等级
			$aList[$key][10] = ''; //(string)$value['mname']; //用户真实姓名.注意FB的email存在此字段
			$aList[$key][11] = (int)$value['mgender']; //用户性别,0男1女2保密
			$aList[$key][12] = $sid == $value['sid'] ? (string)$value['mpage'] : ''; //个人主页
			$aList[$key][13] = (int)$value['mprivilege']; //权限或者是否星级用户
			$aList[$key][14] = (int)ocache::$acache['getFriends'][$mid][$value['mid']][0]; //是否牌友.0好友1牌友
			$aList[$key][15] = $value['mvip'] > 0 ? ((is_array($value['mother']) && isset($value['mother']['showVip']) && ($value['mother']['showVip'] > 0)) ? 0 : (int)$value['mvip']) : 0;  //vip等级
			$aList[$key][16] = array(); //道具
			$aList[$key][17] = (string)$value['sitemid']; //站内ID
			$aList[$key][18] = (int)$value['sngsub']; //积分
			$aList[$key][19] = is_array( $getList[$value['mid']] ) ? (int)$getList[$value['mid']][0] : -1; //桌子ID
			$aList[$key][20] = (int)$getList[$value['mid']][1]; //游戏状态 1旁观2在玩
			$aList[$key][21] = ($type == 0) && of::isFacebook( $value['sid']) && ($value['mid'] != $mid) ? 1 : 0; //是否可赠送金币0不可赠送1可赠送(yahoojp不赠送金币)
			$aList[$key][22] = 0; //是否可赠送礼物0不可赠送1可赠送
			$aList[$key][23] = 0; //目前没用到
			$aList[$key][24] = (int)$value['experience']; //用户经验值
			$aList[$key][25] = (string)$value['mbig']; //大头像
			$aList[$key][26] = (int)$value['newExpLevel']; //新经验值
			$aList[$key][27] = (string)date('Y-m-d',$value['mactivetime']); //最后登录时间
			$ttypeKey = 28;
			if( $sid == 117){
				$aList[$key][28] = in_array($value['mbloodtype'], array(200, 220) ) ? 1 : $value['mhasicon']; //微游戏sina V认证用户  微博达人
				$aList[$key][29] = in_array($value['mbloodtype'], array(200, 220) ) ? '新浪微博达人' : $value['mhometown']; //微游戏sina V用户认证信息
				$aList[$key][30] = $value['mbloodtype']; //微游戏sina v用户类型 //加V对应关系:  0- 名人；1-政府；2-企业；3-媒 体；4-校园；5-网站；6-应用 ; 7-团体（机构）;  //达人的对应关系: 200 - 待审核达人 ;  220 - 通过审核的达人
				$ttypeKey = 31;
			}
			if(oo::$config['mobilefriend'] && defined('_API_') && of::isIphone(_API_)){
				$aList[$key][31] = $value['unid'];
			}

			//需要返回ttype字段时设置默认值 -1
			if($withTableType){
				$aList[$key][$ttypeKey] = -1; //桌子类型(位于最后一个)
			}

			//屏蔽移动端不支持的桌子类型以及设置ttype字段值
			if($aList[$key][19] > 0) { //屏蔽移动端不支持的桌子类型
				$aTid[$key] = $aList[$key][19];
			}

			$key++;
		}

		//批量屏蔽移动端不支持的桌子类型
		if( !empty($aTid) ){
			$aTTypes = oo::tables()->getTTypes(); //桌子ID->类型映射
			$aTidTtype = oo::tables()->getTablesByIds($aTid, true, array('tpostion','Allprechip','tattr','privateRoom','tname','tname_'.$langfix,'svid'));//加上桌子名称
			$whiteList = array(0,1,2,3,4,6,7);

			if(oo::$config['act824_mttOB']){//锦标赛旁观总开关开启 锦标赛全面开放
				$whiteList[] = 11;
			}

			foreach ($aList as $k => &$v){
				if(!isset($aTid[$k])) continue;
				$tid = $aTid[$k];
				if(!isset($aTTypes[$tid])) continue;
				if( !in_array($aTTypes[$tid], $whiteList) ){
					if(!in_array($aTidTtype[$tid]['svid'], $obSvids)){
						$v[19] = 0;
					}

				}elseif( $withTableType ){
					$v[$ttypeKey] = (int)$aTTypes[$tid];
				}
			}
		}

		return (array)$aList;
	}

	/**
	 * 根据桌子ID生成桌子信息
	 * @param int $tid
	 * @param int $langtype
	 * @param bool $inCache 是否尝试从缓存取
	 * @return array [桌子ID,当前玩家数,旁观者数,小盲注,空位数,桌子名,最大玩家数,最少买入,最多买入,桌子类型,服务器ID,桌子密码,是否vip房,站点ID,台费比例]
	 */
	protected function mkTableInfo( $tid, $langtype, $inCache=false) {
		$lang = oo::$config['language'][(int)$langtype];
		if( $aTable = oo::tables()->getTableById( $tid, $inCache, array('tplayernow', 'tviewers', 'tblindmin', 'tplayermax', 'tname',
		"tname_{$lang}", 'tbuymin', 'tbuymax', 'svid', 'tpassword', 'tvip', 'sid', 'Venuecosts'))) {
			$aInfo[0] = (int)$aTable['tid'];
			$aInfo[1] = ($tplayernow = (int)$aTable['tplayernow']);
			$aInfo[2] = (int)$aTable['tviewers'];
			$aInfo[3] = (int)$aTable['tblindmin'];
			$aInfo[4] = ($tplayermax = (int)$aTable['tplayermax']) - $tplayernow;
			$aInfo[5] = ($tname = $aTable["tname_$lang"]) ? (string)$tname : (string)$aTable['tname'];
			$aInfo[6] = $tplayermax;
			$aInfo[7] = (int)$aTable['tbuymin'];
			$aInfo[8] = (int)$aTable['tbuymax'];
			$aInfo[9] = (int)$aTable['ttype'];
			$aInfo[10] = (int)$aTable['svid'];
			$aInfo[11] = (string)$aTable['tpassword'];
			$aInfo[12] = (int)$aTable['tvip'];
			$aInfo[13] = (int)$aTable['sid'];
			$aInfo[14] = (int)$aTable['Venuecosts'];
		}
		return (array)$aInfo;
	}

	/**
	 * 根据桌子ID批量生成桌子信息
	 * @param array $tid 桌子id列表
	 * @param int $langtype
	 * @return array [桌子ID,当前玩家数,旁观者数,小盲注,空位数,桌子名,最大玩家数,最少买入,最多买入,桌子类型,服务器ID,桌子密码,是否vip房,站点ID,台费比例,附加属性,是否私人房]
	 */
	protected function mkTablesInfo($tids, $langtype) {
		$aResult = array();
		$lang = oo::$config['language'][(int) $langtype];
		$aTables = oo::tables()->getTablesByIds($tids, true, array('tplayernow', 'tviewers', 'tblindmin', 'tplayermax', 'tname',
		"tname_{$lang}", 'tbuymin', 'tbuymax', 'svid', 'tpassword', 'tvip', 'sid', 'Venuecosts', 'tattr', 'privateRoom'));
		foreach ($tids as $tid) {
			$aTable = (array)$aTables[$tid];
			$aInfo = array();
			$aInfo[0] = (int) $aTable['tid'];
			$aInfo[1] = ($tplayernow = (int) $aTable['tplayernow']);
			$aInfo[2] = (int) $aTable['tviewers'];
			$aInfo[3] = (int) $aTable['tblindmin'];
			$aInfo[4] = ($tplayermax = (int) $aTable['tplayermax']) - $tplayernow;
			$aInfo[5] = ($tname = $aTable["tname_$lang"]) ? (string) $tname : (string) $aTable['tname'];
			$aInfo[6] = $tplayermax;
			$aInfo[7] = (int) $aTable['tbuymin'];
			$aInfo[8] = (int) $aTable['tbuymax'];
			$aInfo[9] = (int) $aTable['ttype'];
			$aInfo[10] = (int) $aTable['svid'];
			$aInfo[11] = (string) $aTable['tpassword'];
			$aInfo[12] = (int) $aTable['tvip'];
			$aInfo[13] = (int) $aTable['sid'];
			$aInfo[14] = (int) $aTable['Venuecosts'];
			$aInfo['tattr'] = (string)$aTable['tattr'];
			$aInfo['privr'] = (int)$aTable['privateRoom'];
			$aResult[] = $aInfo;
		}
		return (array) $aResult;
	}

	/**
	 * 制作返回给flash的参数
	 * @param int $mid 用户id
	 * @param array $ret 结果字段值
	 * @param array $update 客户端版本更新信息
	 * @return array
	 */
	protected function genRet($mid, $ret, $update=null){
		if( isset($_SERVER['HTTP_GATEAUTHZ']) && $_SERVER['HTTP_GATEAUTHZ'] ){ //GATE鉴权返回
			$mid = ( isset($ret['aUser']) && isset($ret['aUser']['mid']) && $ret['aUser']['mid'] ) || ( isset($ret['authz']) && $ret['authz'] ) ? $mid : 0 ;
			header('mid: '. $mid);
		}
		$xml = oo::$config['xml'] ? oo::$config['xml'] : '001';
		$rets['sys'] = array($xml, 0);  //服务监听.(XML的版本号,服务器是否在维护1维护0正常)

		$rets['time'] = time(); //服务器时间

		//---------------------------
		//添加客户端版本更新信息到结果数组
		if($update){
			$rets['update'] = $update;
		}
		$rets['ret'] = $ret ? (array)$ret : array();
		$rets['api'] = 'v5';
		$rets['flag'] = 1;  //标志从服务端返回

		//功能待优化，可以测试，但开关不要上正式 此注释添加于2015年2月11日
		if((oo::mobileConfig()->getSwc(_API_, 'destroyHost', _MID_)) && ($aDestroyHost = oo::mobileConfig()->getDeploy(_API_, 'destroy')) && in_array($_SERVER['HTTP_HOST'], (array)$aDestroyHost['destroy_url']) ){	//弃用域名 适用服务器正常状态下 动态域名更新 默认功能关闭
			$rets['flag'] = -301;
		}
		
		if(defined('_MTK_STA')){
			$rets['timeout'] = 1;
			oo::lc()->sendEvent(of::getLogcenterSid(), _MID_, 'mttimeout', array('status'._MTK_ST => 1));
		} 
		
		return $rets;
	}

	/**
	 * 验证传过来的数据
	 * @param unknown_type $param 客户端传过来的原始数据
	 * @param unknown_type $auth 验证等级.0,验证sig,time.1在线.2在大厅.3sig验证5vmid和vkey验证
	 * @return unknown 是否验证成功
	 */
	protected function auth( $param, $auth){
        //return true;

		$api = (int)$param['api'];
		$sid = (int)$param['sid'];
		$unid =  oo::$config['api'][$api][1];
		$sig = $param['sig'];
		$flag = true;
		!PRODUCTION_SERVER && (in_array($param['mid'], array(15637))) && oo::logs()->debug(date('Y-m-d H:i:s').' -mid: '. $param['mid'] .'-  param '.json_encode($param) . " _LINE_ ". __LINE__, 'sigmtt.txt');
		/*印尼语言包分离，兼容老版本start*/
		//useOldLangtype 版本号控制1.0.0-5.5.3
		if(oo::$config['sid'] == 67 && oo::mobileConfig()->getSwc(_API_, "useOldLangtype")){//印尼语分离之前，印尼平台传递langtype=2，但CMS配置的id，en这两个langfixs都是印尼语
			$param['langtype'] = 2;//老版本使用CMS配置的是id,【验证的时候改回最初传递的2】
		}
		/*印尼语言包分离，兼容老版本end*/

		//国内TV引擎的接口要全面关掉
		if(oo::$config['sid'] == 117 && $param['api'] == 203){
			return false;
		}

		//同一api不同登录方式数据统计分离 解决验证
		if (array_key_exists($api, oo::$config['detachStat']) && array_key_exists($sid, oo::$config['detachStat'][$api])) {
			$param['unid'] = oo::$config['detachStat'][$api][$sid][1];
		}

		if(in_array($api, array(60, 61))){//新浪多平台登录版 特殊处理，解决验证问题
			$param['api'] = 25;
			$param['unid'] = 140;
		}
		
		($api == 72) && ($param['api'] = 67) &&  ($param['unid'] = 200);
		($api == 75) && ($param['api'] = 53) &&  ($param['unid'] = 177);
		$isCombinePlat = ( oo::$config['masterForMix'] && in_array($api, of::getApis()) ) ||in_array($api,array(2,5,6,7,12,13,16,26,43,45,49,50,100,101,113,137,138,154,155,180,189,218,224,231,233,234,42,46,139));
		if($isCombinePlat){ //葡语平台合服英语平台
			$param['sid']		= $param['rsid'] ? $param['rsid'] : $param['sid'];
		}
		if (!isset(oo::$config['api'][$api]) || !in_array(oo::$config['api'][$api][1], oo::$config['needstatsid']) || !in_array($unid, oo::$config['needstatsid'])) {
			$flag = false;
		}

		if(in_array(oo::$config['sid'], array(67, 110))  && isset(oo::$config['needlangtype']) && !in_array($_REQUEST['langtype'], (array)oo::$config['needlangtype'])){//id,vn的langtype传错
			$flag = false;
		}
		of::setLogcenterSid($param['sid'], oo::$config['api'][$api][1]);//设置log中心sid [往上移保证上报id能被初始化]
		if ($flag) {
			$sig = $param['sig'];
			if(!$unset = (array)$param['_unset']) $unset = array('_unset', 'rsid');//防止依赖文件被先发布
			$unset[] = 'sig';
			foreach($unset as $k){
				unset($param[$k]);
			}
			if (isset($param['param']['isHtmlReq']) && ($param['param']['isHtmlReq'] == 1)){
				list($classH5, $methodH5) = explode('.', $param['method']);
				if (!in_array($classH5, array('Act', 'Girls', 'Html'))) {
					return false;
				}
				$aOnline = oo::membertable()->onlineinfo($param['mid']);
				$mtkey = $aOnline['mtkey'];
				$genSig = $this->h5joins($param);
				$genSig = $genSig . '&' . $mtkey;
				$flag = $mtkey && (strcmp($sig, md5($genSig)) === 0) ? true : false;
				return $flag;
			} else {
				$genSig = $this->joins($param, (string) $param['mtkey'], $api);
                echo $genSig;
				$flag = (strcmp($sig, md5($genSig)) === 0 ? true : false);
				$flag or $iError = 1;
                exit();
			}
		}
		if($flag && in_array($auth, array(1, 2, 3, 5, 6))){ //在线有效性验证及验证是否在桌子里面
			$flag = oo::membertable()->fresh($param['mid'], $param['mtkey'], $auth==2?1:0);
			if($flag && in_array($api, array(22))){ //繁体安卓:禁止在WEB端登录后再调用移动的接口
				$aUser = oo::minfo()->getMinfo($param['mid'], array('unid'));
				$flag = ( (int)$aUser['unid'] == oo::$config['api'][$api][1] );
			}
			$flag or $iError = 2;
		}
		if($flag && in_array($auth, array(3, 4, 5))){ //sig验证,防重复刷新
			$flag = oo::logs()->limit($param['mid'], 0, $sig);
			$flag or $iError = 3;
		}
		if($flag && in_array($auth, array(5, 6))){
			$flag = $flag;
		}
		if(in_array($api, array(21, 35)) && (PRODUCTION_SERVER && stripos($_SERVER['HTTP_REFERER'],'html5.boyaa.com') === false)){//html5加上地址来源判断  防刷
			$flag = false;
		}
		if(!$flag && in_array(oo::$config['sid'], array(117,93)) && $iError){
			oo::logs()->debug(array($param['mid'],$iError,date('Y/m/d H:i:s'),debug_backtrace()),'v5_auth_error');
		}
		if( !$flag &&  in_array($api,array(22,69))  && $auth == 3 && $iError ){//错误日志
			$aLog = array(date('Y-m-d H:i:s'), $iError, $param['mid'],$param['method'],$param['version'],$sig);
			$iError == 1 && $aLog[] = $genSig;
			if( $iError == 2){
				$result = ocache::gi()->get( $param['mid'], false, true );
				$aOnline = functions::unserialize( $result[0] );
				$aLog[] = $param['mtkey'];
				$aLog[] = $aOnline['mtkey'];
				$aLog[] = $aOnline['mttime'];
			}
			oo::logs()->debug(implode('##', $aLog),'mbAuthError.txt');
		}
		define('VERIFIED', true);
		return $flag;
	}

	private function joins( $arg, $mtkey, $api){
		static $joins_counter = 0;
		if (++$joins_counter > 500){
			die('possible deep recursion attack!');
		}
		if (oo::$comm['api'][$api]['sigc']){
			$str = oo::$comm['api'][$api]['sigc'];
		} else {
			$str = substr(oo::$config['sigString'], $api, 1);
		}
		if ( ! is_object( $arg)) {
			if(is_null( $arg) || is_bool( $arg)){
				$str .= '';
			}elseif( is_string( $arg) || is_numeric( $arg)){
				$str .= 'T' . $mtkey . preg_replace('/[^0-9a-z]/i', '', $arg, -1);
			}else{
				ksort( $arg, SORT_STRING);
				foreach( $arg as $key => $value){
					$str .= ($key . '=' . $this->joins( $value, $mtkey, $api));
				}
			}
		}
		return $str;
	}

	/**
	 *
	 * @staticvar int $joins_counter
	 * @param type $arg
	 * @param type $mtkey
	 * @return type
	 */
	private function h5joins($arg) {
		static $joins_counter = 0;
		if (++$joins_counter > 500) {
			die('possible deep recursion attack!');
		}
		$str = '';
		if (!is_object($arg)) {
			if (is_null($arg) || is_bool($arg)) {
				$str .= '';
			} elseif (is_string($arg) || is_numeric($arg)) {
				$str .=   preg_replace('/[^0-9a-z]/i', '', $arg, -1);
			} else {
				ksort($arg, SORT_STRING);
				foreach ($arg as $key => $value) {
					$str .= ($key . '=' . $this->h5joins($value));
				}
			}
		}
		return $str;
	}
}
