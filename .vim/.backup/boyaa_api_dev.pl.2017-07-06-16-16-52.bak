#!/usr/bin/perl -w
use utf8;
use Mojo::UserAgent;
use JSON::XS;
use Data::Dumper;
use File::Slurp;
use Encode qw/encode_utf8 decode_utf8/;
use Getopt::Long;
use Digest::MD5 qw(md5 md5_hex md5_base64);
use Data::Types qw(:all);
use Scalar::Util qw(reftype);
use Tie::IxHash;
use JSON;
my $json = JSON->new;


sub makeRandomString{
    my $strlen = shift;
    my @ds = ();
    push(@ds, ('a'..'z'));
    push(@ds, ('0'..'9'));
    my $rs = "";
    for (my $i = 1; $i <= $strlen; $i++) {
        $rs .= $ds[int(rand($#ds + 1))];
    }
    return $rs;
}


sub makePostData{
    my %data = @_;
    my $ua  = Mojo::UserAgent->new;
    my $url = 'http://vm.boyaa.com/texas/api/api.php';
    my $res = $ua->post(
          $url => form => { api => encode_json(\%data)}
    )->result;
    if($res->is_success){
        #print Dumper($res->body);
        #print(decode_utf8($res->body));
        print $json->pretty->encode($json->decode($res->body));
    } 
    if($res->is_error){
        print($res->message);
    }
}


my ($datatype, $file, $apitype);

GetOptions ("datatype=s" => \$datatype,
            "file=s"   => \$file,
            "apitype=s" => \$apitype,
            "view=s" => \$apitype,
)or die("error in command line arguments\n");

if(!$datatype || ($datatype ne "file" && $datatype ne "json")){
    die("please input param: --datatype=file|json ")
}

if(!$apitype || ($apitype ne "pc" && $apitype ne "mb")){
    die("please input param: --apitype=pc|mb ")
}

if($datatype eq "file"){
    if(!$file){
        die("please input param: --file=?, example: file=./demo.txt ")
    }
    if(-e $file){
        my $fileContent = read_file('demo.txt') ;
        $fileContent =~ s/[\s?]+//g;
        %fileData = %{decode_json($fileContent)};
        $fileData{'vkey'} = makeRandomString(32);
        $fileData{'mtkey'} = makeRandomString(32);
        $t = Tie::IxHash->new(%fileData);
        $t->SortByKey;
        $t->Delete("_unset", "mbsid", "rsid", "sig");
        my @keys =  $t->Keys;
        my $_mtkey = "";
        my $res = "L";
        my %data = ();
        foreach (@keys){
            $data->{$_} = $fileData{$_};
            $_mtkey = $fileData{"mtkey"};
            if(reftype(\$fileData{$_}) eq "SCALAR"){
                my $str = "";
                if(is_string($fileData{$_}) || is_int($fileData{$_})){
                    $fileData{$_} =~ tr/a-zA-Z0-9//dc;
                    $str .= "LT".$_mtkey.$fileData{$_};
                    $res .= $_."=".$str;
                }
            }elsif(reftype(\$fileData{$_}) eq "REF"){
                my $str = "";
                my $tt = Tie::IxHash->new(%{$fileData{$_}});
                $tt->SortByKey;
                foreach my $j ($tt->Keys){
                    my $vv = ${$fileData{$_}}{$j};
                    if(is_string($vv) || is_int($vv)){
                        $vv =~ tr/a-zA-Z0-9//dc;
                        $str .= "".$j."="."LT".$_mtkey.$vv;
                    }
                }
                $res .= "".$_."=L".$str."";
            }
        }
        $data->{'sig'} = md5_hex($res);
        makePostData(%$data);
    }else{
        die("error: file $file not found!")
    }
}

