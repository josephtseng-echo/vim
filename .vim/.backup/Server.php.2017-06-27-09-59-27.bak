<?php

class Server{

	/**
	 * 制作一个好友列表
	 */
	protected function mkFriendList( $array, $mid, $sid, $type = 1, $unid = 0 ){
		$key = 0;
		$getList = ocache::$acache['getList'];
		$aTids = $aPri = $priRoom = array();
		if(oo::$config['privateRoom'] && $getList){//私人房追踪信息
			foreach($getList as $v){
				$v[0] && $aTids[] = $v[0];
			}
			if($aTids){
				$aTids = array_unique($aTids);
				$aUserList = ocache::gt()->getMulti( $aTids );
				foreach((array)$aUserList as $tid => $v){
					$aInfo = functions::unserialize($v);
					if( isset($aInfo['ownermid']) && $aInfo['ownermid'] > 0 ){
						$aPri[] = '20_'.$tid;
						$priRoom[$tid][0] = '';//房间名称
						$priRoom[$tid][1] = (string)$aInfo['password'];//房间密码
						$priRoom[$tid][2] = (string)$aInfo['password'] == '' ? 0 : 1;//是否有密码
						$priRoom[$tid][3] = (int)$aInfo['tvip'];//房间等级
						$priRoom[$tid][4] = (int)$aInfo['ownermid'];//房主mid
					}
				}
				if($aPri){
					$aPriInfo = ocache::redistable()->mget( $aPri );
					foreach($aPri as $k => $v){
						$aTid = explode('_', $v);
						$priRoom[$aTid[1]][0] = $aPriInfo[$k];
					}
				}
			}
		}

		$objTables = oo::tables();
		foreach( (array) $array as $value ){
			if((oo::$config['sid'] == 13) && in_array($value['mid'], array(12736235))) continue; //特殊用户禁止进行排行榜
			$aList[$key][0] = (int) $value['mid'];  //用户ID
			$aList[$key][1] = (string) $value['mnick'];//用户昵称
			$aList[$key][2] = (string) $value['unname']; //区域名字(站点名),开心的存在mhowntown里面
			$aList[$key][3] = of::isPhone( $value['unid']) ? (string)$value['micon'] : (string) of::getIcon( $value['mid'], $value['sid'], 0, $value['sitemid'], $value['mstatus'], 0, $value['micon'], false, $value['mgender'] ); //头像
            if (!of::isPhone( $value['unid']) && oo::$config['act861'] && isset($value['isDefaultPic']) && !empty($value['isDefaultPic'])) {
                $aList[$key][3] = '';
            }
			$aList[$key][4] = (int) $value['sid']; //站点id
			$aList[$key][5] = (int) $value['mmoney'];  //资产
			$aList[$key][6] = mb_substr( $value['sname'], 0, 40, 'UTF-8' ); //站点名字
			$aList[$key][7] = (string) $value['mlocation']; //当前住址
			$aList[$key][8] = (string) $value['mhometown']; //所在城市
			$aList[$key][9] = (int) $value['mexplevel']; //等级
			$aList[$key][10] = ''; //(string)$value['mname']; //用户真实姓名.注意FB的email存在此字段
			$aList[$key][11] = (int) $value['mgender']; //用户性别,0男1女2保密
			$aList[$key][12] = $sid == $value['sid'] ? (string) $value['mpage'] : ''; //个人主页
			$aList[$key][13] = (int) $value['mprivilege']; //权限或者是否星级用户
			$aList[$key][14] = (int) ocache::$acache['getFriends'][$mid][$value['mid']][0]; //是否牌友.0好友1牌友
			$aList[$key][15] = $value['mvip'] > 0 ? ( (isset( $value['mother']['showVip'] ) && $value['mother']['showVip'] > 0) ? 0 : (int) $value['mvip']) : 0;  //vip等级
			$aList[$key][16] = array( ); //道具
			$aList[$key][17] = (string) $value['sitemid']; //站内ID
			$aList[$key][18] = (int) $value['sngsub']; //积分
			$aList[$key][19] = is_array( $getList[$value['mid']] ) ? (int) $getList[$value['mid']][0] : -1; //桌子ID
			$friendsRoom 	 = oo::$config['friendsRoomFilterTables'] && $objTables->isFriendsRoom((int)$aList[$key][19]);//好友俱乐部房间过滤
			if($sid == 381 || $friendsRoom){//pc棋牌大厅的屏蔽追踪功能
				$aList[$key][19] = 0;
			}
			$aList[$key][20] = (int) $getList[$value['mid']][1]; //游戏状态 1旁观2在玩
			$aList[$key][21] = ($type == 0) && of::isFacebook( $value['sid'] ) && ($value['mid'] != $mid) ? 1 : 0; //是否可赠送金币0不可赠送1可赠送(yahoojp不赠送金币)
			$aList[$key][22] = 0; //是否可赠送礼物0不可赠送1可赠送
			//$aRet[$k][6] = (in_array($type, array(0,11,12,13,14))) && ($isFacebook || in_array( $sid, array( 161 ) )) && ($v['mid'] != $mid) ? 1 : 0; //是否可赠送金币，0不可赠送1可赠送

			if(oo::$config['closeSF'] && in_array($type, array(0,11,12,13,14))){//泰语排查刷分关闭排行榜赠送
				$aRet[$k][6] = 0;
			}
			$aList[$key][23] = $value['frtype'] ? $value['frtype'] : 0; //好友类型0 FB，1 站内好友
			$aList[$key][24] = (int) $value['experience']; //用户经验值
			$aList[$key][25] = (string) $value['mbig']; //大头像
			$aList[$key][26] = (int) $value['newExpLevel']; //新经验值
			$aList[$key][27] = (string) date( 'Y-m-d', $value['mactivetime'] ); //最后登录时间
			if( oo::$config['sid'] == 117 ){
				$aList[$key][28] = (in_array($value['mbloodtype'], array(200, 220)) || (in_array($value['byapprove'], array(1)))) ? 1 : (($value['sid'] == 117) ? $value['mhasicon'] : 0); //微游戏sina V认证用户  微博达人 子站只有女郎
				$aList[$key][29] = in_array($value['byapprove'], array(1)) ? '德州扑克女郎认证' : (( in_array($value['mbloodtype'], array(200, 220)) ) ? '新浪微博达人' : $value['mhometown']); //微游戏sina V用户认证信息
				$aList[$key][30] = (in_array($value['byapprove'], array(1)) && ($value['mbloodtype'] <= 0)) ? 10 : $value['mbloodtype']; //微游戏sina //加V对应关系:  0- 名人；1-政府；2-企业；3-媒 体；4-校园；5-网站；6-应用 ; 7-团体（机构）;  //达人的对应关系: 200 - 待审核达人 ;  220 - 通过审核的达人
			}elseif( $sid == 93 ){
				if( $unid == 126 ){
					$aList[$key][28] = strlen( $value['mhometown'] ) ? 1 : 0; //腾讯认证用户
					$aList[$key][29] = strlen( $value['mhometown'] ) ? $value['mhometown'] : ''; //腾讯认证用户认证信息
					$aList[$key][30] = strlen( $value['mhometown'] ) ? 0 : 0;
					$aList[$key][31] = $value['tapplevel'] ? $value['tapplevel'] : 1;
				}elseif( $unid == 93 || $unid == 125 ){
					$aQzonevip = (array)$value['mqzonevip'];
					$aList[$key][28] = $aQzonevip['is_vip'] ? 1 : 0; //空间黄钻
					$aList[$key][29] = 'QQ黄钻贵族';
					$aList[$key][30] = $aQzonevip['vip_level'];
				}
			}

			$aList[$key][28] = isset($aList[$key][28]) ? $aList[$key][28] : '';//保证key连续
			$aList[$key][29] = isset($aList[$key][29]) ? $aList[$key][29] : '';
			$aList[$key][30] = isset($aList[$key][30]) ? $aList[$key][30] : '';
			$aList[$key][31] = isset($aList[$key][31]) ? $aList[$key][31] : '';
			$aList[$key][32] = oo::$config['privateRoom'] && is_array( $getList[$value['mid']] ) && $getList[$value['mid']][0] && isset($priRoom[$getList[$value['mid']][0]]) ? $priRoom[$getList[$value['mid']][0]] : array();
			$aList[$key][33] = 0; //inGame 0=texas 1=scibo 2=pineapple
			$aList[$key][34] = 0; //svid
			if(oo::$config['pineapple']){
				if($getList[$value['mid']][0] == oo::pineapple()->cfg['tid']){
					$aList[$key][33] = 2;
					$aList[$key][34] = (int)$getList[$value['mid']][2];
				}
			}
			if(oo::$config['sicbov2'] && ($getList[$value['mid']][0] == oo::sicbo()->cfg['tid']) ){
				$aList[$key][33] = 1;
				$aList[$key][34] = (int)$getList[$value['mid']][2];
			}
			$aList[$key][35] = of::isPhone($value['unid']);
			$aList[$key][36] = $value['mactivetime']; //最后登录时间
			if((SERVER_TYPE == 'demo') && (in_array(oo::$config['sid'], array(93, 117)))){//过滤下字段，不用返回那么多
				$afields = array(0, 1, 3, 5, 11, 19, 20, 28, 29, 30, 31, 32);
				$aList[$key] = (array)array_intersect_key($aList[$key], array_flip($afields));
			}
			$key++;
		}
		return (array) $aList;
	}

	/**
	 * 根据桌子ID生成桌子信息
	 * @param int $tid
	 * @param int $langtype
	 * @param bool $inCache 是否尝试从缓存取
	 * @return array [桌子ID,当前玩家数,旁观者数,小盲注,空位数,桌子名,最大玩家数,最少买入,最多买入,桌子类型,服务器ID,桌子密码,是否vip房,站点ID,台费比例]
	 */
	protected function mkTableInfo( $tid, $langtype, $inCache = false ){
		$lang = oo::$config['language'][(int) $langtype];
		if( $aTable = oo::tables()->getTableById( $tid, true ) ){
			$aInfo[0] = (int) $aTable['tid'];
			$aInfo[1] = ($tplayernow = (int) $aTable['tplayernow']);
			$aInfo[2] = (int) $aTable['tviewers'];
			$aInfo[3] = (int) $aTable['tblindmin'];
			$aInfo[4] = ($tplayermax = (int) $aTable['tplayermax']) - $tplayernow;
			$aInfo[5] = ($tname = $aTable["tname_$lang"]) ? (string) $tname : (string) $aTable['tname'];
			$aInfo[6] = $tplayermax;
			$aInfo[7] = (int) $aTable['tbuymin'];
			$aInfo[8] = (int) $aTable['tbuymax'];
			$aInfo[9] = (int) $aTable['ttype'];
			$aInfo[10] = (int) $aTable['svid'];
			$aInfo[11] = (string) $aTable['tpassword'];
			$aInfo[12] = (int) $aTable['tvip'];
			$aInfo[13] = (int) $aTable['sid'];
			$aInfo[14] = (int) $aTable['Venuecosts'];
			$aInfo['tattr'] = (string)$aTable['tattr'];
		}
		return (array) $aInfo;
	}

	/**
	 * 制作返回给flash的参数
	 * @param int $mid 用户id
	 * @param array $ret 结果字段值
	 * @param Boolean/string $mtkey 是否启用签名认证(若为字符，则是签名密要)
	 * @param $useSig $_mtkey 是兼容老方法可能存在的调用，回头可以删除
	 * @return array
	 */
	protected function genRet( $mid, $ret, $mtkey = '', $useSig = false, $_mtkey = '' ){

		if( isset($_SERVER['HTTP_GATEAUTHZ']) && $_SERVER['HTTP_GATEAUTHZ'] ){ //GATE鉴权返回
			$mid = ( isset($ret['aUser']) && isset($ret['aUser']['mid']) && $ret['aUser']['mid'] ) || ( isset($ret['authz']) && $ret['authz'] ) ? $mid : 0 ;
			header('mid: '. $mid);
		}

		$rets = array( );
		//$rets['sys'] = array( oo::$config['xml'], 0 );  //服务监听.(XML的版本号,服务器是否在维护1维护0正常)

		$rets['time'] = time(); //服务器时间
		if( oo::$config['openMttMatch'] == 1 ){//返回计时赛时间给flash
			$week = date( 'N' );
			$rets['mtttime'] = oo::match()->getSigTime();
			if( isset( oo::$config['mttmatch']['except_week'] ) && !in_array( $week, oo::$config['mttmatch']['except_week'] ) ){//如果不是禁赛日
				$rets['mtttime'] = oo::match()->getSigTime();
			}
			if( $week == oo::$config['mttmatch']['mttweek'][0] ){
				$rets['mtttime'] = strtotime( date( 'Y-m-d ', $rets['time'] ) . substr_replace( oo::$config['mttmatch']['mttweek'][1], ':', 2, 0 ) . ':00' );
			}
		}

		if($useSig){
			$mtkey = $_mtkey ? $_mtkey : true;//暂时兼容以前可能存在的调用
			$aTrc = debug_backtrace();
			if($aTrc && $aTrc[1] && is_array($aTrc[1])) $str = json_encode($aTrc[1]);
			oo::logs()->oldfun($mid, 'genRet:'.$str);
		}
		if($mtkey){//需要返回密要验证
			if(!is_string($mtkey)) $mtkey = '';
			$rets['sig'] = md5( $this->joins( $ret, $mtkey ) );
		}
		$rets['ret'] = $ret;
		$rets['flag'] = 1;  //标志从服务端返回
		return $rets;
	}

	/**
	 * 验证传过来的数据
	 * @param unknown_type $param 客户端传过来的原始数据
	 * @param unknown_type $auth 验证等级.0,验证sig,time.1在线.2在大厅.3sig验证5vmid和vkey验证
	 * @return unknown 是否验证成功
	 */
	protected function auth( $param, $auth ){
		if( $param['api'] > 0 ){ //移动端试图登录？
			return false;
		}

		if( !in_array( oo::$config['sid'], array( 13, 101 ) ) ){ // ip黑名单检测
			oo::black()->check(); //检查IP是否被封
		}
		if( is_array( oo::$config['needstatsid'] ) && !in_array( of::getCSid(min( $param['sid'], 1001 ), $param['unid']), oo::$config['needstatsid'] ) ){//未经允许的sid不能进入
			oo::logs()->debug( '######bad sid start######', 'error.txt' );
			oo::logs()->debug( array($param, of::getCSid(min( $param['sid'], 1001 ), $param['unid'])), 'error.txt' );
			oo::logs()->debug( '######bad sid end######', 'error.txt' );
			return false;
		}
		if(defined('API_V2_AJAX')){
			$flag = true;
		}else{
			$sig = $param['sig'];
			unset( $param['sig'] );
			$genSig = $this->joins( $param, (string) $param['mtkey'], (int) $param['api'] );
			$flag = (strcmp( $sig, md5( $genSig ) ) === 0 ? true : false);
			if( !$flag ){
//				oo::logs()->debug( $param, 'error.txt' );
//				oo::logs()->debug( md5( $genSig ), 'error.txt' );
//				oo::logs()->debug( $sig, 'error.txt' );
//				oo::logs()->debug( $genSig, 'error.txt' );
//				oo::logs()->debug( '------------------', 'error.txt' );
			}
		}
		if( $flag && in_array( $auth, array( 1, 2, 3, 5, 6 ) ) ){ //在线有效性验证及验证是否在桌子里面
			$flag = oo::membertable()->fresh( $param['mid'], $param['mtkey'], $auth == 2 ? 1 : 0  );
			!$flag && oo::logs()->debug("fresh error! mid:". $param['mid'], 'error.txt');
		}

		if( $flag && in_array( $auth, array( 3, 4, 5 ) ) ){ //sig验证,防重复刷新
			$flag = oo::logs()->limit( $param['mid'], 0, $sig );
			!$flag && oo::logs()->debug("limit error! mid:". $param['mid'], 'error.txt');
		}

		if( $flag && in_array( $auth, array( 5, 6 ) ) ){
			$flag = $flag;
		}

		if(PRODUCTION_SERVER && ( ((int) $param['api'] > 0) || of::isPhone( of::getCSid( $param['sid'], $param['unid'] ) ) ) ){ //禁止移动请求进入
			$flag = false;
			if( ocache::mongoTemp()->get( 'MB_ENTER' ) === 1 ) $flag = true;//includes/mb.php里记的
		}

		if(oo::$config['sid']==57 && in_array($param['mid'],array(16499433 ,15795676))){//IP异常，可能是被盗,记录日志
			$openMobileSMS = oo::superaccount()->openMobile($param['mid']);//是否开启手机短信验证
			if($openMobileSMS){
				$cookieAndIp = ocache::superAccount()->get('CI|'.$param['mid']);//验证成功后，会存放当前cookie、ip的前3段
				$nowIp = functions::getip();
				$len = strrpos($nowIp, '.') + 1;
				$checkIp = substr($nowIp, 0, $len);
				if($cookieAndIp && ($checkIp != $cookieAndIp[1])) {
					$flag = false;
					oo::logs()->debug(date('YmdHis',time()).'-'.$param['mid'].'-'.$checkIp.'-'.$cookieAndIp[1],'errip.txt');
					oo::nqueue()->add(1, 'JimZhan@boyaa.com', 'iperrmark','info:mid-'.$param['mid'].'-now|'.$checkIp.'-CI|'.$cookieAndIp[1], 1, oo::$config['langtype'], 0, date('Ymd'));
					oo::member()->sendKick($param['mid']); //踢出房间
					die("<script>window.location.href='../../facebooktl/close.php';</script>");
				}
			}
		}
		
		if(oo::$config['sid'] != $param['sid']){//合服平台切换配置
			BY::sidInit($param['sid']);
		}elseif( oo::$config['masterForMix'] && ( $unid = (int)$param['unid'] ) && in_array($unid, explode(',', oo::$config['masterForMix'])) ){
			BY::sidInit($unid);
		}

		if( BY::isOpen('act888_isOpen') ){
			$isCombine = is_array($param['param']) ? $param['param']['combine'] : false;
			oo::act(888)->checkIo($isCombine);//版本收编项目demo开关控制
		}

		of::setLogcenterSid( $param['sid'], $param['unid'] );//设置log中心sid
		return $flag;
	}

	private function joins( $arg, $mtkey, $api = 0 ){
		static $joins_counter = 0;
		if( ( $joins_counter++ <= 0 ) && ( $this->array_depth( $arg ) > 50 ) ){
			die( 'possible deep recursion attack!' );
		}
		$aGen = array( 'M', 'P', 'M', 'T', 'Y', 'K', 'U', 'G', 'X', 'L', 'G', 'H', 'Q', 'W', 'F', 'O', 'B', 'Z', 'V', 'Y', 'H' );
		$str = $aGen[$api];
		if( !is_object( $arg ) ){
			if( is_null( $arg ) || is_bool( $arg ) ){
				$str .= '';
			}elseif( is_string( $arg ) || is_numeric( $arg ) ){
				$str .= 'T' . $mtkey . preg_replace( '/[^0-9a-z]/i', '', $arg, -1 );
			}else{
				ksort( $arg, SORT_STRING );
				foreach( $arg as $key => $value ){
					$str .= ($key . '=' . $this->joins( $value, $mtkey, $api ));
				}
			}
		}
		return $str;
	}

	/**
	 * 计算数组最大深度的递归方法
	 * @param array $array
	 * @return Int
	 *
	 * */
	private function array_depth( $array ){
		if( !is_array( $array ) ){
			return 0;
		}
		$max_depth = 1;
		foreach( $array as $val ){
			if( is_array( $val ) ){
				$depth = $this->array_depth( $val ) + 1;
				if( $depth > 60 ){
					die( 'too deep recursion.process exit.' );
				}
				if( $depth > $max_depth ){
					$max_depth = $depth;
				}
			}
		}
		return $max_depth;
	}

}