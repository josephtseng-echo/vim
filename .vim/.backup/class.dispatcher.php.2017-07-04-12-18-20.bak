<?php
/**
 * 请求分发器类定义文件
 *
 * @author WeickyLi
 * @package defaultPackage
 */
defined('IN_WEB') or die('Include Error!');

include(PATH_LIB . "mobile/class.adapter.php");

/**
 * 请求分发器类
 *
 */
class Dispatcher{
	
	/**
	 * 当前请求控制器类名
	 *
	 * @var string
	 */
	public static $class;

	/**
	 * 当前请求控制器类方法名
	 *
	 * @var string
	 */
	public static $method;

	/**
	 * 不兼容接口列表
	 * @deprecated
	 * @var array
	 */
	private static $_uncompatible = array(
		//方法名 => array(api列表),
		'Members.oneKeyLogin' => array(13, 22, 26, 29, 32),
	);

	/**
	 * 定义常量
	 */
	private static function _dispatch_define(){
		define('_API_',			intval($_REQUEST['api']));
		define('_VERSION_',		$_REQUEST['version']);

		/*印尼语言包分离，兼容老版本start*/
		//useOldLangtype 版本号控制1.0.0-5.5.3  开启开关之后，指定版本使用的langtype为11印尼语
		if(oo::$config['sid'] == 67 && oo::mobileConfig()->getSwc(_API_, "useOldLangtype")){//印尼语分离之前，印尼平台传递langtype=2，但CMS配置的id，en这两个langfixs都是印尼语
			$_REQUEST['langtype'] = 11;//老版本使用CMS配置的是id,【传递的时候改回印尼语的langtype】
		}
		/*印尼语言包分离，兼容老版本end*/
		define('_LANGTYPE_',	intval($_REQUEST['langtype']));

		define('_MID_',			intval($_REQUEST['mid']));
		define('_MTKEY_',		$_REQUEST['mtkey']);
		define('_PROTOCOL_',	intval($_REQUEST['protocol']));
		if(($_REQUEST['sid'] == 79) && (strtolower($_REQUEST['method']) == 'members.create')){
			$sid = in_array(_API_, array(198)) ? intval($_REQUEST['unid']) : oo::$config['sid'];//有区别于主版本的登录方式
			define('_SID_',		$sid);
		}else{
			define('_SID_',		$_REQUEST['sid']);
		}
		define('_VKEY_',		$_REQUEST['vkey']);
		define('_VMID_',		intval($_REQUEST['vmid']));
		define('_UNID_', intval($_REQUEST['unid']));
		if(isset($_SERVER['HTTP_X_PARAM'])){
			$headParams = explode('#', $_SERVER['HTTP_X_PARAM']);
			//网络类型 1 cmwap 2 wifi 4 cmnet 8 uninet 16 uniwap 32 net 64 wap 128 默认 256 cmda net 512 cmda wap
			define('_NETWORK_', intval($headParams[0])); 
			//运营商  0无 1移动 2联通 3电信
			define('_OPERATOR_', intval($headParams[1])); 
		} else{
			define('_NETWORK_', 1); //网络类型 1 wifi
			define('_OPERATOR_', 0); //运营商  0无 1移动 2联通 3电信
		}

		if((isset($_REQUEST['istv']) && $_REQUEST['istv']) || (defined('_UNID_') && in_array(_UNID_, array(373, 387, 388, 429, 348, 372, 400))) ){
			define('_ISTV_', 1);
		}
	}
	
	/**
	 * 旧版接口分发请求
	 *
	 * @return object 控制器对象
	 */
	private static function _dispatch_v5(){
		$classFile = PATH_API .'v5/'.self::$class.'.php';
		if(!file_exists($classFile)){
			die('3');
		}
		include(PATH_API . 'v5/Server.php');
		@include($classFile);
		class_exists(self::$class) or die('44');
		$obj = new self::$class;
		method_exists($obj, self::$method) or die('5');
		$method = self::$method;
		return $obj->$method($_REQUEST);
	}

	/**
	 * 新版接口分发请求
	 *
	 * @return object 控制器对象
	 */
	private static function _dispatch_v8(){
		//验证配置
		if(empty($_REQUEST['api']) || (PRODUCTION_SERVER && !in_array(oo::$config['api'][$_REQUEST['api']][1], (array)oo::$config['needstatsid']))){
			$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER["REQUEST_URI"];
			$ip = functions::getip();
			oo::logs()->debug(date("Y-m-d H::s"). " mid:{$_REQUEST['mid']}, ip:$ip, ,url:{$url}, request:".json_encode($_REQUEST), "dispatch.die-4");
			die('4');
		}
		//控制器类名、文件名定义
		$className		= self::$class . 'Controller';
		$classFile		= PATH_API .'v8/'. oo::$config['clientApiDir'][$_REQUEST['api']] .'/'. self::$class .'.php';
		!PRODUCTION_SERVER && oo::logs()->debug($classFile,'cwh/dispatch.txt');
		$baseClassName	= self::$class . 'Base';
		$baseClassFile	= PATH_API .'v8/common/'. $baseClassName .'.php';
		//验证文件是否存在
		if(!file_exists($classFile) || !file_exists($baseClassFile)){
			if(isset($_SERVER['HTTP_X_API_VER'])) {
				$aMethod = array('Create'=>1, 'oneKeyLogin'=>1);
				$aMethod[self::$method] && oo::logs()->debug(implode('|', array(1, date('mdHis'), _API_, _VERSION_, $_SERVER['HTTP_X_API_VER'], $baseClassFile, $classFile, functions::osip())), '_dispatch_v8.err.txt');
			}
			return self::_dispatch_v5();
		}
		//引入文件
		@include(PATH_LIB . "mobile/class.controller.php");
		@include($baseClassFile);
		//验证基类是否存在
		if(!class_exists($baseClassName)){
			if(isset($_SERVER['HTTP_X_API_VER'])) {
				$aMethod = array('Create'=>1, 'oneKeyLogin'=>1);
				$aMethod[self::$method] && oo::logs()->debug(implode('|', array(2, date('mdHis'), _API_, _VERSION_, $_SERVER['HTTP_X_API_VER'], $baseClassFile, $baseClassName, functions::osip())), '_dispatch_v8.err.txt');
			}
			return self::_dispatch_v5();
		}
		//验证方法是否存在(故意验证父类，强迫每个方法在父类中实现)
		$classRel = new ReflectionClass($baseClassName);
		if(!$classRel->hasMethod(self::$method)){
			if(isset($_SERVER['HTTP_X_API_VER'])) {
				$aMethod = array('Create'=>1, 'oneKeyLogin'=>1);
				$aMethod[self::$method] && oo::logs()->debug(implode('|', array(3, date('mdHis'), _API_, _VERSION_, $_SERVER['HTTP_X_API_VER'], $baseClassName, self::$method, functions::osip())), '_dispatch_v8.err.txt');
			}
			return self::_dispatch_v5();
		}
		//验证方法是否公开
		$methodRel = $classRel->getMethod(self::$method);
		if(!$methodRel->isPublic()){
			//return self::_dispatch_v5();
			die('x');
		}
		//引入子类文件
		@include($classFile);
		//验证子类是否存在
		if(!class_exists($className)){
			if(isset($_SERVER['HTTP_X_API_VER'])) {
				$aMethod = array('Create'=>1, 'oneKeyLogin'=>1);
				$aMethod[self::$method] && oo::logs()->debug(implode('|', array(4, date('mdHis'), _API_, _VERSION_, $_SERVER['HTTP_X_API_VER'], $classFile, $className, functions::osip())), '_dispatch_v8.err.txt');
			}
			return self::_dispatch_v5();
		}
		
		//调用方法
		$controller = new $className;
		return $controller->__call(self::$method, null);
	}

	/**
	 * 分发请求
	 *
	 */
	public static function dispatch(){
		//input
		$callback = "{$_REQUEST['callback']}"; //HTML5需要的一个临时变量
		$enableBtea = BteaAdapter::enabled();
		$enableProtobuf = ProtobufAdapter::enabled();
		if($enableBtea && $enableProtobuf){
			$adapter = new BteaProtobufAdapter;
		}elseif($enableBtea){
			$adapter = new BteaAdapter;
		}elseif($enableProtobuf){
			$adapter = new ProtobufAdapter;
		}else{
			$adapter = new JsonAdapter;
		}
		$_REQUEST = $adapter->in();
		$api = intval($_REQUEST['api']);
		
		//将$_REQUEST['method']从下面if{}else{}判断挪出，减少无效参数进入下面if逻辑判断
		if(empty($_REQUEST['method'])){
            echo 'yes';exit();
			die('3');
		}
		list(self::$class, self::$method) = explode('.', $_REQUEST['method']);
		if(empty(self::$class) || empty(self::$method)){
			die('3');
		}

		$xml = oo::$config['xml'] ? oo::$config['xml'] : '001';
		if( oo::$config['closeMobile'] && (self::$method != 'getNoticeForPhone') && (!of::isBoyaaIp() || (oo::$config['closeMobile'] == 4))){
			$result = array('sys' => array($xml, 1), 'time' => time(), 'ret' => array(), 'flag' => -404);
		}else{
			$_REQUEST['_unset'] = array('_unset', 'mbsid');//在auth验证的时候需要移除的属性
			$_REQUEST['mbsid'] = $_REQUEST['unid'];
			//正常情况
			self::$class = ucfirst(self::$class);

			(self::$class == 'StarTkt') && !in_array(oo::$config['sid'],array(117,93)) && oo::logs()->debug(date("Y-m-d H:i:s").", param:".json_encode($_REQUEST),'StarTkt.log');
			//同一api不同登录方式数据统计分离
			if (array_key_exists($api, oo::$config['detachStat']) && array_key_exists( $_REQUEST['sid'], oo::$config['detachStat'][$api])) {
				$_REQUEST['unid'] = oo::$config['api'][$api][1] = oo::$config['detachStat'][$api][$_REQUEST['sid']][0];
			}
			
			//起凡联运过渡方案，上线后删除
			if(isset($_REQUEST['unid']) && $_REQUEST['unid'] == 424 ){
				if(functions::version_compare($_REQUEST['version'], '7.3.90') >= 0){
					unset(oo::$config['detachStatV2'][36][424]);
				}
			}
			
			//同一api数据统计分离V2版（客户端unid也修改成分支版本unid 相同登录方式和不同登录方式）
			if (array_key_exists($api, oo::$config['detachStatV2']) && array_key_exists( $_REQUEST['unid'], oo::$config['detachStatV2'][$api])) {
				oo::$config['api'][$api][1] = $_REQUEST['unid'];
			}
			
			if(66 == $api && $_REQUEST['version'] == "7.6.94" && $_REQUEST['method'] == 'Members.Create'){
				$_REQUEST['sid'] = 5;
			}
			if( 25 == $api && $_REQUEST['unid'] != 502){ //新浪多平台登录版 特殊处理，解决统计问题，这样做不太好，我也不想，原谅我，阿门。
				$theSid = intval($_REQUEST['sid']);
				$_REQUEST['api'] = ($theSid == 1) ? 60 : ($theSid == 93 ? 61 : 25);
				$_REQUEST['unid'] = ($theSid == 1) ? 189 : ($theSid == 93 ? 190 : 140);
				$theSid == 432 && $_REQUEST['unid'] = 432;//爱思登录
				$theSid == 501 && $_REQUEST['unid'] = 502;
			}
			
			if( 67 == $api ){ //金山联运
				$theSid = intval($_REQUEST['sid']);
				$_REQUEST['api'] = $theSid == 93 ? 72 : 67;
				$_REQUEST['unid'] = ($theSid == 93) ? 205 : 200;
			}
			if( 53 == $api ){ //win8
				$theSid = intval($_REQUEST['sid']);
				$_REQUEST['api'] = $theSid == 93 ? 75 : 53;
				$_REQUEST['unid'] = ($theSid == 93) ? 208 : 177;
			}

			$isCombinePlat = ( oo::$config['masterForMix'] && in_array($api, of::getApis()) ) ||in_array($api,array(2,5,6,7,12,13,16,26,43,45,49,50,100,101,113,137,138,154,155,180,189,218,224,231,233,234,42,46,139));
			if( $isCombinePlat ){ //葡语平台合服英语平台
				$_REQUEST['rsid'] = $_REQUEST['sid'];//临时存储sid，留待验证后删除
				$_REQUEST['_unset'][] = 'rsid';
				$_REQUEST['sid']  = (!in_array(intval($_REQUEST['sid']), array(79,233,237,oo::$config['sid']))) ? oo::$config['sid'] : intval($_REQUEST['sid']);
			}

			self::_dispatch_define(); //定义一些常量
			$html5_v8 = (of::isHtml5($api) && isset($_REQUEST['v8'])); //HTML5 使用v8
			$uncompatible = isset(self::$_uncompatible[$_REQUEST['method']]) && in_array(intval($_REQUEST['api']), self::$_uncompatible[$_REQUEST['method']]);
			
			//Android繁体5.5.1及以下不支持v8(老版本的客户端已传HTTP_API_V8也为1，但是由于后端之前没配置$config['clientApiDir']，现在想在新版用v8登录接口)，新版铺开后清理代码
			if(!$uncompatible && ($_REQUEST['api'] == 22) && (functions::version_compare($_REQUEST['version'], '5.5.1') <= 0)) { //$uncompatible为true时即本身就不兼容v8
				$uncompatible = true; //强制不兼容v8
			}
			$bApiV8 = (isset($_SERVER['HTTP_X_API_VER']) && ($_SERVER['HTTP_X_API_VER'] == 8));
			if($bApiV8) { //客户端传HTTP头：X-API-VER 目前值为8，表示强制认为兼容V8接口，还可以为其他值表示后端接口版本号
				$uncompatible = false; //目前Android>5.5.1和iPhone>=3.3和iPad>=3.4会传该头强制使用Vx接口
			}
//			if($api == 22)	oo::logs()->debug(array($_SERVER['HTTP_API_V8'], $bApiV8 , $html5_v8,oo::$config['clientApiDir'][$_REQUEST['api']],$uncompatible),'mb_dispatch.cd22.log');
			if((isset($_SERVER['HTTP_API_V8']) || $bApiV8 || $html5_v8) && isset(oo::$config['clientApiDir'][$_REQUEST['api']]) && !$uncompatible){	
				$result = self::_dispatch_v8();
			}else{	 
				$result = self::_dispatch_v5();
			}
		}

		//output
		$output = $adapter->out($result);
		if($adapter instanceof JsonAdapter){
			if(!PRODUCTION_SERVER){
				oo::mobMod('requestlog')->log($_REQUEST,$result);
			}else if(oo::$config['openTexasToolsRecord']){
				$mid=functions::uint($_REQUEST['mid']);
				if($mid==0&&isset($result['ret']['mid'])){
					$mid=functions::uint($result['ret']['mid']);
				}
				if(($mid>0&&in_array($mid, oo::$config['io']['openTexasToolsRecord'][3]))){
					oo::mobMod('requestlog')->log($_REQUEST,$result);
				}
			}
		}
		//ccgate逻辑，需gzip压缩
		if (IN_SWOOLEGATEWAY === true) {
			if (!empty($callback)) {
				$output = $callback . '(' . $output . ');';
			}
			if (defined('API_START_TIME')) {
				$timeCost = microtime(true) - API_START_TIME;
				if ($timeCost > 5) {//5秒以上的请求
					oo::logs()->debug(_MID_ . ',"' . $_REQUEST['method'] . '",' . $timeCost . ',' . $_SERVER['REQUEST_TIME'], 'mb_slow_api.txt');
				}
			}
			$ccgate_login = '';
			//如果为登录接口,则检测是否登录成功并输出特殊信息方便ccgate获取
			if ($_SERVER['HTTP_CCGATE_LOGIN']) {
				if (isset($result['ret']) && isset($result['ret']['mid']) && isset($result['ret']['sessionid'])) {
					$mid = (int) $result['ret']['mid'];
					$sessionid = (int)$result['ret']['sessionid'];
					if ($mid > 0 && $sessionid>0) {
						$ccgate_login = "login:".pack('N', $mid).pack('N', $sessionid);
					}
					if($_SERVER['HTTP_CCGATE_LOGIN']==2){
						//针对AC网关做兼容
						$ccgate_login.=$result['ret']['mtkey'];						
					}
				}
			}
			if(!PRODUCTION_SERVER && $_REQUEST['apitest']){
				die($output);
			}else{
				//$data=$output;
				$data = gzcompress($output);
				//当前包协议只支持65400个字节，超出这个字节报警并转发错误
				if(!PRODUCTION_SERVER&&_MID_===196464){
					oo::logs()->debug($_REQUEST['method'].'-'.strlen($data).'-'.date('Ymd H:i:s'), "ccgate65");
				}
				if (strlen($data) > 65400) {				
					oo::logs()->debug("移动-" . $_REQUEST['method'].',返回字节为'.strlen($data).',超过65400，将直接不返回给前端', "ccgate65535");
					die(-3);
				}
				die($ccgate_login.$data);
			}
		}
		if(!empty($callback)){
			if(extension_loaded('zlib')) {
				$content = gzencode($callback.'('. $output .');', 9);
				header('Content-Type: text/javascript');
				header('Content-Encoding: gzip');
				header('Vary: Accept-Encoding');
				header('Content-Length: '.strlen($content));
				echo $content;
				exit(0);
			}
			header('Content-Type: text/javascript');
			echo $callback .'('. $output .');';
			exit(0);
		}else{
			if(defined('API_START_TIME')){
				$timeCost = microtime(true) - API_START_TIME;
				if($timeCost > 5){//5秒以上的请求
					oo::logs()->debug(_MID_ . ',"' . $_REQUEST['method'] . '",' . $timeCost . ',' . $_SERVER['REQUEST_TIME'], 'mb_slow_api.txt');
				}
			}
			if(_API_ === 229) { //跨域处理
				//$host = 'h5.boyaa.com';
				$host = 'qqhtml5.app23006.twsapp.com';
				//header('Content-Type: text/x-json');
				header('Access-Control-Allow-Origin: '.(PRODUCTION_SERVER === false ? '*' : ($_SERVER['HTTPS'] == 'on' ? 'https://' : 'http://').$host));
				if(extension_loaded('zlib')) {
					$output = gzencode($output, 9);
					header('Content-Encoding: gzip');
					header('Vary: Accept-Encoding');
					header('Content-Length: '.strlen($output));
				}
			}
			echo $output;
			exit(0);
		}
	}
}
