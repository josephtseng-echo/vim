<?php

/*
   批量导入机器人到指定表里，由c++调用表里的机器人
   1: 从选中用户源中抽出一部分不活跃的用户作为用户源，由运营或产品提供
   2: 目前机器人功能只应用在快速房间,初级场，中级场， 还有新手入门,程序从这些桌子中找出，
              至少满足桌子为移动的且小盲注<=100,其它属性以后再定, 找出桌子后算出每个 server id 关联了多少张桌子，
             因为每个机器人得指定一个server id, 然后按桌子数量比例给每个 server id 分配机器人   
   有坑的地方:
       脚本只执行一次，但cms后台桌子配置是变化的，所以变化的部分在脚本运行后不会反映到记录机器人的表里，以后优化
       机器人有可能不够钱坐下    
*/

/*
-- 表的结构`texas`. `texas_robot`

CREATE TABLE IF NOT EXISTS `texas`.`texas_robot` (
  `id` int(11) NOT NULL COMMENT '机器人id',
  `active` int(11) NOT NULL COMMENT '机器人是否激活，1是激活，0是未激活',
  `name` varchar(255) NOT NULL COMMENT '机器人名字',
  `svid` int(11) NOT NULL,
  `aitype` int(11) NOT NULL COMMENT '算法类型',
  `playCount` int(11) NOT NULL COMMENT '每一次坐下总共玩的局数，0就是不限制',
  `tid` int(11) NOT NULL COMMENT '第一次坐下的桌子',
  `smallBlind` int(11) NOT NULL COMMENT '只有此小盲的桌子才坐下',
  `buyinMul` int(11) NOT NULL COMMENT '买入的倍数',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
 */

define('IN_WEB', true);
define('IN_API', true);
$current_run_dir =  dirname(__FILE__);
include_once $current_run_dir. '/../common.php';
PRODUCTION_SERVER && exit ( 0 );
error_reporting(E_ALL ^E_NOTICE);
set_time_limit(0);
ini_set ( 'memory_limit', '512M' );
header( "Content-Type:text/html;charset=utf-8" );

// 通用函数
function fuck_libin($arr){
	echo "<pre>";
	print_r($arr);
	echo "</pre>";
}

/*
 *   导入用户列表, 文件格式每一行以 \n分开，每一列以,号分隔, 第1列固定为mid,第二列如果有提供必须为用户名称
 *   $file_name 相对demo目录的文件名称
 *   返回数组形式 
 *  array('mid'=>array('mid'=>mid,'name'=>name);
*/
function libin_import_user_list($file_name){
	if(!file_exists($file_name)){
		die("import file not exists: $file_name");
	}
	$contents = file_get_contents($file_name);
	if(empty($contents)){
		die('file content empty');
	}
	$content_arr = explode("\n",$contents);
	$result_arr = array();
	foreach($content_arr as $line){
		$line = trim($line);
		if(empty($line)){
			continue;
		}
		$line_arr = explode(",",$line);
		$mid = intval($line_arr[0]);
		if(empty($mid)){
			continue;
		}
		$name = isset($line_arr[1])?$line_arr[1]:'';
		$result_arr[ $mid ] = array('mid'=>$mid,'name'=>$name);
	}
	if(empty($result_arr)){
		die('not find any mid');
	}
	return $result_arr;
	//oo::minfo()->getFieldsMulti(array($mid,37950715),array('mnick'));
	//oo::minfo()->get($mid,true,true,array('mnick'));
}


/*  
 *  获取满足指定条件的server关联的桌子数 
 *  返回  array('server id'=>array('table','robot'))  桌子数量和分配的机器人数  
*/
function libin_get_server_table_num(){
	/*
	ttype = 1;  // 0:新手入门, 1:初级房间, 2:中级房间,3:高级房间, 6:快速房间
	tstatus =  // 状态开启:0, 1:关闭 , 2: 测试
	tpostion = 0;  // 0:全部，1：pc, 2:移动
	tblindmin  小盲注
	*/
	$server_arr = array();
	$page_size = 100;
	$min_tid = 0;
	$o = new stdClass();
	$o->db = odb::db();
	$o->pg = 'page';
	$o->size = $page_size;
	$_GET['page'] = 1;
	while(true){
		$query = "SELECT tid,svid FROM ". oo::logs()->tbltb ." where tid > ${min_tid} and tpostion=2 and tblindmin<=100 and ttype in (0,1,2,6) and tstatus!=1 order by tid asc";
		$o->query = $query;
		oo::pager()->setParams($o);
		$loop = oo::pager()->fetchAll();
		if(!empty($loop)){
			foreach($loop as $row){
				$min_tid = $row['tid'];
				if(!isset($server_arr[ $row['svid'] ])){
					$server_arr[ $row['svid'] ] = array('table'=>0,'robot'=>0);
				}
				$server_arr[ $row['svid'] ]['table']++;
			}
		} else {
			break;
		}
	}
	
	if(empty($server_arr)){
		die('empty server arr');
	}
	return $server_arr;
}


/*
 *  产生进库sql
 *  $insert_arr 插入表的数据数组  mid=>array('svid'=>svid,'name'=>'name');
 *  $select_user_name  用户名称信息是否要从缓存查
 */
function libin_gen_sql($data_arr,$select_user_name){
	
	if($select_user_name){
		$select_mid_arr = array_keys($data_arr);
		$mid_info_arr = oo::minfo()->getFieldsMulti($select_mid_arr,array('mnick'));
		foreach($data_arr as $mid=>$row){
			$name = isset($mid_info_arr[$mid]['mnick'])?$mid_info_arr[$mid]['mnick']:'';
			$data_arr[ $mid ]['name'] = $name;
		}
	}
	
	
	$sql = '';
	foreach($data_arr as $mid=>$row){

		$sql .= " (".$mid.",'".odb::db()->escape_string($row['name'])."',".$row['svid'].",1,0,0,0,0,0),";
	}
	
	$sql = "INSERT INTO `texas`.`texas_robot` (`id`, `name`, `svid`, `active`,`aitype`, `playCount`, `tid`, `smallBlind`, `buyinMul`) VALUES ".substr($sql,0,-1);
	return $sql;
} 

/*
 *  数据进库  
 *  $insert_arr 插入表的数据数组  mid=>array('svid'=>svid,'name'=>'name');
 *  $select_user_name  用户名称信息是否要从缓存查
 */
function libin_insert_db($insert_arr,$select_user_name){
	$insert_sql = libin_gen_sql($insert_arr,$select_user_name);
	//echo $insert_sql;

	odb::db()->query($insert_sql);
	
	if(odb::db()->affected_rows() > 0) {
		return true;
	} else {	
		fuck_libin($insert_sql);
		return false;
	}
}

/* 清空机器人表 */
function libin_empty_table(){
	$sql = 'delete from `texas`.`texas_robot`';
	odb::db()->query($sql);
	if(odb::db()->affected_rows() > 0) {
		return true;
	} else {	
		fuck_libin($sql);
		return false;
	}
}


/* 模拟用户登录 */
function libin_simulate_login($mid){
	$aUser = oo::minfo()->get($mid,false,true,array('unid','mvip','mstatus'));
	if(!empty($aUser)){
		$aUser['mid'] = $mid;
		oo::expLevel()->init( $aUser['mid'] );
		oo::membertable()->insert($aUser['mid'], $aUser['unid'], $aUser['unid'], $aUser['mvip'], $aUser['mstatus'], 0, true);
		return true;
	} else {
		return false;
	}	
}


$user_file_name = $_GET['file'];  // 导入用户的文件名
$user_login = $_GET['islogin'];  // 是否同时模拟用户登录
$select_user_name = $_GET['isname'];  // 用户名称是否从缓存里查，文件导入的有可能编码不同，需要转


$user_file_name = $current_run_dir.'/'.$user_file_name;
$mid_arr = libin_import_user_list($user_file_name,$select_user_name);   // 分析文件得到用户列表

$mid_arr = array();
$mid_arr[39213] = array('mid'=>39213,'name'=>'fuck');

echo 'import user num => '.count($mid_arr).'<br>';
//fuck_libin($mid_arr);die;

$server_arr = libin_get_server_table_num();  // 获得 每个 server 要分配的 桌子数量
//echo 'server_arr';
//fuck_libin($server_arr);

/*
$sql = 'select * from `texas`.`texas_robot`';
$result = odb::db()->query($sql);
var_dump(odb::db()->fetch_array($result, MYSQL_ASSOC));
*/

	
libin_empty_table();  // 先清表



$insert_arr = array();  // 插入表的数据数组  mid=>array('svid'=>svid,'name'=>'name');


# 给每个server按关联桌子数比例 分配机器人，插到表中
foreach($server_arr as $svid=>$row){
			$tmp_insert_num = $row['table'];  // 该server id 分配机器人的数量
			for($i=0;$i<$tmp_insert_num;$i++){
				if(count($mid_arr)>0){  // 如果还有机器人可以分配
					$mid_info_arr = array_pop($mid_arr);
					$server_arr[ $svid ][ 'robot' ]++;
					$insert_arr[ $mid_info_arr['mid'] ] = array('svid'=>$svid,'name'=>$mid_info_arr['name']);
				} else {
					break;
				}
			}
			if(count($insert_arr)>=100){  // 一百条记录插一次数据库
				$bool = libin_insert_db($insert_arr,$select_user_name);
				if($bool){
					if(!empty($user_login)){   // 成功进库后是否要同时模拟登录
						foreach($insert_arr as $mid=>$v){
							libin_simulate_login($mid);
						}	
					}
				} 
				$insert_arr = array();
			}
}

if(count($insert_arr)> 0){  // 剩下的进数据库
	$bool = libin_insert_db($insert_arr,$select_user_name);
	if($bool){
		if(!empty($user_login)){   // 成功进库后是否要同时模拟登录
			foreach($insert_arr as $mid=>$v){
				libin_simulate_login($mid);
			}	
		}
	} 
	$insert_arr = array();
}


echo 'server_arr';
fuck_libin($server_arr);

// http://twtexasdemo.boyaagame.com/demo/demo/install_sngblind_libin.php
