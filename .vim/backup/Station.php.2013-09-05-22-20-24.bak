<?php

namespace Oil\Model;

use St\Api,
    St\Mvc\Model\AbstractModel;

class Station extends AbstractModel
{

    protected $stations;
    public function create(array $data = array())
    {
        if ($data) {
            $this->setItem($data);
        }

        $item = $this->getItem();

        $this->trigger('create.pre');

        $itemId = $item->create();

        if ($item->hasLoadedRelationships()) {
            foreach ($item->getLoadedRelationships('create') as $key => $relItem) {
                $t = $item->getRelationship($key);
                if ($t['relationship'] == 'OneToMany') {
                    $relItem->createMany();
                } else {
                    $relItem->create();
                }
            }
        }
        $this->trigger('create');

        $this->trigger('create.post');

        return $itemId;
    }
    public function get($userIdOrName = null, array $map = array())
    {
        $this->trigger('get.precache');

        if(is_numeric($userIdOrName)){
            $this->setItem(array(
                'id' => $userIdOrName,
            ));
        } elseif(is_string($userIdOrName)) {
            $user = $this->getItem()->getDataClass()->columns(array('id'))->where(array(
                'no' => $userIdOrName
            ))->find('one');
            if(!$user){
                return array();
            }
            $this->setItem(array(
                'id' => $user['id'],
            ));
        }
        $this->trigger('get.pre');

        $item = $this->getItem();
        if($map){
            $item = $item->toArray($map);
        } else {
            $item = $item->self(array('*'));
        }

        $this->trigger('get');

        $this->trigger('get.post');
        $this->trigger('get.postcache');

        return $item;
    }

    public function save(array $data = array())
    {
        if($data) {
            $this->setItem($data);
        }

        $item = $this->getItem();

        $this->trigger('save.pre');

        //Admin save item will remove all user roles
        /*
        $roleUserItem = $this->getItem('User\Item\RoleUser');
        $roleUserItem->user_id = $item->id;
        $roleUserItem->remove();
        */
        $item->save();


        $this->trigger('save');


        $this->trigger('save.post');


        return $item->id;

    }

    public function getList(array $itemListParameters = array(), $map = null)
    {
        $this->trigger('list.precache');

        $this->trigger('list.pre');

        $item = $this->getItemList();
        if($map){
            $item = $item->toArray($map);
        }

        $this->trigger('get');

        $this->trigger('list.post');
        $this->trigger('list.postcache');

        return $item;
    }

    public function getStations()
    {

        if (!$this->stations) {


            $item = $this->getItemList();




            $data=array();
            foreach ($item as $value) {

                $data[$value['no']]=$value['name'];
            }

            $this->stations=$data;
        }else{
            $data= $this->stations;
        }
        return $data;
    }
}
