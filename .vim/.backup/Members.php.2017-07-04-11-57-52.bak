<?php
defined('IN_WEB') or die('Include Error!');

class Members extends Server {
	/**
	 * 获取用户列表
	 */
	public function getList($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$uchid = (int)$param['uchid'];
		$type = (int)$param['param']['type'];
		$tid = (int)$param['param']['tid'];
		$mids = (array)$param['param']['mids'];
		$api = (int)$param['api'];
		$pg = (int)$param['param']['pg']; //第几页
		$perNum = (int)$param['param']['perNum']; //每页的记录数
		($api == 35) && ($unid = 126); //腾讯微博unid是126
		$array = oo::friends()->getList($mid, $type, $tid, $sid, $unid, $mids, $uchid);

		if(($type == 2) && isset($array[$mid])) { //同城，不显示自己
			unset($array[$mid]);
		}

		if($pg > 0 && $perNum > 0) { //分页返回
			$array = array_slice($array, $perNum * ($pg - 1), $perNum);
		}

		$aList = $this->mkFriendList($array, $mid, $sid, 1, $unid);

		if($pg > 0 && $perNum > 0 && is_array($aList)) { //分页返回
			$online = $money = array();
			foreach($aList as $k => $v) {
				$online[$k] = $v[19];
				$money[$k] = $v[5];
			}
			array_multisort($online, SORT_DESC, SORT_NUMERIC, $money, SORT_DESC, SORT_NUMERIC, $aList);
		}

		/**
		 * 避免拉取过多数据引起的负载问题,注释以下代码段
		 * 将ttype字段全部返回-1
		 * 这会影响安卓1.9及以下版本用户的好友跟踪功能
		 */
		if((oo::$config['sid'] == 67 && $api == 38)) { //恢复iPad印尼，ipad英语好友跟踪
			$map = oo::tables()->getTTypes();
			if(is_array($map) && is_array($aList)) {
				foreach($aList as $k => &$v) {
					$v[] = $v[19] ? $map[$v[19]] : -1; //桌子类型
				}
			}
		} else {
			$map = array();
			if(is_array($map) && is_array($aList)) {
				foreach($aList as $k => &$v) $v[] = -1;
			}
		}

		$ret['list'] = (array)$aList;
		$ret['type'] = (int)$type;
		$ret['tid'] = (int)$tid;
		$ret['mids'] = $mids;
		$ret['pg'] = $pg;
		$ret['perNum'] = $perNum;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取好友id列表
	 */
	public function getIdList($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$type = (int)$param['param']['type'];

		$aList = oo::friends()->getIdList($mid, $type);

		$ret['list'] = (array)$aList;
		$ret['type'] = (int)$type;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取指定用户的未加入应用的平台好友的信息
	 * @param array $param
	 * @return array
	 */
	public function getAppFriends($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];

		$aList = array();

		if(of::isFacebook($sid) || (oo::$config['sid'] == 117)) {
			$aList = oo::friends()->getInvite($mid);
		}

		$ret['list'] = (array)$aList;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取排行榜
	 */
	public function getRankList($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$type = (int)$param['param']['type'];
		$pg = (int)$param['param']['pg'];

		$array = oo::friends()->getRankList($mid, $type, $pg, $sid, $unid); //$type: 0好友排行,1本站排行,2全国排行,4区域排行,5积分排行,6财富排行
		$aList = $this->mkFriendList($array, $mid, $sid, $type, $unid);

		$ret['list'] = (array)$aList;
		$ret['type'] = (int)$type;
		$ret['pg'] = (int)$pg;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取名次
	 */
	public function getSelfRank($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];

		$array = array();
		$ret['rank'] = (array)$array;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取经验值
	 */
	public function getMgi($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];

		$aMgi = oo::memberGameinfo()->getMgi($mid); //用户游戏信息

		$aExt['experience'] = (int)$aMgi['experience'];
		$aExt['maxOwnChips'] = (int)$aMgi['maxOwnChips']; //最高拥有钱数
		$aExt['maxWinChips'] = (int)$aMgi['maxWinChips']; //最高赢得钱数
		$aExt['bestCardType'] = (int)$aMgi['bestCardType']; //最高牌类型
		$aExt['bestCards'] = isset($aMgi['bestCards']) ? (string)$aMgi['bestCards'] : "[]"; //最优牌内容(数据库存的是字符串)
		$aExt['gameCount'] = (int)$aMgi['gameCount']; //游戏总局数
		$aExt['gameCountToday'] = 0; //今日游戏总局数
		$aExt['winCount'] = (int)$aMgi['winCount']; //赢的局数
		$aExt['loseCount'] = (int)$aMgi['loseCount']; //输的局数
		$aExt['sngwinCount'] = (int)$aMgi['sngwinCount']; //比赛赢的局数
		$aExt['sngloseCount'] = (int)$aMgi['sngloseCount']; //比赛输的局数
		$aExt['sngr1WinCount'] = (int)$aMgi['sngr1WinCount']; //晋级赛第一轮胜利次数
		$aExt['sngr1LoseCount'] = (int)$aMgi['sngr1LoseCount']; //晋级赛第一轮失败次数(以下类推)
		$aExt['sngr2WinCount'] = (int)$aMgi['sngr2WinCount'];
		$aExt['sngr2LoseCount'] = (int)$aMgi['sngr2LoseCount'];
		$aExt['sngr3WinCount'] = (int)$aMgi['sngr3WinCount'];
		$aExt['sngr3LoseCount'] = (int)$aMgi['sngr3LoseCount'];

		return $this->genRet($mid, $aExt);
	}

	/**
	 * 获取自己在好友中的名次
	 */
	public function getSelfFriendRank($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];

		$array = oo::friends()->getSelfFriendRank($mid);
		$aList = $this->mkFriendList(array(0 => $array), $mid, $sid, 1, $unid);
		$aList[0][26] = $array['mrank'];

		$ret['list'] = (array)$aList;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取某个用户的用户资料
	 */
	public function getUserProfile($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$type = 3;
		$tid = 0;
		$fmid = (int)$param['param']['fmid'];
		$mids = array($fmid);

		$array = oo::friends()->getList($fmid, $type, $tid, $sid, $unid, $mids);
		$aMgi = oo::memberGameinfo()->getMgi($fmid);
		$array[0]['experience'] = (int)$aMgi['experience'];
		$aList = $this->mkFriendList($array, $fmid, $sid, 1, $unid);
		$aList = (array)$aList[0];

		$ret['profile'] = (array)$aList;
		$ret['fmid'] = $fmid;

		return $this->genRet($mid, $ret);
	}

	public function addFriend($param) {
		if(!$this->auth($param, 3)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$mtkey = (string)$param['mtkey'];
		$langtype = (int)$param['langtype'];
		oo::setLang($langtype);

		$ftoid = (int)$param['param']['ftoid'];
		$api = (int)$param['api'];

		$aList0 = oo::friends()->getFriends($mid, '10');
		//如果对方已经在好友列表
		if(array_key_exists($ftoid, $aList0)) {
			$ret['result'] = -5;
			$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[2] : '';
			return $this->genRet($mid, $ret);
		}
		/*if(!PRODUCTION_SERVER) {
			$maxNum = PRODUCTION_SERVER ? 200 : 10;
			if(count($aList0) >= $maxNum) {
				$ret['result'] = -3;
				$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? str_replace('{num}', $maxNum, lang::$mobileAddFirend[0]) : '';
				return $this->genRet($mid, $ret);
			}
			$aList1 = oo::friends()->getFriends($ftoid, '10');
			if(count($aList1) >= $maxNum) {
				$ret['result'] = -4;
				$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[1] : '';
				return $this->genRet($mid, $ret);
			}
		}*/
		$result = oo::friends()->addFriend($mid, $ftoid);

		if($result) {
			$aMember1 = oo::minfo()->getMinfo($mid, array('sitemid', 'sid'));
			$aMember2 = oo::minfo()->getMinfo($ftoid, array('sitemid', 'sid'));
			if((int)$aMember1['sid'] != 79) {
				of::inDolist() && oo::callback()->add("oo::notice()->addList", array($mid, $aMember1['sitemid'], $langtype, $aMember1['sid'])); //加到异步更新队列
			}
			if((int)$aMember2['sid'] != 79) {
				of::inDolist() && oo::callback()->add("oo::notice()->addList", array($ftoid, $aMember2['sitemid'], $langtype, $aMember2['sid'])); //加到异步更新队列
			}
			//ipad添加lc数据上报
			if(of::isRealIpad($api) && isset(oo::$config['api'][$api][1])) {
				$unid = oo::$config['api'][$api][1];
				$cacheKey = okey::mkAddFriendMid($mid);
				ocache::cache()->add($cacheKey, 1, strtotime('tomorrow') - time()); //人数
			}

			# 数据中心统计 add_game_friend 用户增加游戏内好友 针对发起请求用户的统计
			$tmp_friend_num = count(oo::friends()->getFriends($ftoid, '10')); // 目前游戏内好友数量
			$tmp_sta_data = array('uid' => $ftoid, 'platform_uid' => $aMember2['sitemid'], 'friend_num' => $tmp_friend_num, 'add_time' => time(),);
			oo::dc()->sendData(oo::$config['api'][$api][1], 'add_game_friend', $tmp_sta_data);
			# over
			if(oo::mobileConfig()->getSwc($api, 'mbnewbie') || (in_array($api, array(36, 65)) && oo::$config['mbnewbie'] == 1)) { //新手任务专区
				if(oo::mobilenewbie($api)->checkInToTask($mid, _VERSION_) && oo::logs()->limit($mid, 873, $ftoid, 0, true, true)) {
					oo::mobilenewbie($api)->otherTask($ftoid, 6); //同一个好友只计算一次
				}
			}
		}

		$ret['result'] = $result ? 1 : 0; //添加成功为1
		oo::dc()->sendData(_UNID_, 23, array('uid' => $mid, 'lts_at' => time(), 'et_id' => 'activities143'));
		$ret['ftoid'] = $ftoid;
		return $this->genRet($mid, $ret);
	}

	public function deleteFriend($param) {
		if(!$this->auth($param, 3)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$mtkey = (string)$param['mtkey'];
		$ftoid = (int)$param['param']['ftoid'];
		$type = (int)$param['param']['type'];
		oo::setLang((int)$param['langtype']);
		$aList0 = oo::friends()->getFriends($mid, '10');
		//如果对方不在好友列表
		if(in_array($api, array(14, 61, 25, 19, 70, 41)) && (!array_key_exists($ftoid, $aList0))) {
			$ret['result'] = -1;
			$ret['desc'] = property_exists(lang, 'delfriend_fai') ? lang::$delfriend_fai : '';
			return $this->genRet($mid, $ret);
		}

		$result = oo::friends()->deleteFriend($mid, $ftoid, $type, $api == 18 ? 1 : 0);
		$ret['result'] = $result ? 1 : 0; //删除成功为1
		$unid = oo::$config['api'][$param['api']][1];
		$ret['ftoid'] = $ftoid;
		return $this->genRet($mid, $ret);
	}

	public function setCol($param) { //设置用户mother字段
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$mtkey = (string)$param['mtkey'];
		$ctype = (string)$param['param']['ctype'];
		$cvalue = (string)$param['param']['cvalue'];
		$cArray = (array)$param['param']['cArray'];

		// 是否更新用户最近礼物时间
		isset(oo::$config['roomGiftShop']) && (oo::$config['roomGiftShop'] == 1) && ($ctype == 'gifturl2') && oo::gifts()->updateUserGiftTime($mid);

		if(substr($ctype, 0, 2) != '__') { //两个下划线开头的设置为系统保留，玩家不能自行更改
			oo::member()->setCol($mid, $ctype, $cvalue);
		}

		if(!empty($cArray)) {
			foreach((array)$cArray as $v) {
				if(substr($v['ctype'], 0, 2) != '__') { //两个下划线开头的设置为系统保留，玩家不能自行更改
					oo::member()->setCol($mid, $v['ctype'], $v['cvalue']);
					$ctype[] = $v['ctype'];
					$cvalue[] = $v['cvalue'];
				}
			}
		}

		$ret['result'] = 1; //添加成功为1
		$ret['ctype'] = $ctype;
		$ret['cvalue'] = $cvalue;
		return $this->genRet($mid, $ret);
	}

	public function setCols($param) { //设置用户某个字段,主要针对游戏
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$mtkey = (string)$param['mtkey'];
		$cols = (array)$param['param']['cols']; //

		foreach($cols as $k => $v) {
			if(!in_array($k, array('bestCardType', 'bestCards')) || !$v) {
				unset($cols[$k]);
			}
		}
		oo::memberGameinfo()->setCols($mid, $cols);

		$ret['result'] = 1; //添加成功为1
		$ret['cols'] = $cols;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 給出牌型
	 *
	 * @param Mixed $param
	 * @return Mixed
	 */
	public function givePoker($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}

		$aSto = oo::member()->getStorage($param['mid']);
		if(empty($aSto['pokervalid_code'])) {
			return $this->genRet($param['mid'], array());
		}
		$aPoker = explode(',', $aSto['pokervalid_code']);
		shuffle($aPoker);
		return $this->genRet($mid, $aPoker);
	}

	public function setMoney($param) { //给用户送钱0为抽奖
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}

		$api = (int)$param['api'];

		//新增屏蔽66 128
		if(in_array($api, array(57, 80, 85, 87, 88, 110, 66, 128))) { //部分h5屏蔽领取
			return $this->genRet($param['mid'], array());
		}
		if($api > 0 && array_key_exists($api, oo::$config['api'])) { //如果是移动终端用户,不需要输入验证码
			oo::$config['showcode'] = 0;
		}
		oo::setLang((int)$param['langtype']);
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$mtkey = (string)$param['mtkey'];
		$vmid = (int)$param['vmid'];
		$vkey = (string)$param['vkey']; //机器验证
		$vhash = (string)$param['vhash'];

		$stype = (int)$param['param']['stype']; //
		$sflag = (int)$param['param']['sflag']; //
		$sext = (string)$param['param']['sext']; //
		$statsid = (isset(oo::$config['api'][$api]) ? oo::$config['api'][$api][1] : oo::$config['sid']);

		if (oo::mobileConfig()->getSwc($api, 'mContinueConf') || (oo::$config['sid'] == 110 && of::isIphone($api))) { //越南IOS屏蔽每日登陆奖励 已经同步新版连续登录奖励的也不让领
			return $this->genRet($param['mid'], array());
		}

		$aUser = oo::minfo()->getMinfo($mid, array('mstatus', 'sid', 'mactivetime', 'mmoney', 'mbank'), false);
		if (!$aUser['mmoney']) {
			$aUser['mmoney'] = oo::money()->getAvailableMoney($mid);
		}
		if($aUser['mstatus'] == 1) { //如果已经被封号
			$ret['result'] = -1;
			return $this->genRet($mid, $ret);
		}

		if(($aUser['sid'] != 79) && (time() - $aUser['mactivetime'] <= 0) ) { //今天没从移动登录过
			$ret['result'] = -2;
			return $this->genRet($mid, $ret);
		}
		switch($stype) {
			case 0: //验证码领钱
				$bValid = oo::member()->clearValid($mid, $sext);
				$money = oo::daymoney()->setDayMoney($mid);
				if($api > 0 && $money > 0) { //移动端加奖成功标志
					if(oo::$config['sid'] == 57) {
						$mtotal = oo::logs()->limitCount($mid, 606, 1, false);
						$mtotal >= 1 && !oo::daymoney()->status($mid) && oo::logs()->debug(date("Ymd H:i:s") . '| ' . $api . '|' . $mid . '|' . $mtotal, 'V5setMoney.txt');
					}
					oo::daymoney()->status($mid, 1);
				}
				break;
			default: //配合pc新版验证码做清理，干掉客户端走的东东，记录一下
				$ret['result'] = -100;
				oo::logs()->debug(date("Ymd H:i:s") . json_encode($param), 'setMoney_error.txt');
				return $this->genRet($mid, $ret);
				break;
		}
		if($money) {
			$limitHour = oo::logs()->limitCount($vmid, 8, 1, true, 1);
			$limitDay = oo::logs()->limitCount($vmid, 8, 1, true, 0);

			$time = time();
			$cacheKey = "Members|{$vmid}";
			$lastTime = (int)ocache::logwin()->get($cacheKey);
			ocache::logwin()->set($cacheKey, $time, 2 * 60 * 60);

			if(($limitHour > 10) || ($limitDay > 20)) { //该key每小时5个每天20个
				$vtype = 10;
			} else if(($limitHour < 10) && ($time - $lastTime < 30)) {
				$vtype = 11;
			} else if(($limitHour > 10) && ($time - $lastTime < 1 * 60 * 60)) {
				$vtype = 12;
			}
			if($api != 18 && oo::logs()->getIpCount(functions::getip(), true) > 10) { //每小时IP大于10
				$vtype = 14;
				PRODUCTION_SERVER && $money = of::isFacebook($sid) ? $money : 114; //FB不限制
			}
			if(in_array($api, array(21))) {
				$gameCount = oo::memberlog()->getCountByMid($mid, 1); //昨日玩牌数
				$aMgi = oo::memberGameinfo()->getMgi($mid); //用户游戏信息
				$total = (int)$aMgi['gameCount']; //游戏总局数
				if(($gameCount < 1) && ($total < 10)) { //昨日玩牌数小于1  总的游戏局数小于10
					$vtype = 15;
					$money = 10;
				}
			}
		}
		// 这个注释，下面已经有全平台
		// 		in_array( $api, array(17,21,25,28,56)) && (oo::logs()->limitCount($mid, 606, 1)>1) && ($money=0);  //微游戏保证每天每个用户只会领取一次

		if(in_array($api, array(62))) { //安卓英语越南按设备号记录领奖次数
			$ret['device_limit'] = 0;
			$device = oo::deviceloginlog()->cacheGet($mid);
			$device = $device['device_id'];
			$ckey = okey::mkDevMoney($device, $aUser['sid']);
			$num = ocache::mongoTemp()->get($ckey);
			$time = strtotime('tomorrow') - time();
			if($aUser['sid'] == 79) { //游客一个设备号领1次
				if($num >= 1) {
					$money = 0;
					$ret['device_limit'] = 1;
					$ret['result'] = 0;
					return $this->genRet($mid, $ret);
				} else {
					if($money) {
						ocache::mongoTemp()->set($ckey, 1, $time);
					}
				}
			} else {
				if($num >= 2) { //注册账号一个设备号领2次
					$money = 0;
					$ret['device_limit'] = 1;
					$ret['result'] = 0;
					return $this->genRet($mid, $ret);
				} else {
					if($money) {
						empty($num) ? ocache::mongoTemp()->set($ckey, 1, $time) : ocache::mongoTemp()->incr($ckey);
					}
				}
			}
		}

		//设备领奖限制 LIST ID
		$isOpenDev=(of::isRealIphone(_API_) or in_array(_API_,array(44,64,55,32,26,48,52,165,166,174)));
		$isOpenDev =  ($isOpenDev or oo::mobileConfig()->getSwc(_API_,'coDevlimit'));
		if((int)oo::$config['coDevlimit'] == 1 && $isOpenDev && $money && oo::mobileinfo()->deviceLimit(__FUNCTION__, $mid, true) == true) { //法越IPHONE设备领奖被限制
			$ret['result'] = $ret['money'] = 0;
			$ret['error'] = isset(lang::$phoneErrCode[2015]) ? lang::$phoneErrCode[2015] : 'dev limit';
			$ret['devicelimit2'] = 1;
			return $this->genRet($mid, $ret);
		}
		PRODUCTION_SERVER && $money && (oo::logs()->limitCount($mid, 606, 1) > 1) && ($money = 0); // 全平台再使用限定领取次数，按天
		oo::mobileConfig()->getSwc($api, 'devlimitwmode') && oo::misc()->devLimitByWmode($api, $mid, 5, $money); // 发放设备限制
		if($money == 1 ) $money = 0;
		$flag = $money && ($mmoney = oo::logs()->addWin($mid, 5, 0, $money, 'v5setMoney', '', true)); //$mid, $wmode, $wflag, $wchips, $wremark, $wdesc='', $update=0 领取IP每小时小于30个
		if($money) { //加钱成功,写日志
			$abank = oo::bankrupt()->getMptbankruptconf();
			if(($aUser['mmoney'] + (int)$aUser['mbank']) <= $abank['brmoney']) { //破产了
				oo::dc()->sendData($statsid, 23, array('uid' => $mid, 'lts_at' => time(), 'et_id' => 18088, 'sum' => 1));
				oo::dc()->sendData($statsid, 23, array('uid' => $mid, 'lts_at' => time(), 'et_id' => 18090, $money => 1));
			}
		}

		if(!$flag && $aUser && ($stype == 0) && in_array(oo::$config['api'][$api][1], array(81, 128, 139, 146))) { //验证码领钱失败
			$daymoney = oo::dayMoney()->getDayCacheMoney($mid);
			$aStorage = oo::member()->getStorage($mid);
			oo::logs()->debug(var_export(array($api, $mid, date('YmdHis'), $aUser['mmoney'], $aUser['mactivetime'], $mmoney, $bValid, $daymoney, $aStorage, implode('|', (array)$aIpcnt), $money), true), 'setmoney_failed.txt');
		}
		oo::ipexception()->ipexception($mid, functions::getip()); //记录用户的IP异常地址

		//记录连续领取登录奖励次数
		if($stype == 0 && $flag) {
			oo::daymoneylimit()->get($api) && oo::daymoneylog()->add($mid);
		}

		if(oo::mobileConfig()->getSwc($api, 'devlimittips') && $money){//每日登陆设备限制领取次数弹窗
			oo::misc()->setDiviceLimit($api,$mid);
		}

		if($money) {
			if((oo::$config['newcheckin'] == 1) && in_array(oo::$config['sid'], array(101, 103, 104, 124, 110))) { //每周新签到活动签到（西语、德、土、法、阿、越南、葡语,zingme）
				$day = in_array(oo::$config['sid'], array(110, 60)) ? date('N') : date('w'); //越南、葡语,zingme从周一算起
				oo::checkin()->setNewCheckInfo($mid, $day);
			}
		}
		$ret['result'] = 1; //添加成功为1
		$ret['stype'] = $stype;
		$ret['sflag'] = $sflag;
		$ret['sext'] = $sext;
		$ret['money'] = $money * (isset(oo::$config['blowup']) ? oo::$config['blowup'] : 1);
		$ret['mmoney'] = (int)$aUser['mmoney'] + $money * (isset(oo::$config['blowup']) ? oo::$config['blowup'] : 1);
		return $this->genRet($mid, $ret);
	}

	public function getWin($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$api = (int)$param['api'];

		$langtype = (int)$param['langtype'];
		if($mid == 9720 && !PRODUCTION_SERVER){
			$ret['list'][] = lang::$abf['infoupdate'];
		}
		if(oo::$config['mbnewwinlog'] == 1) { //Note：此开关全平台未开启
			$ret = (array)oo::logs()->getMbWinLog($mid, $langtype, $sid);
 			if(!(functions::version_compare($param['version'], '7.0.0') >= 0)){
				foreach ($ret['bag'] as $k=>$v) {
					if($ret['bag'][$k]) {
						$date = date(lang::$userwintime, time());
						$desc = functions::lang(array('str' => lang::$userwin['infoupdate'], 0 => $date));
						$ret['list'][$k] = str_replace('\\', '', $desc);
 					}
				}
			}
			oo::notice()->setUserMessageTime(1, $mid); //设置用户访问时间
			return $this->genRet($mid, $ret);
		}
		oo::setLang($langtype); //设置语言文件
		$aWins = oo::logs()->getWin($mid,20);
		$aList = oo::logs()->mbFilterWin($aWins);
		if(in_array((int)$param['unid'], array(165, 170))) {
			oo::langDiff((int)$param['unid'], (int)$param['langtype'])->setDiff(array('userwintime' => &lang::$userwintime));
		}
		//if( in_array((int)$param['unid'], array(190, 225)) ){
		oo::langDiff((int)$param['unid'], (int)$param['langtype'])->setDiff(array('userwin' => &lang::$userwin));
		//}
		$mtypeOpenRetMoney = !empty(oo::$config['act824_mttJoinArr']) ? (array)explode(',', oo::$config['act824_mttJoinArr']) : array();

		$addMsg = array(); //GREE平台追加wmode信息
		$info = array();
		foreach($aList as $array) {
			$date = date(lang::$userwintime, $array['wtime']);
			$str = '';
			if(oo::$config['sid']==57 && $array['wmode']==23 ){//运营要求补币扣分显示公告信息
				foreach($aWins as $winsInfo){
					if(($winsInfo['wchips'] == $array['wchips']) && ($winsInfo['wmode'] == 16532) && ($winsInfo['wtime']-$array['wtime']<3)){
						$str = $date.'-'.$winsInfo['wremark'].'(หัก '.$winsInfo['wchips'].' ชิป)';break;
					}
				}
			}

			if(!$str){
				$str = oo::logs()->getUserwin($array['wmode']);//获取wmode描述 -- 在mbFilterWin中处理
                if(oo::$config['sid'] == 144 && $array['wmode'] == 649){ //波兰合服 子站点猜手牌的翻译异常
                    preg_match('/\d+$/',$array['wremark'],$match);
                    $room = ! empty($match) ? $match[0] : "110110";
                    $array['wremark'] = functions::lang( array( 'str' => oo::logs()->getUserwin(6481), 0 => $array['wchips'], 1 => $room ) );
                }
				if (strpos($str, '-') === false) { //没有横杠‘-’的语言包直接过滤掉，会导致客户端有空白的消息
					continue;
				}
                if(in_array($array['wmode'],array(1070,634,1067,331,332,1066,1076,1090,1082, 1083)) ){
                    $info[]=oo::logs()->mttWinLogInfo($str,$array,  $param['langtype'], $date);
                    $bag[] = 0;
                    continue;
                }				
				if (strlen($array['wremark']) > 0 &&  strpos($array['wremark'], 'tools:') !== false) {
					$toolsStr = explode('tools:', $array['wremark']);
					$array['wremark'] = '';
					$tools = explode(',', $toolsStr[1]);
					foreach ($tools as $k => $tool) {
						$array['wremark'] .= ($k > 0) ? (" ".lang::$property[(int)$tool][0]) : lang::$property[(int)$tool][0];
					}
				}

				if( (oo::$config['act824_mttJoinopt'] || !empty($mtypeOpenRetMoney)) && in_array($array['wmode'], array(1090)) ){
					$mark = $array['wremark'];
					$mark = explode('|', $mark);
					if(count($mark) < 2) {
						continue;
					}
					$mtype = $mark[0];
					$other = $mark[1];

					$langfixs = oo::$config['language'][$langtype];
					$tips  = oo::$config['mttmatchnew'][$mtype]["tips_{$langfixs}"] ? oo::$config['mttmatchnew'][$mtype]["tips_{$langfixs}"] : (is_array(oo::$config['mttmatchnew'][$mtype]['tips']) ? oo::$config['mttmatchnew'][$mtype]['tips'][0] : oo::$config['mttmatchnew'][$mtype]['tips']);

					$date = date(lang::$userwintime, $array['wtime']);
					$tmp = functions::lang(array('str' => $str, 0 => $date, 1 => $tips));
					$bag[] = 0;
					$info[] = $tmp;
					continue;
				}
				$date = date(lang::$userwintime, $array['wtime']);
				$desc = functions::lang(array('str' => $str, 0 => $date, 1 => $array['wchips'], 2 => $array['wremark']));
			}else{
				$desc = $str;
			}
            if (($array['wchips'] == 1) && oo::mobileConfig()->getSwc($api, 'devlimitwmode') && lang::$nomoney){
                $desc = lang::$nomoney; //达到领取上限
            }
			strlen($desc) > 5 ? $info[] = str_replace('\\', '', trim($desc)) : '';
			if(oo::$config['sendbag']){
				if($array['bagid']){
					$bag[] = $array['bagid'];
				}else{
					$bag[] = 0;
				}
			}

		}
		oo::notice()->setUserMessageTime(1, $mid); //设置用户访问时间

		if(in_array($api, array(30, 31, 33, 34))) { //GREE平台个人信息追加信息（提示即将关服）
			$addMsgDate = date('m月d日', time());
			$addMsg = array(30 => '#0-This version will be closed soon. To continue playing, please download （Boyaa Texas Poker） from Google Play.', 31 => '#0-このバージョンは停止されるとなります。Google Playで（博雅テキサス）をダウンロードしてください', 33 => '#0-This version will be closed soon. To continue playing, please download（Boyaa Texas Poker） from Apple Store.', 34 => '#0-このバージョンは停止されるとなります。Apple Storeで（ボーヤーポーカー）をダウンロードしてください',);
			isset($addMsg[$api]) && array_unshift($info, functions::lang(array('str' => $addMsg[$api], 0 => $addMsgDate)));
		}
		$ret['bag']  = (array)$bag;
		$ret['list'] = (array)$info;
		if($bag)array_multisort($ret['bag'],SORT_DESC, $ret['list']);
		return $this->genRet($mid, $ret);
	}
	public function sendbag($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$bagid = $param['param']['bagid'];
		$api = (int)$param['api'];
        $rcs = array();
		if($bag = ocache::mongoAct()->getAll(oo::logs()->mgtblmbact('sendbag'),array('mid'=>$mid,'bagid'=>$bagid),array('bagid','aid'))){
			$baginfo = explode('|', $bag[0]['bagid']);
			$aid = $bag[0]['aid'] ? $bag[0]['aid'] : 129;
			$ret = oo::bag($aid)->send($mid, (int)$baginfo[1]);
			if(oo::$config['sid'] == 13) oo::logs()->debug($ret, "sendbag.txt");
			foreach ((array)$ret['callback'] as $k =>$v) {
				$rcs['callback'][$k]['name'] = $ret['callback'][$k]['name'];
 				if($ret['callback'][$k]['img'])$rcs['callback'][$k]['img'] = oo::$config['cdn'].'images/bag/'.$ret['callback'][$k]['img'];
 			}
 			if($ret['callback']) ocache::mongoAct()->update(oo::logs()->mgtblmbact('sendbag'),array('mid'=>$mid,'bagid'=>$bagid) ,array('$set' => array('wflag' => 1)));
 		}
		 return $this->genRet($mid, $rcs);

	}
	//获取wmode描述 v2/v5下同时存在
	private function getUserwin($wmode){
		if($wmode > 40000 && oo::$config['ac']){//视为v3活动
			$n = $wmode % 10;
			$id = intval(($wmode - $n - 10000) / 10);
			if($id > 3000){
				$wmode = oo::ac('base')->cfg($id, 'wmode');
				if($wmode && $wmode[$n]) return $wmode[$n];
			}
		}
		$str = lang::$userwin[$wmode];
		return $str;
	}

	public function getFeed($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];

		$ret['list'] = array( //[消息唯一ID,消息类型,消息主体,时间,发起者ID,发起者用户名,额外信息]
			//array(1, 3, '消息', '一小时前', 1, '用户名字', '用户头像'),
			//array(1, 3, '消息', '三天前', 1, '用户名字', '用户头像'),
		);
		return $this->genRet($mid, $ret);
	}

	public function delFeed($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$fids = (array)$param['param']['fids'];

		//删除
		$ret['fids'] = $fids;
		$ret['result'] = 1;
		return $this->genRet($mid, $ret);
	}

	public function setLevel($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$mlevel = (int)$param['param']['mlevel'];

		$result = oo::levels()->setLevel($mid, $mlevel);

		$ret['result'] = $result ? 1 : 0;
		$ret['mlevel'] = $mlevel;
		return $this->genRet($mid, $ret);
	}

	public function valid($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$valid = (string)$param['param']['valid'];

		$result = oo::member()->authValid($mid, $valid);

		$ret['result'] = $result ? 1 : 0;
		$ret['valid'] = $valid;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 设置用户资料需要刷新
	 *
	 * @param array $param
	 * @return array
	 */
	public function setNeedFresh($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];

		oo::member()->setUserInfo($mid, array('mfreshfriends' => 0)); //记录更新好友时间
		$aUser = oo::minfo()->getMinfo($mid, array('mnick', 'micon', 'mbig'));

		$ret['mnick'] = $aUser['mnick'];
		$ret['micon'] = $aUser['micon'];
		$ret['mbig'] = $aUser['mbig'];

		return $this->genRet($mid, $ret);
	}

	/**
	 * 获得用户的medal的所有信息
	 *
	 * @param array $param
	 * @return array
	 */
	public function getMedal($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$tmid = (int)$param['param']['tmid']; //要查询的用户id
		$tmid = (!$tmid = functions::uint($tmid)) ? $mid : $tmid;
		$api = (int)$param['api'];
		$langtype = (int)$param['langtype'];

		if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) {
			oo::$config['newmedal'] = 0;
		}
		$ret = array();
		$ret['medal'] = array_values(oo::medal()->getMedal($tmid));
		$ret['doingmedal'] = oo::medal()->getDoingMedal($tmid);
		$ret['expired'] = array();

		if(isset($param['param']['vers'])) { //返回成就图片地址
			$ret['vers'] = '2012112813'; //后端最新版本
			$ret['imgs'] = array();
			$aMulti = array(13, 57, 67); //版本多语言：泰语、印尼、繁体、日韩
			if(of::isIphone($api)) { //iOS
				$aMdid = array();
				$imgUrl = oo::$config['imagesUrl'] . 'medal/m/ios_' . (in_array(oo::$config['sid'], $aMulti) ? $langtype . '_' . oo::$config['sid'] . '_' : '');
			} else { //Adr
				$aMdid = array(1, 4, 7, 10, 13, 16, 19, 35, 37, 40, 42, 43, 44, 45, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84,);
				$imgUrl = oo::$config['imagesUrl'] . 'medal/m/adr_';
			}
			if($aMdid && $param['param']['vers'] != $ret['vers']) {
				$speMdid = array(35, 37, 40, 42, 43, 44, 45);
				$blowApis = array(147);//修复成就图片不符合有倍率的平台 印尼
				foreach($aMdid as $mdid) {
					$mergePart = (in_array($mdid,$speMdid) && in_array($api, $blowApis)) ?  $api.'_' : '';
					$ret['imgs'][$mdid] = $imgUrl . $mergePart .$mdid. '.png';
				}
			}
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * 获得用户的medal的所有信息
	 *
	 * @param array $param
	 * @return array
	 */
	public function getMedalTop($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$tmid = (int)$param['param']['tmid']; //要查询的用户id
		$tmid = (!$tmid = functions::uint($tmid)) ? $mid : $tmid;

		$aMids = oo::friends()->getFriendsRankIds($tmid, 2);
		$api = (int)$param['api'];
		if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
			oo::$config['newmedal'] = 0;
		}
		$aTopFriend = array();
		$aFriends = oo::minfo()->getFieldsMulti($aMids, array('sitemid', 'mname', 'mnick', 'micon', 'mexp', 'medal'));
		foreach($aFriends as $key => $val) {
			if($aHisMedal = (isset($val['medal']) ? $val['medal'] : oo::medal()->getMedal($val['mid']))) {
				$aTopFriend[] = array('mid' => $val['mid'], 'count' => count($aHisMedal), 'mnick' => $val['mnick'], 'micon' => $val['micon'], 'exp' => (isset($val['mexp']) ? $val['mexp'] : oo::expLevel()->getUserExp($val['mid'])));
				$aSort[] = count($aHisMedal);
			}
		}

		array_multisort((array)$aSort, SORT_DESC, $aTopFriend);

		if(in_array(oo::$config['langtype'], array(1))) {
			$aTop = oo::medal()->getMedalTops();
			$aMids = $aTopAll = array();
			foreach($aTop as $fmid => $count) {
				$aMids[] = $fmid;
			}
			$aTopAllMinfo = oo::minfo()->getFieldsMulti($aMids, array('sitemid', 'mname', 'mnick', 'micon', 'mexp'));
			foreach($aTop as $fmid => $count) {
				$aMember = $aTopAllMinfo[$fmid];
				$aTopAll[] = array('mid' => $fmid, 'count' => $count, 'mnick' => $aMember['mnick'], 'micon' => $aMember['micon'], 'exp' => (isset($aMember['mexp']) ? $aMember['mexp'] : oo::expLevel()->getUserExp($fmid)));
			}
		} else {
			$aTopAll = oo::medal()->getMedalTops();
			$aMids = array();
			foreach($aTopAll as $key => $val) {
				$aMids[] = $val['mid'];
			}
			$aTopAllMinfo = oo::minfo()->getFieldsMulti($aMids, array('sitemid', 'mname', 'mnick', 'micon', 'mexp'));
			foreach($aTopAll as $key => $val) {
				$aMember = $aTopAllMinfo[$val['mid']];
				$aTopAll[$key]['mnick'] = $aMember['mnick'];
				$aTopAll[$key]['micon'] = $aMember['micon'];
				$aTopAll[$key]['exp'] = isset($aMember['mexp']) ? $aMember['mexp'] : oo::expLevel()->getUserExp($val['mid']);
			}
		}

		$ret['top_friend'] = $aTopFriend;
		$ret['top_all'] = $aTopAll;

		return $this->genRet($mid, $ret);
	}

	/**
	 * 用户赢得某个荣誉
	 *
	 * @param array $param
	 * @return array
	 */
	public function earnMedal($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$mdid = (int)$param['param']['mdid'];
		$api = (int)$param['api'];
		if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
			oo::$config['newmedal'] = 0;
		}

		if($param['param']['earnlow'] && ($mdid > 34 && $mdid <= 45)) {
			$aRange = range(34, $mdid);
			$aLow = oo::medal()->earnMedals($mid, $aRange);
			$earnRet = array_pop($aLow);
		} else {
			$earnRet = oo::medal()->earnMedal($mid, $mdid);
			$earnRet = array($mdid, $earnRet['flag'], $earnRet['expadd']);
		}

		$ret = array();
		$ret['mdid'] = $mdid;
		$ret['flag'] = (int)$earnRet[1];
		$ret['expadd'] = (int)$earnRet[2];
		is_array($aLow) && ($ret['lows'] = $aLow);

		return $this->genRet($mid, $ret);
	}

	/**
	 * 用户的奖章计数
	 *
	 * @param array $param
	 * @return array
	 */
	public function medalCount($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$mdid = (int)$param['param']['mdid'];
		$mdcount = (int)$param['param']['mdcount'];
		$api = (int)$param['api'];
		if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
			oo::$config['newmedal'] = 0;
		}
		$flag = oo::medal()->medalCount($mid, $mdid, $mdcount);

		$ret = array();
		$ret['flag'] = (int)$flag;

		return $this->genRet($mid, $ret);
	}

	/**
	 * 获得防沉迷的信息
	 *
	 * @param array $param
	 * @return array
	 */
	public function antiAddicted($param) {
		$mid = (int)$param['mid'];
		if(!$this->auth($param, 0)) {
			return $this->genRet($mid, array());
		}
		if(!$mid) {
			return $this->genRet($mid, array('result' => -1));
		}
		$hasClose = 0; //是否有关闭按钮
		$aUser = oo::minfo()->getMinfo($mid, array('idcard', 'mactivetime'));
		$remindArr = array(1, 2, 3, 4, 5);
		$ret = array('type' => 0, 'dec' => '');
		$api = (int)$param['api'];
		$open = oo::mobileConfig()->getSwitch($api, 'antiAddiction');
		if(!$open || !PRODUCTION_SERVER) { //防沉迷开关
			return $this->genRet($mid, $ret);
		}
		$ret['verifyed'] = !$aUser['idcard'] ? 0 : 1;
		$now = time();
		if(oo::verify()->isAdult($mid)) {
			return $this->genRet($mid, $ret);
		} else {
			$playtime = oo::membertable()->getPlayTime($mid, 0);
			$playtime >= 300 && ($aV = oo::verify()->getOuttime($mid)); //获取某用户的防沉迷离线时间
			if($now - $aV['outtime'] >= 300 * 60) {
				$playtime -= (int)$aV['count'] * 300;
			} elseif($aV['count']) {
				$playtime -= ((int)$aV['count'] - 1) * 300;
			}
			$playHours = intval($playtime / 60);
			$ret['next'] = 0;
			foreach($remindArr as $k => $v) {
				if($playtime < $v * 60) {
					$ret['next'] = (60 * ($remindArr[$k] - intval($remindArr[$k - 1])) - $playtime % 60) * 60;
					break;
				}
			}
			$loginTime = $aUser['mactivetime'];
			$last = array_pop($remindArr);
			$last2 = array_pop($remindArr);
			if($now - $loginTime < 60 && $playHours >= $last) {
				$ret['type'] = 3;
				if($aUser['idcard']) {
					$ret['dec'] = "您的账号已经被验证为：未成年人账号，根据防沉迷政策，建议您休息五小时后再来！";
				} else {
					$ret['dec'] = '账号未通过未成年人防沉迷验证，建议您进行验证或休息五小时后再来！';
				}
				return $this->genRet($mid, $ret);
			}
			if(($now - $loginTime <= 10) && !$aUser['idcard']) { //未填写信息用户登录
				$ret['type'] = 4 + $hasClose;
				return $this->genRet($mid, $ret);
			}
			if($playHours >= $last) {
				$ret['type'] = 2;
				$ret['dec'] = "您已累计在线{$last}个小时，为了您的身心健康请立即下线，直到下线时间超过5个小时才能恢复正常登录，谢谢合作！";
				oo::verify()->getOuttime($mid, time());
			} elseif($playHours >= $last2) {
				$remain = $last - $last2;
				$ret['type'] = 1;
				$ret['dec'] = "您累计在线时间已满{$playHours}小时，为了您的健康，请您立即下线休息，否则身体可能将受到损害且{$remain}小时后您将会被强制下线！";
			} elseif($playHours >= array_pop($remindArr)) {
				$ret['dec'] = "您累计在线时间已满{$playHours}小时，为了您的健康，请您立即下线休息，否则身体可能将受到损害！";
				$ret['type'] = 1;
			} else {
				if($playHours >= 1) {
					$ret['dec'] = "您累计在线时间已满{$playHours}小时。";
					$ret['type'] = 1;
				} else {
					$ret['type'] = 0;
				}
			}
		}
		return $this->genRet($mid, $ret);
	}

	/*
	 * 防沉迷提交身份证信息
	 */
	public function submitIdcard($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		if(!$mid) {
			$ret['result'] = -1;
			$ret['dec'] = '用户帐号错误';
			return $this->genRet($mid, $ret);
		}
		$idcard = $idcard = addslashes(trim($param['param']['idcard']));
        //由于客户端传的是name参数，所以做下兼容  samluo
		$realname = isset($param['param']['relname'])?$param['param']['relname']:$param['param']['name'];
		$aUser = oo::minfo()->getMinfo($mid, array('idcard'));
		if(strlen($aUser['idcard']) && $aUser['idcard']) { //是否提交过正确的身份证信息
			$ret['result'] = -2;
			$ret['dec'] = '您已经提交过身份证信息';
			return $this->genRet($mid, $ret);
		}
		if(!functions::checkIdCard($idcard)) { //身份证号码没有通过验证
			$ret['result'] = -3;
			$ret['dec'] = '对不起，您提交的信息有误，请重新提交';
			return $this->genRet($mid, $ret);
		}
		oo::minfo()->set($mid, array('realname' => $realname, 'idcard' => $idcard));
		$ret['result'] = oo::verify()->isAdult($mid) ? 1 : 0;
		$ret['dec'] = ($ret['result'] == 1) ? '谢谢您。您已年满18岁，验证成功。祝您游戏愉快' : '对不起，您未满18岁，请在游戏中合理安排时间，不要沉迷游戏。';
		return $this->genRet($mid, $ret);
	}

	/**
	 * apple用户一键登录
	 *
	 * @param Mixed $param
	 * @return Mixed
	 */
	public function oneKeyLogin($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('desc'=>'参数auth验证失败'));
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$vmid = (int)$param['vmid'];
		$vkey = (string)$param['vkey']; //机器验证
		$langtype = (int)$param['langtype'];
		$nick = empty($param['param']['nick']) ? '' : trim($param['param']['nick']);
		$token = (string)$param['param']['token']; //可以去fb认证的access token,https://graph.facebook.com/me?access_token=xxxxxxxx
		empty($param['param']['APNSToken']) && !empty($param['param']['apnstoken']) && ($param['param']['APNSToken'] = $param['param']['apnstoken']);

        oo::logs()->debug(array('oneKeyLogin',$mid,$api,$param['version']),'v5_create.debug');
		$appid = (int)$param['param']['appid'];
		$appkey = (string)$param['param']['appkey'];
		$is_overseas = (int)$param['param']['is_overseas'];
		$time = time();
		$hasfr = (int)$param['param']['hasfr'];
		$sid = 79;
		oo::setLang($langtype);
		
		if(in_array(oo::$config['sid'], array(57, 144))) { //泰语封啥印尼IP
			$bDeny = include_once(PATH_INC.'checkipblacklist.php');
			if($bDeny) {
				$ret['result'] = 0;
				$ret['errorCode'] = 2014;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret);
			}
		}
		if(of::isTV($api)){//电视机差异化语言包
			oo::langDiff(_UNID_, _LANGTYPE_)->setDiff(array('phoneErrCode' => &lang::$phoneErrCode));
			$isTV = 1;
		}

		//从V5登录的英语用户记录日志并不让登录，直到act913开关关闭金钱加倍结束才让登
		/*if(BY::isOpen('act913') && in_array($api,array ( 6 => 6, 7 => 7, 2 => 2, 5 => 5, 12 => 12, 13 => 13, 16 => 16, 26 => 26, 43 => 43, 45 => 45, 100 => 100, 101 => 101, 113 => 113, 137 => 137, 155 => 155, 180 => 180, 189 => 189 ))){
			oo::logs()->debug(date("Y-m-d H:i:s").'----oneKeyLoginDie:'.  json_encode($param), 'EN_PREVENT_LOGIN.log');
			$result = array('sys' => array(oo::$config['xml'], 1), 'time' => time(), 'ret' => array(), 'flag' => -404);
			return $result;
		}*/

		if(($api == 22) && (functions::version_compare($param['version'], '3.9') <= 0)) { //Android繁体禁止x版本及以下 再进入游戏
			$ret['result'] = 0;
			$ret['aUser'] = array('-22');
			$ret['errorCode'] = -2;
			$ret['dec'] = 'ID:-22 ' . lang::$phoneErrCode[1001];
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'ver' => $param['version'], 'lts_at' => $time, '10011' => 1)); //全局错误码：10011
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}
        if (oo::mobileConfig()->getSwc($api,'stopLogin')) {//限制特定版本的客户端无法登陆
            $ret['result'] = 0;
            $ret['aUser'] = array('-2023');
            $ret['dec'] =  ' '.str_replace(' ','_',lang::$phoneErrCode[2023]);;
            $ret['errorCode'] = -2;
            return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
        }

		//禁止高版本的用户通过此接口登录，防刷处理-JsonChen
		if( !of::isTV($api) && (oo::$config['sid'] == 117) && (functions::version_compare($param['version'], '6.0.0') >= 0)) { 
			$ret['result'] = 0;
			$ret['aUser'] = array('-22');
			$ret['errorCode'] = -2;
			$ret['dec'] = 'ID:-22 ' . lang::$phoneErrCode[1001];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		if(of::isIphone($api) || in_array($api, array(1, 2, 4, 5, 7, 13, 30, 31, 33, 34, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55))) { //ipad旧版关闭注册和登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-16');
			$ret['errorCode'] = 1005;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		//ip黑名单检测
		if(!in_array(oo::$config['sid'], array(13, 93, 101)) && !oo::black()->check(oo::$config['api'][$api][1])) {
			$ret['result'] = 0;
			$ret['aUser'] = array('-17');
			$ret['errorCode'] = 1001;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'lts_at' => $time, '10012' => 1, 'ip' => functions::getip())); //全局错误码：10012
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}
		$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);
		if(oo::$config['sid'] == 143 && of::isBoyaaIp() && of::isIphone($api)){
			ocache::mongoTemp()->hSet("onekeyloginCheck",time(),array('api'=>$api,'aDev'=>$aDecryptData));
		}
		if(isset(oo::$config['clientHttpVerifyConfig'][$api]) && (!$aDecryptData || ((!of::isIphone($api) || $aDecryptData[1]) && !oo::logs()->chkBandDevice($aDecryptData[1], in_array($api, array(14, 20)) ? $aDecryptData['macAddr'] : null)))) { //对设备号进行检查，如果在被封队列中，不允许注册登录或一键登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-15');
			$ret['errorCode'] = 1001;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'lts_at' => time(), '10013' => 1)); //全局错误码：10013
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		if(oo::$config['openMguest']) {
			$tmid = oo::mguest()->login($aDecryptData);
			if($tmid === false) {
				$ret['result'] = 0;
				$ret['errorCode'] = -2013;
				$ret['dec'] = $ret['msg'] = lang::$phoneErrCode[2013];
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'lts_at' => $time, '10014' => 1)); //全局错误码：10014
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$aUser = oo::member()->getOneById($tmid, false);
			if ($tmid && (!$aUser)){
				$ret['result'] = 0;
				$ret['errorCode'] = -9999;
				$ret['dec'] = 'FATAL ERROR.';
				return $this->genRet($mid,$ret,$this->_getClientVersion($api, $param['version']));
			}
		} else {
			if(!$aAppleUser = oo::members_iphone()->oneKeyLogin($aDecryptData)) {
				$ret['result'] = 0;
				$ret['msg'] = lang::$user_register_failed; //註冊失敗
				$ret['errorCode'] = 1006;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$aUser = oo::member()->getOneBySitemid($aAppleUser['sitemid'], $sid);
		}

		$statsid = oo::$config['api'][$api][1] > 0 ? oo::$config['api'][$api][1] : $sid; //用于统计注册人数的sid
		$regCounted = false;

		/*以下是数据中心要的数据, 用来注册统计和登录统计*/
		$dNeedData = array();
		$dNeedData['m_dtype'] = $aDecryptData['dtype']; // 手机机型
		$dNeedData['m_imei'] = $aDecryptData['udid']; // 手机设备号
		$dNeedData['m_pixel'] = $aDecryptData['pixel']; // 手机机屏大小
		$dNeedData['m_os'] = $aDecryptData['iOSType'] . $aDecryptData['iOSVer']; // 手机设备，终端操作系统
		$dNeedData['m_network'] = $aDecryptData['network']; //手机设备接入方式，比如wifi
		$dNeedData['m_operator'] = $aDecryptData['operator']; //运营商
		/*数据结束*/
		if($aUser){
			if(oo::$config['open_SavetyLimit']){
				$login_checkret = oo::safetylimit()->allowLogin($api,_LANGTYPE_);
				if(!$login_checkret['result']){
					$ret['result'] = 0;
					$ret['aUser'] = array('-22');
					$ret['errorCode'] = -2;
					$ret['dec'] = 'ID:-22 ' . $login_checkret['tip'];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
			}
		}
		if(!$aUser) { //该用户不存在
            if(oo::mobileConfig()->getSwc($api, 'stopReg') || ($api == 29 && in_array(_VERSION_ ,array('6.1.3', '5.9.2')))){
				$dec = lang::$phoneErrCode[2000];
				in_array($api,array(61,65)) && $dec = lang::$phoneErrCode[2024];
                return array(
                    'mid'=>-6,
                    'dec'=>$dec,
                    'mtkey' => '', 
                    'vkey' => ''
                );
            }
			//禁止新浪玩家通过此老接口注册游客账号
			if(!of::isTV($api) && oo::$config['sid'] == 117) { 
				$ret['result'] = 0;
				$ret['aUser'] = array('-22');
				$ret['errorCode'] = -2;
				$ret['dec'] = 'ID:-22 ' . lang::$phoneErrCode[1001];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			//新防刷系统，上面的注册限制先关掉,JsonChen
			if (oo::$config['open_SavetyLimit']) {
				$safetyRet = oo::safetylimit()->allowReg($api, 2,_LANGTYPE_,null,null);
				if (!$safetyRet['result']) {
					$ret['result'] = 0;
					$ret['aUser'] = array('-22');
					$ret['errorCode'] = -2;
					$ret['dec'] = 'ID:-22 ' . $safetyRet['tip'];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
			}
			//人人 繁体 新浪 146 添加cms管理是否关闭注册
			if(in_array(oo::$config['sid'], array(13, 117, 999)) && oo::mobileConfig()->closeGuestReg($api)) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-6');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			//检查游客注册配置
			if(oo::$config['enableGuestRegCode'] && ($ver = oo::guestRegSetting()->get($api))) {
				if(($cnt = oo::logs()->limitCount(1, 713, 0, true, 1, 3600)) === PHP_INT_MAX) { //非正常存取
					$ret['result'] = 0;
					$ret['aUser'] = array('-23');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				//超过限制数量将启用验证码
				if($cnt >= oo::guestRegSetting()->getLimitPerHour()) {
					//不支持显示验证码的客户端
					if(functions::version_compare($param['version'], $ver) < 0) {
						$ret['result'] = 0;
						$ret['aUser'] = array('-20');
						$ret['errorCode'] = 2000;
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
						//要求输入验证码
					} elseif(empty($param['param']['verifyCode'])) {
						$ret['result'] = 0;
						$ret['aUser'] = array('-21');
						$ret['errorCode'] = 2001;
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
						$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(1, $aDecryptData[1]); //验证码图片地址
						return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
						//判断验证码是否正确
					} else {
						//验证码错误
						$code = oo::guestRegCode()->get(1, $aDecryptData[1]);
						if(!$code || strtolower($param['param']['verifyCode']) != $code) {
							oo::guestRegCode()->del(1, $aDecryptData[1]);
							$ret['result'] = 0;
							$ret['aUser'] = array('-22');
							$ret['errorCode'] = 2002;
							$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
							$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
							$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(1, $aDecryptData[1]); //验证码图片地址
							return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
							//验证码正确 删除验证码
						} else {
							//临时添加计数
							ocache::kvs()->add(okey::mkMobileTmpRegCount(), 1);
							oo::guestRegCode()->del(1, $aDecryptData[1]);
						}
					}
				}
				oo::logs()->limitCount(1, 713, 1, true, 1, 3600);
			}

			if(oo::logs()->getIpCount(($sIp = functions::getip()), true) > 10) { //每小时IP大于10
				$ret['result'] = 0;
				$ret['aUser'] = array('-7');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'lts_at' => $time, '10015' => 1, 'ip' => $sIp)); //全局错误码：10015
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			// 注册按规则限制（设备ID，IP，网段）
			if (oo::mobileConfig()->getSwc($api, 'reglimit') && !$reglimitFlg = oo::misc()->regLimit($aDecryptData, false)) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-7');
				$ret['errorCode'] = -2;
				$ret['dec'] = lang::$phoneErrCode[1003];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			// 每日注册人数限制 同IP段（前两段）每日注册
			if ( oo::mobileConfig()->getSwc($api, 'regnewlimit', 0, $appid) && (!oo::misc()->regNewLimit(array('appid'=>$appid)))){
				$ret['result'] = 0;
				$ret['aUser'] = array('-7');
				$ret['errorCode'] = -3;
				$ret['dec'] = lang::$phoneErrCode[1003];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			if(oo::$config['openMguest'] && (!$aAppleUser['sitemid'] = oo::mguest()->genSitemid())) { //sitemid生成失败
				$ret['result'] = 0;
				$ret['msg'] = lang::$user_register_failed; //註冊失敗
				$ret['errorCode'] = 1006;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$info['sid'] = $sid;
			$info['sitemid'] = $aAppleUser['sitemid'];

			if($isTV && oo::mobileConfig()->getSwc($api, 'TVRandomName')){//电视机后端生成随机名
				$info['mnick'] = oo::member()->TVGetRandomName();
			}else{
				$info['mnick'] = !empty($nick) ? mysql_escape_string($nick) : (property_exists('lang', 'guestNickPrefix') ? lang::$guestNickPrefix : 'GUEST_') . mt_rand(10000, 100000); //昵称
			}

			$info['mname']	= $info['mnick'];
			$aUser['micon'] = oo::$config['imagesUrl'] . 'apple-guest-s.png';
			$aUser['mbig']	= oo::$config['imagesUrl'] . 'apple-guest-b.png';
			$info['mgender']= 2;

			$info['mmoney']	= ($tmChanRegRewp = oo::mobileConfig()->getSwc($api,'chanRegRew',0,$appid)) ? $tmChanRegRewp : oo::$config['firstin'];
			$info['stat_sid'] = $info['unid'] = $statsid; //用于统计注册人数的sid

			/*以下是数据中心要的数据*/
			$info['dNeedData'] = $dNeedData;
			/*数据结束*/

			ocache::$acache['clientVersion'] = $param['version'];
			$aUser = oo::member()->insert($info); //则先添加入，此为注册用户行为
			if(is_array($aUser) && $aUser['mid']) { // Chair 发送注册成功信息到数据中心
				oo::$config['openMguest'] && oo::mguest()->addLogin($aUser['mid'], $aDecryptData['vid'], $aDecryptData['macAddr'], $aDecryptData[1]);
			} else { // Chair 注册失败上报数据中心
				$ret['result'] = 0;
				$ret['aUser'] = array('-99');
				$ret['errorCode'] = 1002;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$regCounted = true;
		}	
		if($api == 15) {
			$mkiphonechargeKey = okey::mkiphonecharge($aDecryptData[1]);
			$isGetMoney = ocache::kvs()->get($mkiphonechargeKey);
			!$isGetMoney && ocache::kvs()->put($mkiphonechargeKey, 1) && oo::logs()->addWin($aUser['mid'], 0, 0, 300000, 'iphone收费版首次进入共送30W', 'iphone收费版首次进入共送30W', true);
		}

		if($aUser['mstatus'] == 1) {
			if(isset($aUser['mver']) && $aUser['mver'] != 0 && $aUser['mver'] < time()) { //临时封号已到期
				oo::member()->setMstatus($mid, 10); //解封
				oo::sysnotice()->addSysNotice($mid, '解封api-v5-Member', '解封', 0, 1);
			} else {
				//临时封号和永久封号返回不一样的描述
				if(isset(lang::$phoneErrCode[2016]) && isset(lang::$phoneErrCode[2017])) {
					if($isTV){//电视机差异化语言包
						$ret['dec'] = (int)$aUser['mver'] ? sprintf(lang::$phoneErrCode[2016], $aUser['mid'], date(lang::$userwintime, $aUser['mver'])) : sprintf(lang::$phoneErrCode['2017'], $aUser['mid']);
					}else{
						$ret['dec'] = (int)$aUser['mver'] ? sprintf(lang::$phoneErrCode[2016], date(lang::$userwintime, $aUser['mver'])) : lang::$phoneErrCode['2017'];
					}
				} else {
					if(in_array(oo::$config['sid'],array(57,124))){
						$noticeStr = ocache::mongoBase()->get('NOTICE|'.$aUser['mid']);
						$noticeStr && $tmpNotice = explode('|', $noticeStr);
						if($tmpNotice && $tmpNotice[1]) {
							$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . $tmpNotice[1];
						}else{
							$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . lang::$phoneErrCode[1001];
						}
					}else{
						$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . lang::$phoneErrCode[1001];
					}
				}
				$ret = array_merge((array)$ret, array('result' => 0, 'aUser' => array('-990'), 'errorCode' => -2));
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $aUser['mid'], 'lts_at' => $time, '10016' => 1)); //全局错误码：10016
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		}
		$logStatus = $this->_loginCheckValid($ret, $aUser, $param, $api);
		if(!$logStatus) return $ret;
		oo::member()->logUserDevice($aUser['mid'], $aDecryptData[1], $aDecryptData['macAddr'], $aDecryptData['vid']);

		if(oo::$config['openMguest'] && ($aUser['mactivetime'] < strtotime('today', $time))) { //一天更新一次登录信息
			oo::udp()->send(5026, $aUser['mid'], $aDecryptData['vid'], $aDecryptData['macAddr'], $aDecryptData[1]);
		}
		($aUser['unid'] != $statsid) && ($aUser['unid'] = $statsid) && (oo::member()->update($aUser['mid'], array('unid' => $statsid))); //用于分应用统计

		oo::logs()->limit($aUser['mid'], 116, 1, 0);

		oo::expLevel()->init($mid, $aUser); //由原来oo::membertable()->insert移动至此
		list($aInfo['mtkey'], $aInfo['tid'], $aInfo['mtstatus']) = oo::membertable()->insert($aUser['mid'], $statsid, $aUser['unid'], $aUser['mvip'], $aUser['mstatus'], 0, true);

		if(isset($param['protocol']) && $param['protocol'] == 1) {
			$array = $this->_getServerIpAndPort($api, $aInfo['tid'], $aUser['mid'], $param['version']);
			$aInfo = array_merge($aInfo, $array);
			$aInfo['checkPhotoUpload'] = 1;
			$aInfo['photoUploadSize'] = 500 * 1024;
		}

		$aInfo['vkey'] = md5('123'); //functions::genVkey( $aUser['mid'], ''); //生成机器码
		if(in_array($api, array(1, 2, 14, 19, 20, 25, 28))) {
			include(PATH_LIB . 'mobile/class.paylimit.php');
			$aInfo['payscore'] = (($api == 1 || $api == 2) ? -10 : Paylimit::test($api, $aUser['mid'], 0, 105, $aDecryptData[1], $aDecryptData['isJailbreak']));
		} else {
			$aInfo['payscore'] = 1000; //该用户的信用值
		}
		$ret['result'] = 1;
		$aInfo['registed'] = 0;

		$ret['aUser'] = array_merge($aUser, $aInfo);

		//iPhone中文繁体版加推送功能
		oo::$config['newClientNotify'] && $param['param']['APNSToken'] && oo::devicetoken()->add($aUser['mid'], $api, $param['param']['APNSToken'], $param['langtype'], $param['param']['APNSSetting'], $aDecryptData['isJailBreak']);
		if($appid) { //上报渠道推广平台
			$regCounted && oo::andrstart()->androidPromo($aUser['mid'], 3, 1, array('appid' => $appid, 'appkey' => $appkey, 'is_overseas' => $is_overseas), true);
			oo::andrstart()->androidPromo($aUser['mid'], 2, 1, array('appid' => $appid, 'appkey' => $appkey, 'is_overseas' => $is_overseas), true); //上报android推广平台
		}
		$ret['voiceSession'] = md5('voice_texas' . $config['sid'] . date('Ymd', $time) . $mid);
		isset($param['param']['APNSToken']) && $aData['APNSToken'] = $param['param']['APNSToken'];
		$aData && oo::mobileinfo()->set($mid, $aData);
		oo::mobileinfo()->saveHeader($aUser['mid'], 2, $aDecryptData, $api);
		oo::dc()->sendData($statsid, 3, array_merge($dNeedData, array( //登陆统计上报数据
			'uid' => $aUser['mid'], 'first_at' => $aUser['mtime'], 'platform_uid' => $aUser['sitemid'], 'login_at' => $time, 'ip' => functions::getip(), 'longitude'=>$aUser['longitude'],'latitude'=>$aUser['latitude'], 'user_agent' => $_SERVER['HTTP_USER_AGENT'], 'entrance_id' => 1, 'user_gamecoins' => $aUser['mmoney'], 'version_info' => $param['version'])));

		if(oo::$config['sid'] == 143 && of::isBoyaaIp() && of::isIphone(_API_)){
			ocache::mongoTemp()->hSet("onekeyloginCheck",time(),array('api'=>$api,"ret"=> json_encode($ret)) );
		}
		return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
	}

	/**
	 * 获取新排行榜所要数据
	 *
	 * @param Array $param
	 * @return Mixed
	 */
	public function getNewRank($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid']; //登录用户的mid
		$api = (int)$param['api'];
		$version = (float)$param['version'];
		$tmid = (int)$param['param']['mid']; //和mid区分，这个是要读取用户的资料mid
		$sid = (int)$param['param']['sid'];
		$unid = (int)$param['unid'];
		$type = (int)$param['param']['type'];
		$langtype = (int)$param['langtype'];
		$isFacebook = of::isFacebook($sid);

		switch($type) {
			case 0: //好友包括自己
				$aList = oo::friends()->getList($tmid, 4, 0, $sid, $unid, 0);
				$aList[] = oo::minfo()->getMinfo($mid, array('mname', 'micon2', 'micon3', 'mbloodtype', 'mnick', 'sid', 'micon', 'mmoney', 'mvip', 'sitemid', 'mpage', 'mactivetime', 'mprivilege', 'mexp', 'mhasicon', 'mhometown',));
				break;
			case 1: //黑名单
				$aList = oo::friends()->getList($tmid, 5, 0, $sid, 0, 0);
				break;
			case 2: //金币排行
				$aList = oo::friends()->getRankList($tmid, 2, 0, $sid, 0);
				break;
			case 3: //等级排行
				$aList = oo::friends()->getRankList($tmid, 5, 0, $sid, 0);
				break;
			case 4: //区域排行
				$aList = oo::friends()->getRankList($tmid, 4, 0, $sid, 0);
				break;
			default:
				break;
		}
		if(!($aList && is_array($aList))) { //没有数据
			$ret['result'] = 3;
			$ret['type'] = $type;
			$ret['list'] = array();
			return $this->genRet($mid, $ret);
		}

		$langFix = oo::$config['language'][$langtype];
		if(!oo::$config['openExpLevelV2'] && is_file(PATH_CFG . 'config.newexp.' . $langFix . '.php')) { //用于获取等级名字
			include(PATH_CFG . 'config.newexp.' . $langFix . '.php');
			oo::setConfig($config);
		}
		if(!oo::$config['openExpLevelV2'] && oo::$config['openExpLevel'] && file_exists( PATH_CFG . "config.exp.{$langFix}.php" ) ){
			include( PATH_CFG . "config.exp.{$langFix}.php" );//经验等级v1
			oo::setConfig( $config );
		}elseif(oo::$config['openExpLevelV2'] && file_exists( PATH_CFG . "config.expV2.{$langFix}.php" )){
			include( PATH_CFG . "config.expV2.{$langFix}.php" );//经验等级v2
			oo::setConfig( $config );
		}

		$aRet = $aSort = $aTid = array();
		foreach($aList as $k => $v) {
			$aRet[$k][0] = (int)$v['mid'];
			$aRet[$k][1] = (string)$v['mnick']; //昵称
			$aRet[$k][2] = of::isFacebook($v['sid']) ? "https://graph.facebook.com/{$v['sitemid']}/picture" : (string)$v['micon']; //小头像
			if(!strlen($aRet[$k][1])) {
				unset($aRet[$k]);
				continue;
			}
			$aRet[$k][3] = (int)$v['mmoney']; //资产
			$aRet[$k][4] = of::isFacebook($v['sid']) ? "http://www.facebook.com/{$v['sitemid']}" : ($sid == $v['sid'] ? (string)$v['mpage'] : ''); //个人主页
			$aRet[$k][5] = $v['mvip'] > 0 ? ($v['mother']['showVip'] > 0 ? 0 : (int)$v['mvip']) : 0; //vip等级
			$aRet[$k][6] = ($type == 0) && $isFacebook && ($v['mid'] != $mid) ? 1 : 0; //是否可赠送金币，0不可赠送1可赠送
			$aRet[$k][7] = is_array(ocache::$acache['getList'][$v['mid']]) ? (int)ocache::$acache['getList'][$v['mid']][0] : -1; //桌子ID
			$aRet[$k][8] = $v['mactivetime']; //最后登录时间
			$aRet[$k][9] = (int)$v['mprivilege']; //用户等级
			$aRet[$k][10] = (int)$v['sitemid']; //平台用户ID
			$aRet[$k][11] = (int)ocache::$acache['getFriends'][$mid][$v['mid']][0]; //是否牌友
			if(oo::$config['sid'] == 117) {
				$exp = isset($v['mexp']) ? $v['mexp'] : oo::expLevel()->getUserExp($v['mid']);
				$level = oo::expLevel()->getLevelByExp($exp);
				$level_name = oo::$config['newexp'][$level][1];
				$exp_curr = (int)oo::$config['newexp'][$level][0];
				$exp_next = (int)oo::$config['newexp'][$level + 1][0];
				$aRet[$k][12] = array($exp, $level, $level_name, $exp_curr, $exp_next);
				$aRet[$k][13] = in_array($v['mbloodtype'], array(200, 220)) ? 1 : $v['mhasicon']; //微游戏sina V认证用户 微博达人
				$aRet[$k][14] = in_array($v['mbloodtype'], array(200, 220)) ? '新浪微博达人' : $v['mhometown']; //微游戏sina V用户认证信息
				$aRet[$k][15] = $v['mbloodtype']; //微游戏sina v用户类型 //加V对应关系:  0- 名人；1-政府；2-企业；3-媒 体；4-校园；5-网站；6-应用 ; 7-团体（机构）;  //达人的对应关系: 200 - 待审核达人 ;  220 - 通过审核的达人
			}
			if(($langtype != 1) || (oo::$config['sid'] == 93) || (in_array($api, array(2, 20, 24, 28, 38, 43)))) {
				$exp = isset($v['mexp']) ? $v['mexp'] : oo::expLevel()->getUserExp($v['mid']);
				$level = oo::expLevel()->getLevelByExp($exp);
				$level_name = oo::$config['newexp'][$level][1];
				$exp_curr = (int)oo::$config['newexp'][$level][0];
				$exp_next = (int)oo::$config['newexp'][$level + 1][0];
				$aRet[$k][12] = array($exp, $level, $level_name, $exp_curr, $exp_next);
			}

			if(in_array($api, array(2, 20, 24, 28, 38, 43))) { //iPad返回用户游戏状态1旁观2在玩
				($version == '1.0.0') && !in_array($api, array(24, 28, 38, 43)) && $aRet[$k][7] = -1; //兼容ipad新版1.0.0
				$aRet[$k][13] = (int)ocache::$acache['getList'][$v['mid']][1];
				$aRet[$k][14] = -1;
				if($aRet[$k][7] != -1) {
					$aTid[$k] = $aRet[$k][7];
				}
			}

			$aSort[$k] = $type == 2 ? (int)$v['mmoney'] : $v['mactivetime'];
		}

		//批量获取桌子类型
		if(!empty($aTid)) {
			$aTTypes = oo::tables()->getTTypes(); //桌子ID->类型映射
			foreach($aRet as $key => &$item) {
				if(!isset($aTid[$key])) continue;
				$tid = $aTid[$key];
				if(!isset($aTTypes[$tid])) continue;
				$item[14] = $aTTypes[$tid];
			}
		}

		array_multisort($aSort, SORT_DESC, $aRet);

		$ret['result'] = 1;
		$ret['type'] = $type;
		$ret['list'] = $aRet;

		return $this->genRet($mid, $ret);
	}


	/**
	 * 根据ID获取用户的详细资料
	 *
	 * @param Array $param
	 * @return Mixed
	 */
	public function getDetailRank($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid']; //登录用户的mid
		$sid = (int)$param['sid']; //登录用户的sid
		$unid = (int)$param['unid']; //登录用户的unid
		$tmid = (int)$param['param']['mid']; //和mid区分，这个是要读取用户的资料mid
		$api = (int)$param['api'];
		if(!$tmid) {
			$ret['result'] = 0;
			return $this->genRet($mid, $ret);
		}

		//查询该用户的资料
		$aMember = oo::member()->getOneById($tmid);
		if($aMember) { //如果找到
			$aMgi = oo::memberGameinfo()->getMgi($tmid); //用户游戏信息

			$aExt = array(); //mother权限
			$giftUrl = strlen($aMember['mother']['gifturl2']) > 10 ? (string)$aMember['mother']['gifturl2'] : '';
			$aExt['gifturl'] = $giftUrl; //礼物地址.兼容

			$aExt['showHelp'] = (int)$aMember['mother']['showHelp']; //是否显示比赛场帮助
			$aExt['showVip'] = (int)$aMember['mother']['showVip']; //是否显示VIP标志
			$aExt['sitID'] = (int)$aMember['sid']; //站点ID
			$aExt['sexID'] = (int)$aMember['mgender']; //性别ID (0男1女2保密)
			$aExt['siteAdmin'] = (int)$aMember['mprivilege']; //站点管理
			if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
				oo::$config['newmedal'] = 0;
			}
			$aExt['prize'] = isset($aMember['medal']) ? count($aMember['medal']) : count(oo::medal()->getMedal($tmid)); //当前获得的成就数
			$aExt['totalPrize'] = 0; //'3'; //总奖怀数
			$aExt['diamond'] = oo::usertoolworking()->getUserProps($mid); //钻石数组
			$aExt['diamond'] = $aExt['diamond'][1];
			$aExt['home'] = (string)$aMember['mhometown']; //家乡名称
			$aExt['school'] = ''; //学校名称
			$aExt['sname'] = (string)oo::$config['sites'][min($aMember['sid'], 1001)]; // 站点名字
			$aExt['city'] = (string)$aMember['mlocation']; //城市
			$aExt['association'] = (string)$aMember['mlocation']; //公会

			$aExt['vipLevel'] = $aMember['mvip']; //vip等级.0普通1铜牌2银牌3金牌
			$aExt['homePage'] = $aMember['mpage']; //个人主页
			$aExt['addGameTime'] = date('Y-m-d', $aMember['mtime']); //加入游戏时间
			$aExt['mactivetime'] = date('Y-m-d', $aMember['mactivetime']); //最后登陆时间
			$aExt['mfcount'] = (int)$aMember['mfcount']; //好友数量
			$aExt['experience'] = (int)$aMgi['experience'];
			$aExt['maxOwnChips'] = (int)$aMgi['maxOwnChips']; //最高拥有钱数
			$aExt['maxWinChips'] = (int)$aMgi['maxWinChips']; //最高赢得钱数
			$aExt['bestCardType'] = (int)$aMgi['bestCardType']; //最高牌类型
			$aExt['bestCards'] = isset($aMgi['bestCards']) ? (string)$aMgi['bestCards'] : "[]"; //最优牌内容(数据库存的是字符串)
			$aExt['gameCount'] = (int)$aMgi['gameCount']; //游戏总局数
			$aExt['gameCountToday'] = 0; //今日游戏总局数
			$aExt['winCount'] = (int)$aMgi['winCount']; //赢的局数
			$aExt['loseCount'] = (int)$aMgi['loseCount']; //输的局数
			$aExt['sngwinCount'] = (int)$aMgi['sngwinCount']; //比赛赢的局数
			$aExt['sngloseCount'] = (int)$aMgi['sngloseCount']; //比赛输的局数

			$aExt['privacyControl'] = isset($aMember['mother']['privacyControl']) ? (string)$aMember['mother']['privacyControl'] : '[0,0]'; //隐私设置
			$aExt['userSkillExp'] = $aMgi['userSkillExp'];
			$aExt['sngr1WinCount'] = $aMgi['sngr1WinCount'];
			$aExt['sngr1LoseCount'] = $aMgi['sngr1LoseCount'];
			$aExt['sngr2WinCount'] = $aMgi['sngr2WinCount'];
			$aExt['sngr2LoseCount'] = $aMgi['sngr2LoseCount'];
			$aExt['sngr3WinCount'] = $aMgi['sngr3WinCount'];
			$aExt['sngr3LoseCount'] = $aMgi['sngr3LoseCount'];

			$ret['result'] = 1;
			$ret['mid'] = $tmid;
			$ret['sid'] = (int)$aMember['sid'];
			$ret['unid'] = (int)$aMember['unid'];
			$ret['mmoney'] = (int)oo::money()->getAvailableMoney( $tmid );
			$ret['sngsub'] = (int)$aMember['sngsub'];
			$ret['mlevel'] = (int)$aMember['mlevel'];

			$ret['mvip'] = (int)$aMember['mvip'];
			$ret['mnick'] = (string)$aMember['mnick'];
			$ret['micon'] = (string)$aMember['micon']; // 用户头像(小尺寸)
			$aExt['mbig'] = (string)$aMember['mbig']; // 用户头像(大尺寸)

			$ret['isadult'] = 1; //是否成年
			$ret['canPlay'] = 1; //用户是否可以继续玩
			$aO = oo::membertable()->onlineinfo($tmid);
			$ret['tid'] = $aO['tid'];
			if(oo::$config['pineapple']){
				$ret['pineAppleInfo'] = (array)oo::pineapple()->getMinfo($mid);
			}
			$ret['mother'] = json_encode($aExt);
			return $this->genRet($mid, $ret);
		}
		$ret['result'] = 0;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取小游戏结果
	 *
	 * @param Mixed $param
	 * @return Mixed
	 */
	public function getSmallGameResult($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$mid = (int)$param['mid'];
		$type = (int)$param['param']['type'];
		switch($type) {
			case 1:
				$ret['result'] = rand(1, 6);
				break;
			default:
				$ret['result'] = 0;
				break;
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 獲取用戶最新的博雅幣和金幣
	 *
	 * @param type $param
	 * @return type
	 */
	public function getCoins($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];

		//1,获取自己的信息
		$aUser = oo::minfo()->getMinfo($mid, array('mmoney','mbycoins'), false);
		if(!$aUser) {
			$ret['result'] = 0;
			return $this->genRet($mid, $ret);
		}
		$ret['mbycoins'] = (int)$aUser['mbycoins'];
		$ret['mmoney'] = (int)$aUser['mmoney'];
		$ret['result'] = 1;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取用户的在线情况
	 *
	 * @param Mixed $param
	 * @return Mixed
	 */
	public function getRankStatus($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];
		$aSec = $param['param']['midArr'];
		$i = 0;
		$aOnlineinfo = oo::membertable()->getMultionlineinfo($aSec);
		foreach($aSec as $tmid) {
			$aList = $aOnlineinfo[$tmid];
			$ret[$i][0] = $tmid;
			$ret[$i][1] = $aList['mtstatus'] ? $aList['mtstatus'] : -1;
			$i++;
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 计数器
	 *
	 * @param unknown_type $param
	 */
	public function counter($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$api = (int)$param['api'];
		$cttype = functions::uint($param['param']['cttype']);
		$ctact = (int)$param['param']['ctact'];
		$ctval = (int)$param['param']['ctval'];

		($cttype >= 100) && ($cttype = 99);

		$cttype <= 10 && oo::logs()->limitCount($mid, 29800 + $cttype, $ctval, true, 0, 24 * 60 * 60);

		$csid = min(1000, of::getCSid($sid, $unid));


		$ret['result'] = 1;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取玩家牌局记录
	 *
	 * @param type $param
	 * @return type
	 */
	public function getCardsLog($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];

		$aMgi = oo::memberGameinfo()->getMgi($mid);

		$ret['gameCount'] = (int)$aMgi['gameCount'];
		return $this->genRet($mid, $ret);
	}

	/**
	 * 玩牌在綫獎勵
	 * Newer Members::playReward
	 */
	public function onlineReward($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$aUser = oo::minfo()->getMinfo($mid, array('mvip', 'mpay'));

		if(in_array(oo::$config['sid'], array(60, 67))) { //葡萄牙、印尼强制打开
			oo::$config['openOnlineReward'] = 1;
		}

		if(($aUser['mid'] != $mid)) {
			return $this->genRet($param['mid'], 0);
		}
		$isVip = ($aUser['mvip'] > 0 || $aUser['mpay'] > 0) ? true : false; //区分vip或者付费用户和非RMB玩家

		(in_array($api, array(14, 18))) && $isVip = true; //iphone新版不区分vip和付费用户
		$aRet = oo::member()->onlineReward($mid, true, $isVip, of::getCSid($sid, $unid));
		//iphone繁体 & android腾讯 添加奖励钱数统计
		if(in_array($api, array(14, 18)) && $aRet && $aRet['result'] == 1) {
			$statid = oo::$config['api'][$api][1];
			$cnt = oo::logs()->limitCount($mid, 22, 0, false) - 1;

		}

		return $this->genRet($mid, $aRet);
	}

	/**
	 * 玩牌计时奖励
	 * Older Members::onlineReward
	 */
	public function playReward($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		
		if(oo::mobileConfig()->getSwc($api, 'throttle') 
				&& oo::mobMod('interfacelimit', array($api, $mid))->isLimit(str_replace('::', '.', __METHOD__))){
			return $this->genRet($mid, array('error' => -304));
		}
		
		oo::setLang((int)$param['langtype']);
		$aUser = oo::minfo()->getMinfo($mid, array('mvip', 'mpay', 'unid', 'sid', 'mexplevel', 'mviptime'));
		if($aUser['mid'] != $mid) {
			return $this->genRet($param['mid'], 0);
		}

		oo::$config['openOnlineReward'] = 1; //移动强制打开
		$isVip = (in_array($api, array(18)) || ($aUser['mvip'] > 0 && $aUser['mviptime'] > time()) || ($aUser['mpay'] > 0)) ? true : false; //是否不区分VIP
		$vrate = 1;
		$rate = 0.5;
		if(oo::$config['openNewLuckBox'] && oo::mobileConfig()->getSwc($api, 'baoxiangV1')) {
			$vrate = 2;
			$rate = 1;
			$aRet = oo::member()->playRewardNew($mid, $api);
		} else {
			$aRet = oo::member()->playReward($mid, $api);
		}
		$count = $aRet['count']; //当前第几次
		$money = intval($isVip === true ? $aRet['aReward'][0] * $vrate : $aRet['aReward'][0] * $rate); //非VIP奖钱减半
		$nextMoney = intval($isVip === true ? $aRet['aNextReward'][0] * $vrate : $aRet['aNextReward'][0] * $rate);

		$ddcard = (int)$aRet['aReward'][1];
		$nextDdcard = (int)$aRet['aNextReward'][1];
		unset($aRet['aReward'], $aRet['aNextReward']); //不返回这些

		if(defined('IN_API') && in_array($aUser['unid'], array(115, 129)) && ((PRODUCTION_SERVER === false) || ((oo::$config['sid'] == 13) && (date('Ymd') >= '20121218') && (date('Ymd') <= '20121220')))) { //繁体iOS冬日有约活动三倍
			$money > 0 && $money *= 3;
			$nextMoney > 0 && $nextMoney *= 3;
		}

		if($aRet['result'] == 1) { //领取奖品
			if($money > 0) { //奖钱
				//oo::logs()->addWin($mid, 366, 0, $money, functions::lang(array('str' => lang::$playreward['chip'], 1 => (oo::$config['blowup'] > 1 ? $money * oo::$config['blowup'] : $money))), '', true, true, 82001 + $count);
				oo::mobileConfig()->getSwc($api, 'devlimitwmode') && oo::misc()->devLimitByWmode($api, $mid, 366, $money); // 发放设备限制
				oo::logs()->addWin($mid, 366, 0, $money, '', '', true, true, 82001 + $count);
			}
			if($ddcard && (!$money || oo::mobileConfig()->getSwc($api, 'baoxiangV1'))) { //奖道具
				oo::payment()->delivery(10001, $mid, $ddcard, 1, false);
				$gmoney = ($ddcard == 69) ? 10000 : 25000;
				$gmoney = (oo::$config['blowup'] > 1) ? ($gmoney / oo::$config['blowup']) : $gmoney;
				//		 		in_array( $ddcard, array(69,70)) && oo::logs()->addWin( $mid, 366, 0, $gmoney, lang::$cardlist[$ddcard][0], '', true);
				//		 		(! in_array( $ddcard, array(69,70))) && oo::logs()->addWin( $mid, 366, 0, 1, lang::$cardlist[$ddcard][0], '', false);
				in_array($ddcard, array(69, 70)) ? oo::logs()->addWin($mid, 366, 0, $gmoney, $ddcard, '', true) : oo::logs()->addWin($mid, 366, 0, 1, $ddcard, '', false);
			}

			if($money > 0) { //统计
				$statid = oo::$config['api'][$api][1];

				if(oo::$config['openNewLuckBox'] && oo::mobileConfig()->getSwc($api, 'baoxiangV1')) {
					$aOnline = ocache::gi()->get($mid);
					$aOnline = functions::unserialize($aOnline);
					$aTable = oo::tables()->getTableById($aOnline['tid'], true, array('ttype', 'tblindmin'));
					if(in_array($aTable['ttype'], array(0, 1, 2, 3, 6, 20, 30)) && $aTable['tblindmin']) {
						$aTable['ttype'] == 6 && $aTable['ttype'] = oo::tables()->gettype($aTable['tblindmin'], oo::$config['sid']);
						$aGameData = array('uid' => $mid, 'lts_at' => time(), 'et_id' => 85003, //dc中心的id
						);
						$aGameData['bind_' . $aTable['tblindmin']] = $money;
						$aGameData['type_' . $aTable['ttype']] = $money;
						oo::dc()->sendData($statid, 23, $aGameData);
					}
				}
			}

			//下次奖品
			$aRet['nextMoney'] = (oo::$config['blowup'] > 1) ? $nextMoney * oo::$config['blowup'] : $nextMoney;
			$aRet['nextDdcard'] = $nextDdcard;
			$nextDdcard && $aRet['nextDdname'] = lang::$cardlist[$aRet['nextDdcard']][0];
		}

		$aRet['money'] = (oo::$config['blowup'] > 1) ? $money * oo::$config['blowup'] : $money;
		$ddcard && $aRet['ddname'] = lang::$cardlist[$ddcard][0];
		$ddcard && in_array($ddcard, array(61, 62, 63)) && $ddcard = 64; //互动道具给客户端的ID是64
		$ddcard && in_array($ddcard, array(53, 54, 55)) && $ddcard = 10053; //宝贝表情给客户端的ID是10053;
		$aRet['ddcard'] = $ddcard;
		return $this->genRet($mid, $aRet);
	}

	/**
	 * 请求加为牌友
	 */
	public function friendRequest($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 0);
		}

		$mid = (int)$param['mid'];
		$tmid = (int)$param['param']['tmid'];
		$words = (string)$param['param']['words'];
		$langtype = (int)$param['langtype'];
		oo::setLang($langtype);
		$api = (int)$param['api'];
		$aList0 = oo::friends()->getFriends($mid, '10');
		//如果对方已经在好友列表
		if(array_key_exists($tmid, $aList0)) {
			$ret['flag'] = -2;
			$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[2] : '';
			return $this->genRet($mid, $ret);
		}
		//客户端支持以后才上正式
		/*if(!PRODUCTION_SERVER) {
			$maxNum = PRODUCTION_SERVER ? 200 : 10;
			//用户好友超过限制
			if(count($aList0) >= $maxNum) {
				$ret['flag'] = -1;
				$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? str_replace('{num}', $maxNum, lang::$mobileAddFirend[0]) : '';
				return $this->genRet($mid, $ret);
			}
			//好友的好友数量超过限制
			$aList1 = oo::friends()->getFriends($tmid, '10');
			if(count($aList1) >= $maxNum) {
				$ret['flag'] = -3;
				$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[1] : '';
				return $this->genRet($mid, $ret);
			}
		}*/

		$aMsg = array('type' => 4, 'fmid' => $mid, 'words' => $words, 'time' => time());
		$ret['flag'] = (int)oo::notice()->sendMessage($mid, $tmid, $aMsg);
		if($ret['flag'] == -4) { //重复发送信息
			$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[3] : '';
		}
		if($ret['flag']) {
			(oo::$config['mPushOpen'] == 1) && oo::pushSubmit()->addPushCenter($tmid, 10003, 0);
		} else {
			$ret['desc'] = property_exists(lang, 'mobileAddFirend') ? lang::$mobileAddFirend[4] : '';
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 更新好友资料
	 *
	 * @param Array $param
	 * @return Mixed
	 */
	public function upMemberInfo($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], 'sig faild');
		}
		oo::logs()->debug($param, 'updateminfo.txt');
		$mid = (int)$param['mid'];
		$passwd = empty($param['param']['pwd']) ? '' : md5($param['param']['pwd']);
		$newPwd1 = empty($param['param']['newpwd1']) ? '' : md5($param['param']['newpwd1']);
		$newPwd2 = empty($param['param']['newpwd2']) ? '' : md5($param['param']['newpwd2']);
		$gender = functions::uint($param['param']['gender']); //性别
		$location = empty($param['param']['location']) ? '' : trim($param['param']['location']); //现居地
		$birthday = empty($param['param']['birthday']) ? '' : trim($param['param']['birthday']); //生日
		$icon = empty($param['param']['icon']) ? '' : trim($param['param']['icon']); //头像
		$langtype = (int)$param['langtype'];
		oo::setLang($langtype);

		if(!$mid) {
			return $this->genRet($param['mid'], array('result' => 0, 'desc' => lang::$upMemberInfo[1]));
		}


		$aUser = oo::member()->getOneById($mid);
		if(!is_array($aUser) || empty($aUser['sitemid'])) {
			return $this->genRet($param['mid'], array('result' => 0, 'desc' => lang::$upMemberInfo[2]));
		}

		$aIpUser = oo::member()->iphoneGetOne('', $aUser['sitemid']);

		if(!empty($newPwd1)) {
			if(strcmp($passwd, $aIpUser['mpwd']) !== 0) {
				return $this->genRet($param['mid'], array('result' => 0, 'desc' => lang::$upMemberInfo[3]));
			}
			if(strcmp($newPwd2, $newPwd1) == 0) {
				if(!oo::member()->iphoneUpdate($aUser['sitemid'], array('mpwd' => $newPwd1))) {
					return $this->genRet($param['mid'], array('result' => 0, 'desc' => lang::$upMemberInfo[4]));
				}
			} else {
				return $this->genRet($param['mid'], array('result' => 0, 'desc' => lang::$upMemberInfo[5]));
			}
		}
		$aSet = array();
		if(in_array($gender, array(0, 1, 2))) {
			$aSet['mgender'] = $gender;
		}
		$aSet['mlocation'] = $location;
		$aSet['mbirthday'] = $birthday;

		if(oo::minfo()->set($mid, $aSet)) {
			$aSet['micon'] = $icon;
			oo::member()->update($mid, $aSet);
			$ret['result'] = 1;
			$ret['desc'] = lang::$upMemberInfo[6];
		} else {
			$ret['result'] = 0;
			$ret['desc'] = lang::$upMemberInfo[7];
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * iphone 用户登陆接口
	 * 通过合作站点的用户ID，用户名，头像
	 * 返回本站的该用户的信息
	 */
	public function Create($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('sig failed'));
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$api = (int)$param['api'];
		$sitemid = $param['param']['sitemid'];
		oo::setLang((int)$param['langtype']);
		$sid = in_array($api, array(6, 7, 12, 13)) ? 55 : $sid; //英文版合服的sid为55
		$token = (string)$param['param']['token']; //可以去fb认证的access token,https://graph.facebook.com/me?access_token=xxxxxxxx

		empty($param['param']['APNSToken']) && !empty($param['param']['apnstoken']) && ($param['param']['APNSToken'] = $param['param']['apnstoken']);

		$appid = (int)$param['param']['appid'];
		$appkey = (string)$param['param']['appkey'];
		$is_overseas = (int)$param['param']['is_overseas'];
		$fbbid = '';

		//从V5登录的英语用户记录日志并不让登录，直到act913开关关闭金钱加倍结束才让登
		/*if(BY::isOpen('act913') && in_array($api,array ( 6 => 6, 7 => 7, 2 => 2, 5 => 5, 12 => 12, 13 => 13, 16 => 16, 26 => 26, 43 => 43, 45 => 45, 100 => 100, 101 => 101, 113 => 113, 137 => 137, 155 => 155, 180 => 180, 189 => 189, 224 => 224, ))){
			oo::logs()->debug(date("Y-m-d H:i:s").'----Create:'.  json_encode($param), 'EN_PREVENT_LOGIN.log');
			$result = array('sys' => array(oo::$config['xml'], 1), 'time' => time(), 'ret' => array(), 'flag' => -404);
			return $result;
		}*/

        oo::logs()->debug(array('Create',$mid,$sid,$api,$param['version']),'v5_create.debug');
		if(!in_array(oo::$config['api'][$api][1], (array)oo::$config['needstatsid'])) { //flash端(api=0)不可以请求此接口
			$ret['result'] = 0;
			$ret['errMsg'] = array('api err.');
			$ret['errorCode'] = 1005;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		if(($api == 22) && (functions::version_compare($param['version'], '3.9') <= 0)) { //Android繁体禁止x版本及以下 再进入游戏
			$ret['result'] = 0;
			$ret['aUser'] = array('-22');
			$ret['errorCode'] = -2;
			$ret['dec'] = 'ID:-22 ' . lang::$phoneErrCode[1001];
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'smid' => $sitemid, 'ver' => $param['version'], 'lts_at' => time(), '10002' => 1)); //全局错误码：10002
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}
        if (oo::mobileConfig()->getSwc($api,'stopLogin')) {//限制特定版本的客户端无法登陆
            $ret['result'] = 0;
            $ret['aUser'] = array('-2023');
            $ret['dec'] =  ' '.str_replace(' ','_',lang::$phoneErrCode[2023]);;
            $ret['errorCode'] = -2;
            return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
        }

		if(in_array($api, array(1, 2, 4, 5, 13, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 81))) { //关闭注册和登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-16');
			$ret['errorCode'] = 1005;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);
		if(isset(oo::$config['clientHttpVerifyConfig'][$api]) && (!$aDecryptData || ((!of::isIphone($api) || $aDecryptData[1]) && !oo::logs()->chkBandDevice($aDecryptData[1], in_array($api, array(14, 20)) ? $aDecryptData['macAddr'] : null)))) { //对设备号进行检查，如果在被封队列中，不允许注册登录或一键登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-15');
			$ret['errorCode'] = 1001;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'smid' => $sitemid, 'lts_at' => time(), '10004' => 1)); //全局错误码：10004
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		/* 91 Android如果验证头中的api字段与请求参数中的api字段不同或客户端版本大于3.0时直接终止执行 */
		if($api == 10) {
			if(intval($aDecryptData['api']) != $api || (float)$param['version'] > 3.0) {
				die('fuck!');
			}
		}

		if($api == 8) { //iphone-91  4.2以下版本关注册登录
			if((intval($aDecryptData['api']) != $api) || (functions::version_compare($param['version'], '4.2.0') < 0)) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-8');
				$ret['errorCode'] = 2003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		}
		if( oo::$config['sid']==57 ){
			if( $aDecryptData['api'] && (intval($aDecryptData['api']) != $api) ) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-8');
				$ret['errorCode'] = 2003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				oo::logs()->debug(date("Y-m-d H:i:s").",---v5---  api:$api, device_api:".$aDecryptData['api']." , device:".json_encode($aDecryptData), 'deviceCreate.log');
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		}

		if(in_array($api, array(5, 11, 12, 14, 20, 23, 26, 27, 37, 38))) { //去FB验证token
			$op = oo::pmb('FB', oo::$config['api'][$api][2], oo::$config['api'][$api][3]);
			$op->ptype = 'fql';
			$aJson = $op->verify($sitemid, $token);
			if(empty($aJson)) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 1001;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$mnick = $aJson['mnick'];
			$micon = $aJson['micon'];
			$mbig = $aJson['mbig'];
			$mgender = $aJson['mgender'];
			$first_name = $aJson['first_name'];
			$middle_name = $aJson['middle_name'];
			$last_name = $aJson['last_name'];
			$full_name = $aJson['full_name'];
			$oldfbbid = oo::membermap()->getSetFbBid($sitemid);
			$fbbid = $op->getSetFbbid();  // 从fb最新获取的 token_for_business
			if(empty($oldfbbid) || strcmp($oldfbbid, $fbbid)!=0){ // 如果该sitemid之前没有获取token_for_business 或者 最新token_for_business变了更新缓存
				oo::callback()->add('oo::membermap()->getSetFbBid',array($sitemid,$fbbid));
			}
		} elseif(in_array($api, array(22, 86))) { //去FB通过graph api验证token
			$aLoclv = oo::$config['openRedisUtoken'] && !of::isHtml5(_API_) ? (array)oo::mobileConfig()->utoken() : array();
			$bFBVrf = true;
			if($aLoclv[0] == 2 && $param['param']['bytkn'] && oo::mobileinfo()->bytoken($sitemid, $aDecryptData[1], $param['param']['bytkn'], $aLoclv[1] * 3600)) { //1.优先bytoken验证
				$markDolist = $api; //标记需异步更新
				$bFBVrf = false;
			} elseif($aLoclv[0] > 0 && oo::mobileinfo()->utoken($sitemid, 0, $token, true)) { //2.再则token缓存验证
				$markDolist = $api; //标记需异步更新
				$bFBVrf = false;
			}
			if($bFBVrf) {
				$op = oo::pmb('FB', oo::$config['api'][$api][2], oo::$config['api'][$api][3]);
				$aJson = array();
				$try = oo::$config['mbFBVerify'] ? (oo::$config['mbFBVerify'] == 2 ? 3 : 0) : 2; //(要求尝试3次:不验证):一般情况2次
				while(!$aJson && ($try > 0)) { //尝试验证
					$aJson = $op->verify($sitemid, $token);
					$try--;
				}
				if(!$aJson && !oo::$config['mbFBVerify']) { //尝试验证不成功 && 判断是否返回验证失败(mbFBVerify>0表示验证失败时可放行)
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'smid' => $sitemid, 'lts_at' => time(), '10005' => 1)); //全局错误码：10005
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$mnick = $aJson['mnick'];
				$micon = $aJson['micon'];
				$mbig = $aJson['mbig'];
				$mgender = $aJson['mgender'];
				$first_name = $aJson['first_name'];
				$middle_name = $aJson['middle_name'];
				$last_name = $aJson['last_name'];
				$full_name = $aJson['full_name'];
				$oldfbbid = oo::membermap()->getSetFbBid($sitemid);
				$fbbid = $op->getSetFbbid();  // 从fb最新获取的 token_for_business
				if(empty($oldfbbid) || strcmp($oldfbbid, $fbbid)!=0){ // 如果该sitemid之前没有获取token_for_business 或者 最新token_for_business变了更新缓存
					oo::callback()->add('oo::membermap()->getSetFbBid',array($sitemid,$fbbid));
				}
				$aJson && $aLoclv[0] && oo::mobileinfo()->utoken($sitemid, 0, $token, false, $aLoclv[1] * 3600);
			}
		} elseif(in_array($api, array(17))) { //新浪验证
			$oauth_token = (string)$param['param']['oauth_token'];
			$oauth_token_secret = (string)$param['param']['oauth_token_secret'];
			if(empty($oauth_token) || empty($oauth_token_secret)) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 1007;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			@include PATH_LIB . 'class.weibooauth.php';
			if(!class_exists('WeiboClient')) {
				$ret['result'] = -88;
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$c = new WeiboClient(oo::$config['sina_api_key_for_iphone'], oo::$config['sina_api_secret_for_iphone'], $oauth_token, $oauth_token_secret);
			$me = $c->verify_credentials();
			if(!$me || $sitemid != $me['id']) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 1007;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$mnick = mysql_escape_string($me['screen_name']);
			$micon = mysql_escape_string($me['profile_image_url']);
			$mbig = mysql_escape_string(preg_replace('/\/50\//', '/180/', $micon));
			$mgender = ($me['gender'] == 'm') ? 0 : (($me['gender'] == 'f') ? 1 : 2);
		} elseif(in_array($api, array(21, 56))) { //iphone微游戏HTML5
			try {
				@include PATH_LIB . 'class.weiyouxiclient.php';
				$_GET = (array)$param['param'];
				$sina_api_key = ($api == 56) ? oo::$config['api'][$api][2] : oo::$config['sina_api_key_iphone_html5'];
				$sina_api_secret = ($api == 56) ? oo::$config['api'][$api][3] : oo::$config['sina_api_secret_iphone_html5'];
				$wyxClient = new WeiyouxiClient($sina_api_key, $sina_api_secret);
				$me = $wyxClient->get('user/show');
				if(!$me || (!$sitemid = (int)$me['id'])) {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = $me['error_code'];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$mnick = $me['screen_name'];
				$micon = $me['profile_image_url'];
				$mbig = $me['avatar_large'];
				$mgender = ($me['gender'] == 'm') ? 0 : (($me['gender'] == 'f') ? 1 : 2);


			} catch(Exception $e) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('api error');
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		} elseif(in_array($api, array(57))) { //移动3G门户HTML5
			try {

				$_GET = (array)$param['param'];

				$nick = $_GET['nick'];

				/* 验证地址 */
				$pid = $_GET['pid'];
				$pe = $_GET['pe'];
				$vurl = "http://u.3g.cn/i/api/check/$pid/$pe";
				$header = get_headers($vurl, 1);
				list($version, $status_code, $msg) = explode(' ', $header[0], 3);

				if($status_code != '200') {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = $me['error_code'];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}

				$mnick = $nick;
				// $micon = '';
				// $mbig = '';
				// $mgender = '0';

			} catch(Exception $e) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('api error');
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		} elseif(in_array($api, array(25, 28, 36))) { //iPhone & ipad
			try {
				@include PATH_LIB . 'class.weiyouxiclient.php';
				$wyxClient = new WeiyouxiClient(oo::$config['api'][$api][2], oo::$config['api'][$api][3]);
				$check = $wyxClient->setAndCheckSessionKey($param['param']['wyx_session_key']);
				$me = $wyxClient->get('user/show', array('uid' => $sitemid));
				if(!$me || (!$sitemid = (int)$me['id'])) {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = $me['error_code'];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$mnick = $me['screen_name'];
				$micon = $me['profile_image_url'];
				$mbig = $me['avatar_large'];
				$mgender = ($me['gender'] == 'm') ? 0 : (($me['gender'] == 'f') ? 1 : 2);
				$mlocation = $me['location'];
			} catch(Exception $e) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('api error');
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		} elseif(in_array($api, array(8, 9))) { //91用户token验证
			$appid = oo::$config['api'][$api][2];
			$appkey = oo::$config['api'][$api][3];
			$act = 4;
			$sign = md5($appid . $act . $sitemid . $token . $appkey);
			$aRequest = array("AppId" => $appid, "Act" => $act, "Uin" => $sitemid, "SessionId" => $token, "Sign" => $sign);
			$url91 = "http://service.sj.91.com/usercenter/AP.aspx";
			$respCont = functions::post_request_phone($aRequest, $url91);
			$res = json_decode($respCont, true);
			if($res['ErrorCode'] != 1) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 1001;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$mgender = (int)$param['param']['mgender'];
		} elseif(in_array($api, array(18))) { //android腾讯版
			$oauth_token = (string)$param['param']['token'];
			$oauth_token_secret = (string)$param['param']['tokensecret'];
			@include PATH_LIB . 'class.tencentSdk.php';
			define("MB_API_HOST", 'openapi.3g.qq.com');
			define("APP_ID", '100001');
			$_cc = new MBOpenTOAuth(oo::$config['tencent_api_key'], oo::$config['tencent_api_secret'], $oauth_token, $oauth_token_secret);
			$me = $_cc->get("http://" . MB_API_HOST . "/people/@me/@self", array('fields' => 'id,nickname,gamevip,gamevipLevel', 'format' => 'json'));
			$me_content = json_decode($me['content'], true);
			if(strcmp($me_content['entry']['id'], $sitemid) != 0) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 1001;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			$mnick = $me_content['entry']['nickname'];
			$gamevipLevel = ($me_content['entry']['gamevip'] === true) ? $me_content['entry']['gamevipLevel'] : 0; //腾讯 魔钻
		} elseif(in_array($api, array(35, 85))) { //HTML5腾讯微博，HTML5腾讯QQ浏览器
			$_REQUEST = (array)$param['param'];
			if(isset($_REQUEST['access_token'])) {
				$urlData['oauth_consumer_key'] = oo::$config['qq_api_id']; //801115775
				$urlData['oauth_token'] = (string)$_REQUEST['access_token'];
				$urlData['oauth_version'] = '2.0';
				$urlData['format'] = 'json';
				$res = @json_decode(functions::getFileContents('http://open.t.qq.com/api/user/info?' . http_build_query($urlData), 3), true);
				if($res['ret'] != 0) {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$sitemid = $res['data']['openid'];
				$mbloodtype = $res['data']['nick'];
				$micon = strlen($res['data']['head']) ? $res['data']['head'] . '/50' : 'http://mat1.gtimg.com/www/mb/images/head_50.jpg';
				$mbig = strlen($res['data']['head']) ? $res['data']['head'] . '/180' : 'http://mat1.gtimg.com/www/mb/images/head_180.jpg';
				$mgender = (int)$res['data']['sex'] == 0 ? 2 : (int)$res['data']['sex'] - 1;
			} elseif($_REQUEST['openid'] && $_REQUEST['openkey']) {
				@include_once PATH_LIB . 'platform/tx/Tencent.php';
				$params['appid'] = oo::$config['qq_api_id'];
				$params['openid'] = $_REQUEST['openid'];
				$params['openkey'] = $_REQUEST['openkey'];
				$params['wbversion'] = '1';
				$params['pf'] = 'php-sdk2.0beta';
				$url = "http://open.t.qq.com/api/user/info";
				//生成签名
				$urls = @parse_url($url);
				$sig = SnsSign::makeSig("GET", $urls['path'], $params, oo::$config['qq_api_key'] . '&');
				$params['sig'] = $sig;
				$res = @json_decode(functions::getFileContents($url . '?' . http_build_query($params), 3), true);
				if($res['ret'] != 0) {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$sitemid = $res['data']['openid'];
				$mbloodtype = $res['data']['nick'];
				$micon = strlen($res['data']['head']) ? $res['data']['head'] . '/50' : 'http://mat1.gtimg.com/www/mb/images/head_50.jpg';
				$mbig = strlen($res['data']['head']) ? $res['data']['head'] . '/180' : 'http://mat1.gtimg.com/www/mb/images/head_180.jpg';
				$mgender = (int)$res['data']['sex'] == 0 ? 2 : (int)$res['data']['sex'] - 1;
			} else {
				$sitemid = oo::ptencent('tapp')->getUserId();
				$me = oo::ptencent('tapp')->getUserInfo($sitemid);
				if(empty($me)) {
					$ret['result'] = 0;
					$ret['errMsg'] = array('bad user');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$mbloodtype = $me['mnick'];
				$micon = $me['micon'];
				$mbig = $me['mbig'];
				$mgender = $me['mgender'];
				oo::membertable()->setSesskey($_REQUEST['openid'], $_REQUEST['openkey']); //存储当前openkey.
			}
		} elseif($api == 80) { //HTML5宜搜联运版
			$easou_url = 'http://sso.easou.com/api2/validateServiceTicket.json';
			$easou_params = array('head' => array('partnerId' => oo::$config['api'][$api][4], 'appId' => oo::$config['api'][$api][2], 'sign' => '', 'qn' => intval($param['param']['qn']),), 'body' => array( //按KEY的字典升序配置
				'service' => 'http://html5.boyaa.com/texas/easou/', 'ticket' => $param['param']['ticket'],),);
			$aTmpSig = array();
			foreach($easou_params['body'] as $k => $v) $aTmpSig[] = "{$k}={$v}";
			$easou_params['head']['sign'] = md5(implode('&', $aTmpSig) . oo::$config['api'][$api][3]);
			unset($aTmpSig);
			$easou_ret = @json_decode(functions::post_request_phone(array('json' => json_encode($easou_params)), $easou_url, false, false), true);
			$aMe = $easou_ret['body']['user'];
			if(!$aMe || !$aMe['id'] || ($aMe['status'] != 1)) {
				$ret['result'] = 0;
				$ret['errMsg'] = array('bad user');
				$ret['errorCode'] = 8;
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$sitemid = $aMe['id'];
			$mnick = $aMe['nickName'];
			$mgender = in_array($aMe['sex'], array(1, 2)) ? $aMe['sex'] : 2; //0男1女2保密
		}
		$statsid = oo::$config['api'][$api][1] > 0 ? oo::$config['api'][$api][1] : $sid; //用于统计注册人数的sid

		$regCounted = false;
		if(of::isFacebook($sid)){
			$aUser = oo::member()->getOneBySitemid($sitemid, $sid,false,_UNID_,$fbbid);
		} else {
			$aUser = oo::member()->getOneBySitemid($sitemid, $sid);
		}

		if(!$aUser && (oo::$config['mbFBVerify'] == 3) && of::isFacebook($sid)) { //特殊情况不允许注册
			$ret['result'] = 0;
			$ret['aUser'] = array('-404');
			$ret['errorCode'] = -2;
			$ret['dec'] = 'ID:-404 ' . lang::$phoneErrCode[1001];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}
		$logStatus = $this->_loginCheckValid($ret, $aUser, $param, $api);
		if(!$logStatus) return $ret;
		//手机验证检查(防盗号者异常登录)
		if(oo::$config['mobileSMS'] && $aUser) {
			oo::logs()->debug( date('Y-m-d H:i:s') ."--[Login sms mobile error check] , mid:". $aUser['mid'] . ", api:{$api}",'smsMobile.log');
			if($iSmsFlag = oo::superaccount()->smsMobileLoginCheck($api, $aUser['mid'])) {
				oo::logs()->debug( date('Y-m-d H:i:s') ."--[Login sms mobile error check] , mid:". $aUser['mid'] . ", flag:{$iSmsFlag}",'smsMobile.log');
				$ret = array('aUser' => array('-114'), 'errorCode' => 114, 'dec' => '',);
				return $this->genRet($aUser['mid'], $ret, $this->_getClientVersion($api, $param['version']));
			}
		}

		/*以下是数据中心要的数据, 用来注册统计和登录统计*/
		$dNeedData = array();
		$dNeedData['m_dtype'] = $aDecryptData['dtype']; // 手机机型
		$dNeedData['m_imei'] = $aDecryptData['udid']; // 手机设备号
		$dNeedData['m_pixel'] = $aDecryptData['pixel']; // 手机机屏大小
		$dNeedData['m_os'] = $aDecryptData['iOSType'] . $aDecryptData['iOSVer']; // 手机设备，终端操作系统
		$dNeedData['m_network'] = $aDecryptData['network']; //手机设备接入方式，比如wifi
		$dNeedData['m_operator'] = $aDecryptData['operator']; //运营商
		/*数据结束*/
		if(!$aUser) { //该用户不存在
            if(oo::mobileConfig()->getSwc($api, 'stopReg') || ($api == 29 && in_array(_VERSION_ ,array('6.1.3', '5.9.2')))){
				$dec = lang::$phoneErrCode[2000];
				in_array($api,array(61,65)) && $dec = lang::$phoneErrCode[2024];
                return array(
                    'mid'=>-6,
                    'dec'=>$dec,
                    'errorCode' => -2,
                    'mtkey' => '', 
                    'vkey' => ''
                );
            }
			//新注册防刷验证:JsonChen
			if(oo::$config['open_SavetyLimit']){
				$safetyRet = oo::safetylimit()->allowReg($api,1,_LANGTYPE_,null,null);
				if(!$safetyRet['result']){
					$ret['result'] = 0;
					//$ret['aUser'] = array('-5');
					$ret['errorCode'] = 1003;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
			}
			if(in_array($api, array(10))) { //Android91 注册ip限制
				$ip = functions::getip();
				$aIp = explode('.', $ip);
				$bInvalid = false;
				if(($bInvalid == false) && (oo::logs()->getIpCount($ip, true, false, 1) >= 10)) { //同一个ip 每小时只能注册10
					$bInvalid = true;
				}
				if(($bInvalid == false) && (oo::logs()->getIpCount($ip, true, true, 1) >= 100)) { //同一个ip 每天只能注册100
					$bInvalid = true;
				}
				if(($bInvalid == false) && (oo::logs()->getIpCount($aIp[0] . '.' . $aIp[1] . '.0.0', true, true, 1) >= (in_array($aIp[0] . '.' . $aIp[1], array('115.216', '60.179')) ? 200 : 500))) { //ip段   A.B.*.*  每天只能注册500
					$bInvalid = true;
				}
				if(($bInvalid == false) && (oo::logs()->getIpCount($aIp[0] . '.' . $aIp[1] . '.' . $aIp[2] . '.0', true, true, 1) >= 100)) { //ip段  A.B.C.* 每天只能注册100
					$bInvalid = true;
				}

				if($bInvalid === true) { //认为 刷注册
					$ret['result'] = 0;
					$ret['errorCode'] = 1003;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				unset($aIp, $bInvalid);
			}

			if(in_array($api, array(9)) || (in_array($api, array(10)) && (float)$param['version'] <= 3.0) || (in_array($api, array(3)) && (float)$param['version'] < 3.0)) { //由于刷号严重，	限制Android机锋和android-91  3.1以下版本新用户登录
				$ret['result'] = 0;
				//$ret['aUser'] = array('-5');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			if(in_array($api, array(1, 2))) { //关闭注册
				$ret['result'] = 0;
				$ret['aUser'] = array('-6');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			if((!in_array($api, array(21, 23, 35, 56, 57, 80, 85))) && (!$aDecryptData || ((!of::isIphone($api) || $aDecryptData[1]) && (oo::logs()->getDeviceCount($aDecryptData[1]) > 10)))) { //每天每个机器码注册不能大于10
				$ret['result'] = 0;
				$ret['aUser'] = array('-4');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $mid, 'smid' => $sitemid, 'lts_at' => time(), '10010' => 1)); //全局错误码：10010
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			if(in_array($api, array(3, 8, 9, 10)) && oo::logs()->getIpCount(functions::getip(), true) > 10) { //每小时IP大于10
				$ret['result'] = 0;
				$ret['aUser'] = array('-6');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			if(in_array($api, array(21, 23, 35, 56)) && oo::logs()->getIpCount(functions::getip(), true, false, 2, 3 * 60) >= 3) { //新浪每3小时注册不能大于3
				$ret['result'] = 0;
				$ret['aUser'] = array('-7');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			if(oo::logs()->limitCount(1, 9, 1, true, 1) > 100000) {
				return $this->genRet($mid, array('-10000'), $this->_getClientVersion($api, $param['version']));
			}

			//验证码功能
			$aSetting = oo::guestRegSetting()->awardSettingCache(3);
			if(isset($aSetting[$api])) {
				if(($cnt = oo::logs()->limitCount(1, 719, 0, true, 1, 3600)) === PHP_INT_MAX) { //非正常存取
					$ret['result'] = 0;
					$ret['aUser'] = array('-23');
					$ret['errorCode'] = 1001;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				//超过限制数量将启用验证码
				if($cnt >= oo::guestRegSetting()->validLimit(3, 1)) {
					if(functions::version_compare($param['version'], $aSetting[$api]) < 0) {
						$ret['result'] = 0;
						$ret['aUser'] = array('-20');
						$ret['errorCode'] = 2000;
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
						//要求输入验证码
					} elseif(empty($param['param']['verifyCode'])) {
						$ret['result'] = 0;
						$ret['aUser'] = array('-21');
						$ret['errorCode'] = 2001;
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
						$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(3, $aDecryptData[1]); //验证码图片地址
						return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
						//判断验证码是否正确
					} else {
						//验证码错误
						$code = oo::guestRegCode()->get(3, $aDecryptData[1]);
						if(!$code || strtolower($param['param']['verifyCode']) != $code) {
							oo::guestRegCode()->del(3, $aDecryptData[1]);
							$ret['result'] = 0;
							$ret['aUser'] = array('-22');
							$ret['errorCode'] = 2002;
							$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
							$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
							$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(3, $aDecryptData[1]); //验证码图片地址
							return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
							//验证码正确 删除验证码
						} else {
							oo::guestRegCode()->del(3, $aDecryptData[1]);
						}
					}
				}
				oo::logs()->limitCount(1, 719, 1, true, 1, 3600);
			}
			// 注册按规则限制（设备ID，IP，网段）
			if (oo::mobileConfig()->getSwc($api, 'reglimit') && !$reglimitFlg = oo::misc()->regLimit($aDecryptData, false)) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-7');
				$ret['errorCode'] = -2;
				$ret['dec'] = lang::$phoneErrCode[1003];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$info['sid'] = $sid;
			$info['sitemid'] = $sitemid;

			$info['mnick'] = $param['param']['mnick'];
			$info['micon'] = $param['param']['micon'];
			$info['mbig'] = $param['param']['mbig'];
			$info['mgender'] = $param['param']['mgender'];

			$info['mmoney'] = ($tmChanRegRewp = oo::mobileConfig()->getSwc($api,'chanRegRew',0,$appid)) ? $tmChanRegRewp : oo::$config['firstin'];
			$info['stat_sid'] = $info['unid'] = $statsid; //用于统计注册人数的sid
			if(in_array($api, array(21, 23, 56))) {
				$mcommend = oo::friends()->getInviter($sitemid);
				if(($mcommend > 0) && (oo::logs()->limitCount($mcommend, 1, 1) >= 10)) { //如果确实是邀请进来的,则每天限制10个
					$mcommend = 0;
				}
				$info['mcommend'] = (int)$mcommend;
			}
			$qihuRrInfo = array();
			/*以下是数据中心要的数据*/
			$info['dNeedData'] = $dNeedData;
			/*数据结束*/
			if(!empty($fbbid)){
				$info['bid'] = $fbbid;
			}
			ocache::$acache['clientVersion'] = $param['version'];
			$aUser = oo::member()->insert($info); //则先添加入
			if(!is_array($aUser) || !$aUser['mid']) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-99');
				$ret['errorCode'] = 1002;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			if(in_array($api, array(21, 23, 56))) {
				if($mcommend > 0) { //被邀请者与邀请者为好友
					oo::friends()->addFriend($aUser['mid'], $mcommend, 0);
				}
			}
			$regCounted = true; //注册数已加1
			in_array($api, array(21, 56)) && oo::callback()->add("oo::notice()->addList", array($aUser['mid'], $aUser['sitemid'], 1, $sid)); //微游戏加到异步更新队列
		} elseif(in_array($api, array(22))) {
			$aMids = oo::mobileinfo()->getMidsOneDay($aDecryptData[1], 3);
			if(!in_array($aUser['mid'], $aMids) && count($aMids) >= 5) {
				$ret['result'] = 0;
				$ret['aUser'] = array('-22');
				$ret['errorCode'] = -2;
				$ret['dec'] = "ID:{$aUser['mid']} " . lang::$phoneErrCode[2014];
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $aUser['mid'], 'lts_at' => time(), '10007' => 1, 'did' => $aDecryptData[1])); //全局错误码：10007
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
			oo::mobileinfo()->setMidsOneDay($aDecryptData[1], 3, $aUser['mid']);
		}
		if($aUser['mstatus'] == 1) {
			if(isset($aUser['mver']) && $aUser['mver'] != 0 && $aUser['mver'] < time()) { //临时封号已到期
				oo::member()->setMstatus($mid, 10); //解封
				oo::sysnotice()->addSysNotice($mid, '解封api-v5-Member2', '解封', 0, 1);
			} else {
				//临时封号和永久封号返回不一样的描述
				if(isset(lang::$phoneErrCode[2016]) && isset(lang::$phoneErrCode[2017])) {
					$ret['dec'] = (int)$aUser['mver'] ? sprintf(lang::$phoneErrCode[2016], date(lang::$userwintime, $aUser['mver'])) : lang::$phoneErrCode['2017'];
				} else {
					if(oo::$config['sid']==57){
						$noticeStr = ocache::mongoBase()->get('NOTICE|'.$aUser['mid']);
						$noticeStr && $tmpNotice = explode('|', $noticeStr);
						if($tmpNotice && $tmpNotice[1]) {
							$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . $tmpNotice[1];
						}else{
							$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . lang::$phoneErrCode[1001];
						}
					}else{
						$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . lang::$phoneErrCode[1001];
					}
				}
				$ret = array_merge((array)$ret, array('result' => 0, 'aUser' => array('-990'), 'errorCode' => -2));
				oo::dc()->sendData(oo::$config['api'][$api][1], 23, array('et_id' => 'lgerr', 'uid' => $aUser['mid'], 'lts_at' => time(), '10008' => 1)); //全局错误码：10008
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}
		}
		oo::callback()->add('oo::member()->logUserDevice', array($aUser['mid'], $aDecryptData[1], $aDecryptData['macAddr'], $aDecryptData['vid']));

		$update_arr = array();
		//$mnick && ($update_arr['mnick'] = $aUser['mnick'] = $mnick);
		$mnick && ($update_arr['mnick'] = $mnick);
		$micon && ($update_arr['micon'] = $aUser['micon'] = $micon);
		$mbig && ($update_arr['mbig'] = $aUser['mbig'] = $mbig);
		($mgender || $mgender === 0) && ($update_arr['mgender'] = $aUser['mgender'] = $mgender);
		$mlocation && ($update_arr['mlocation'] = $aUser['mlocation'] = $mlocation);
		$gamevipLevel && ($update_arr['gamevipLevel'] = $aUser['gamevipLevel'] = $gamevipLevel); //腾讯 魔钻
		$mbloodtype && ($update_arr['mbloodtype'] = $aUser['mbloodtype'] = $mbloodtype);

		$first_name && ($update_arr['first_name'] = $aUser['first_name'] = $first_name);
		$middle_name && ($update_arr['middle_name'] = $aUser['middle_name'] = $middle_name);
		$last_name && ($update_arr['last_name'] = $aUser['last_name'] = $last_name);
		$full_name && ($update_arr['full_name'] = $aUser['full_name'] = $full_name);
		if($aUser['isDefaultNick']){//已经改过名不同步fb信息
			unset($update_arr['mnick'],$update_arr['first_name']);
		}

		($aUser['unid'] != $statsid) && ($aUser['unid'] = $update_arr['unid'] = $statsid);
		is_array(ocache::$acache['minfo'][$aUser['mid']]) && ocache::$acache['minfo'][$aUser['mid']]['unid'] = $statsid; //要先更新unid要不然会导致头像问题
		$update_arr && oo::callback()->add('oo::member()->update', array($aUser['mid'], $update_arr));

		in_array($api, array(21, 56)) && $_GET['wyx_session_key'] && oo::callback()->add('oo::membertable()->setSesskey', array($aUser['mid'], $_GET['wyx_session_key'])); //保存用户的key

		//iPhone中文繁体版加推送功能
		oo::$config['newClientNotify'] && $param['param']['APNSToken'] && oo::callback()->add('oo::devicetoken()->add', array($aUser['mid'], $api, $param['param']['APNSToken'], $param['langtype'], $param['param']['APNSSetting'], $aDecryptData['isJailBreak']) );

		oo::expLevel()->init($mid, $aUser); //由原来oo::membertable()->insert移动至此
		list($aInfo['mtkey'], $aInfo['tid'], $aInfo['mtstatus']) = oo::membertable()->insert($aUser['mid'], $statsid, $aUser['unid'], $aUser['mvip'], $aUser['mstatus'], 0, true);
		$aInfo['vkey'] = functions::genVkey($aUser['mid'], ''); //生成机器码
		$aInfo['payscore'] = 0; //该用户的信用值
		if(in_array($api, array(1, 2, 14, 19, 20, 25, 28))) {
			include(PATH_LIB . 'mobile/class.paylimit.php');
			$aInfo['payscore'] = (($api == 1 || $api == 2) ? -10 : Paylimit::test($api, $aUser['mid'], 0, 105, $aDecryptData[1], $aDecryptData['isJailbreak']));
		} else {
			$aInfo['payscore'] = 1000;
		}
		if(isset($param['protocol']) && $param['protocol'] == 1) {
			$array = $this->_getServerIpAndPort($api, $aInfo['tid'], $aUser['mid'], $param['version']);
			$aInfo = array_merge($aInfo, $array);
			$aInfo['checkPhotoUpload'] = 1;
			$aInfo['photoUploadSize'] = 500 * 1024;
		}

		$ret['result'] = 1;
		$ret['aUser'] = array_merge($aUser, $aInfo);
		if($appid) { //上报渠道推广平台
			$regCounted && oo::callback()->add('oo::andrstart()->androidPromo', array($aUser['mid'], 3, 1, array('appid' => $appid, 'appkey' => $appkey, 'is_overseas' => $is_overseas), true));
			oo::callback()->add('oo::andrstart()->androidPromo', array($aUser['mid'], 2, 1, array('appid' => $appid, 'appkey' => $appkey, 'is_overseas' => $is_overseas), true));
		}
		$ret['voiceSession'] = md5('voice_texas' . oo::$config['sid'] . date('Ymd') . $mid);
		$markDolist && oo::callback()->add('oo::notice()->addList', array($aUser['mid'], $sitemid, (int)$param['langtype'], $sid, '', $aUser['mentercount'], $token, $markDolist)); //异步更新资料
		isset($param['param']['APNSToken']) && $aData['APNSToken'] = $param['param']['APNSToken'];
		$aData && oo::mobileinfo()->set($mid, $aData);
		oo::mobileinfo()->saveHeader($aUser['mid'], 1, $aDecryptData, $api);
		//oo::callback()->add('oo::mobileinfo()->saveHeader', array($aUser['mid'], 1, $aDecryptData, $api));
		$ret['bytkn'] = oo::mobileinfo()->bytoken($sitemid, $aDecryptData[1]); //本地验证用
		$ret['slots_switche'] = (oo::$config['closeMobileSlots'] == 1) ? 0 : 1;
		$platform = isset(oo::$config['dclogin_platform']) ? oo::$config['dclogin_platform'] : array(79 => 1, 233 => 4, 237 => 5, 238 => 6); //1游客  2默认平台[VK,Facebook,新浪] 3,4通行证[3是绑定过的，4未绑定] 5twitter账号 6Yahoo
		oo::dc()->sendData($statsid, 3, array_merge($dNeedData, array( //登陆统计上报数据
			'uid' => $aUser['mid'], 'first_at' => $aUser['mtime'], 'platform_uid' => $aUser['sitemid'], 'login_at' => time(), 'ip' => functions::getip(), 'longitude'=>$aUser['longitude'],'latitude'=>$aUser['latitude'], 'user_agent' => $_SERVER['HTTP_USER_AGENT'], 'entrance_id' => ($aUser['sid'] == 233 ? ((oo::$config['limitBinding'] && oo::mobileBinding()->isGuestBinding($aUser['mid'])) ? 3 : 4) : (isset($platform[$aUser['sid']]) ? $platform[$aUser['sid']] : 2)), 'user_gamecoins' => $aUser['mmoney'], 'lang' => (of::isFacebook($sid) ? $aUser['mbloodtype'] : ''), 'version_info' => $param['version'])));

		return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
	}

	/**
	 * iphone 用户注册
	 * 通过合作站点的用户ID，用户名，头像
	 * 返回本站的该用户的信息
	 */
	public function Login($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('-1'));
		}

		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$vmid = (int)$param['vmid'];
		$vkey = (string)$param['vkey']; //机器验证
		$token = (string)$param['param']['token']; //可以去fb认证的access token,https://graph.facebook.com/me?access_token=xxxxxxxx
		empty($param['param']['APNSToken']) && !empty($param['param']['apnstoken']) && ($param['param']['APNSToken'] = $param['param']['apnstoken']);
		oo::setLang((int)$param['langtype']);
		if(!in_array(oo::$config['api'][$api][1], (array)oo::$config['needstatsid'])) {
			$ret['result'] = 0;
			$ret['aUser'] = array('-16');
			$ret['errorCode'] = 1005;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		$opt = $param['param']['opt']; //操作: 0注册1登录

		$memail = $param['param']['memail'];
		$mpwd = $param['param']['mpwd'];

		$aDecryptData = functions::isUseXTunnelVerify($api, $param['version']) ? functions::getXTunnelVerify($api) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);

		$isApple = of::isIphone($api) ? true : false; //是否苹果客户端？

		//从V5登录的英语用户记录日志并不让登录，直到act913开关关闭金钱加倍结束才让登
		/*if(BY::isOpen('act913') && in_array($api,array ( 6 => 6, 7 => 7, 2 => 2, 5 => 5, 12 => 12, 13 => 13, 16 => 16, 26 => 26, 43 => 43, 45 => 45, 100 => 100, 101 => 101, 113 => 113, 137 => 137, 155 => 155, 180 => 180, 189 => 189, 224 => 224, ))){
			oo::logs()->debug(date("Y-m-d H:i:s").'----Login:'.  json_encode($param), 'EN_PREVENT_LOGIN.log');
			$result = array('sys' => array(oo::$config['xml'], 1), 'time' => time(), 'ret' => array(), 'flag' => -404);
			return $result;
		}*/

        oo::logs()->debug(array('Login',$mid,$api,$param['version']),'v5_create.debug');
		if(in_array($api, array(1, 2, 3, 4, 5, 13))) { //繁体的android关闭注册和登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-16');
			$ret['errorCode'] = 1005;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		if($isApple && (!$aDecryptData || ((!of::isIphone($api) || $aDecryptData[1]) && !oo::logs()->chkBandDevice($aDecryptData[1], in_array($api, array(14, 20)) ? $aDecryptData['macAddr'] : null)))) { //对设备号进行检查，如果在被封队列中，不允许注册登录或一键登录
			$ret['result'] = 0;
			$ret['aUser'] = array('-15');
			$ret['errorCode'] = 1001;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		$sid = 79;
		$statsid = oo::$config['api'][$api][1] > 0 ? oo::$config['api'][$api][1] : $sid; //用于统计注册人数的sid

		switch($opt) {
			case 0:
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				if($isApple) {
					//同一个设备号每天最多只能注册10个帐号,并且如果是被封的设备不再允许其注册！
					if(!$aDecryptData || ((!of::isIphone($api) || $aDecryptData[1]) && (oo::logs()->getDeviceCount($aDecryptData[1]) > 10))) {
						$ret['result'] = 0;
						$ret['aUser'] = array('-4');
						$ret['errorCode'] = 1003;
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
					}
				}
				if(in_array($api, array(1, 14))) { //iphone新老版本关闭注册
					return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				}
				$sitemid = oo::member()->iphoneRegister($memail, $mpwd);
				break;
			case 1:
				$sitemid = oo::member()->iphoneLogin($memail, $mpwd);
				break;
			case 2: //根据机器码更新个人信息
				$ret = array();
				$ret['result'] = 0;
				if((strlen($mpwd) != 32) || empty($memail)) {
					$ret['result'] = -1; //邮箱或密码不正确
				} else {
					$tmpUser = oo::member()->iphoneGetOne($memail);

					if(!empty($tmpUser)) {
						$ret['result'] = -2;
					} elseif(empty($aDecryptData[1]) || strcmp($aDecryptData[1], $param['param']['uid'])) {
						$ret['result'] = -3;
					} else {
						$mnick = mysql_escape_string($param['param']['mnick']);
						!empty($mnick) && $changeArr['mnick'] = $mnick;
						$aUser = oo::member()->getOneBySitemid($sitemid, $sid);
						$changeArr && oo::member()->update($aUser['mid'], $changeArr);
						if(oo::member()->iphoneUpdate($sitemid, array('memail' => $memail, 'mpwd' => $mpwd))) {
							$ret['result'] = 1;
						} else {
							$ret['result'] = -4;
						}
					}
				}
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
				break;
			default:
				$sitemid = 0;
				break;
		}

		if(!$sitemid) {
			$ret['result'] = 0;
			$ret['aUser'] = array('-5');
			$ret['errorCode'] = 1004;
			$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];

			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		if(!$aUser = oo::member()->getOneBySitemid($sitemid, $sid)) { //该用户不存在
            if(oo::mobileConfig()->getSwc($api, 'stopReg') || ($api == 29 && in_array(_VERSION_ ,array('6.1.3', '5.9.2')))){
				$dec = lang::$phoneErrCode[2000];
				in_array($api,array(61,65)) && $dec = lang::$phoneErrCode[2024];
                return array(
                    'mid'=>-6,
                    'dec'=>$dec,
                    'errorCode' => -2,
                    'mtkey' => '', 
                    'vkey' => ''
                );
            }
            
			if(in_array($api, array(1, 2)) ) { //关闭注册
				$ret['result'] = 0;
				$ret['aUser'] = array('-6');
				$ret['errorCode'] = 1003;
				$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
				return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
			}

			$info['sid'] = $sid;
			$info['sitemid'] = $sitemid;

			$info['mnick'] = $param['param']['mnick'];
			$info['mname'] = $param['param']['memail'];
			$info['micon'] = $param['param']['micon'];
			$info['mbig'] = $param['param']['mbig'];
			$info['mgender'] = $param['param']['mgender'];

			$info['mmoney'] = oo::$config['firstin'];
			$info['stat_sid'] = $info['unid'] = $statsid; //用于统计注册人数的sid

			$aUser = oo::member()->insert($info); //则先添加入
		}

		if(!is_array($aUser) || ($aUser['mstatus'] == 1)) {
			$ret['result'] = 0;
			$ret['aUser'] = array('-6');
			$ret['errorCode'] = -2;
			$ret['dec'] = 'ID:' . $aUser['mid'] . ' ' . lang::$phoneErrCode[1001];
			return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
		}

		oo::member()->logUserDevice($aUser['mid'], $aDecryptData[1], $aDecryptData['macAddr'], $aDecryptData['vid']);

		($aUser['unid'] != $statsid) && ($aUser['unid'] = $statsid) && (oo::member()->update($aUser['mid'], array('unid' => $statsid))); //用于分应用统计

		if(oo::logs()->limit($aUser['mid'], 116, 1, 0)) {

			//统计等级分布
			$level = oo::levels()->getLevelByEx((isset($aUser['mexp']) ? $aUser['mexp'] : (isset($aUser['newExpLevel']) ? $aUser['newExpLevel'] : oo::expLevel()->getUserExp($aUser['mid']))));
			$cttype = floor($level / 10) + 200100;

			//根据IP统计玩家地区分布
			if(oo::$config['sid'] != 13) {
				$ip = functions::getip();
				$country = functions::ip2c($ip);
				if(($key = array_search($country, oo::$config['ip2c_area'])) !== false) {
					$cttype = 200200 + $key;
				} else {
					$cttype = 200200;
				}
			}
		}

		//iPhone中文繁体版加推送功能
		oo::$config['newClientNotify'] && $param['param']['APNSToken'] && oo::devicetoken()->add($aUser['mid'], $api, $param['param']['APNSToken'], $param['langtype'], $param['param']['APNSSetting'], $aDecryptData['isJailBreak']);

		oo::expLevel()->init($mid, $aUser); //由原来oo::membertable()->insert移动至此
		list($aInfo['mtkey'], $aInfo['tid'], $aInfo['mtstatus']) = oo::membertable()->insert($aUser['mid'], $statsid, $aUser['unid'], $aUser['mvip'], $aUser['mstatus'], 0, true);

		if(isset($param['protocol']) && $param['protocol'] == 1) {
			$array = $this->_getServerIpAndPort($api, $aInfo['tid'], $aUser['mid'], $param['version']);
			$aInfo = array_merge($aInfo, $array);
			$aInfo['checkPhotoUpload'] = 1;
			$aInfo['photoUploadSize'] = 500 * 1024;
		}

		$aInfo['vkey'] = md5('123'); //functions::genVkey( $aUser['mid'], ''); //生成机器码
		if(in_array($api, array(1, 2, 14, 19, 20, 25, 28))) {
			include(PATH_LIB . 'mobile/class.paylimit.php');
			$aInfo['payscore'] = (($api == 1 || $api == 2) ? -10 : Paylimit::test($api, $aUser['mid'], 0, 105, $aDecryptData[1], $aDecryptData['isJailbreak']));
		} else {
			$aInfo['payscore'] = 1000;
		}
		$ret['result'] = 1;
		$ret['aUser'] = array_merge($aUser, $aInfo);
		$ret['voiceSession'] = md5('voice_texas' . $config['sid'] . date('Ymd') . $mid);
		return $this->genRet($mid, $ret, $this->_getClientVersion($api, $param['version']));
	}

	/**
	 * 在线经验奖励
	 *
	 * @param <type> $param
	 * @return <type>
	 */
	public function rewardExp($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}
		if(!$mid = functions::uint($param['mid'])) {
			return $this->genRet($param['mid'], array(-1));
		}

		$api = functions::uint($param['api']);
		$aOnline = oo::membertable()->onlineinfo($mid);
		if(!$aOnline) {
			return $this->genRet($param['mid'], array(-2));
		}

		$now = time();
		$lcnt = oo::logs()->limitCount($mid, 23, 0, false);
		if($lcnt === PHP_INT_MAX) {
			return $this->genRet($param['mid'], array(-2));
		}

		$aReward = array(0 => array(300, 5), 1 => array(900, 10), 2 => array(1800, 20), 3 => array(3600, 30), 4 => array(5400, 50), 5 => array(7200, 100), 6 => array(3600, 20));

		$playTime = (int)$aOnline['playtime'];
		$exp = $requireTime = 0;
		if($aOnline['mtstatus'] == 2) {
			 if($now - $aOnline['sittime'] < 3600*3){//坐下时间是3小时内才加
				$playTime += max($now - $aOnline['sittime'], 0);
			 }
		}

		if($lcnt < 6) {
			$requireTime = $aReward[$lcnt][0];
			$exp = $aReward[$lcnt][1];
		} else {
			$requireTime = 7200 + 3600 * ($lcnt - 5);
			$exp = 20;
		}
		!PRODUCTION_SERVER && oo::logs()->debug(array($api, $mid, $exp, $playTime, $requireTime, $lcnt, date("Y-m-d H:i:s")), "rewardExp{$api}.txt");
		if($playTime >= $requireTime && (($limit = oo::logs()->limitCount($mid, 23, 1)) <= 17)) { //前两小时6次 + 后22小时每两小时一次11次 = 17
			oo::expLevel()->addUserExp($mid, $exp, false, 97); //加经验
			oo::logs()->addWin($mid, 728, 0, $exp, "{$playTime}|{$requireTime}|{$lcnt}|{$limit}|1", '', false);
			$ret['result'] = 1;
			$ret['offsetExp'] = $exp;
		} else {
			$ret['result'] = 0;
			$ret['offsetExp'] = 0;
		}
		$ret['playtime'] = $playTime;
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 用户升到新等级
	 *
	 * @param Mixed $param
	 */
	public function upNewLevel($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}

		oo::setLang($param['langtype']);

		if(!$mid = functions::uint($param['mid'])) {
			return $this->genRet($param['mid'], array(-1));
		}
		if(!$newLvl = functions::uint($param['param']['newlvl'])) {
			return $this->genRet($param['mid'], array(-1));
		}
		$ret['result'] = 0;
		$aLvl = oo::member()->upNewLevel($mid, $newLvl);
		if(!$aLvl) {
			return $this->genRet($mid, $ret);
		}
		$ret['result'] = 1;
		$ret['money'] = $aLvl[2] *oo::$config['blowup'];
		$ret['honor'] = $aLvl[1] ? $aLvl[1] : '';  //等级头衔
		$ret['desc'] = sprintf(lang::$congregation_for_up_lvl, $newLvl, $ret['money']);
		if($aLvl[3] > 0) {
			$ret['desc'] .= sprintf(lang::$congregation_up_lvl_suffix, lang::$cardlist[$aLvl[3]][0]);
		}
		if(isset($aLvl['levelUpDesc'])){
			$ret['desc'] = $aLvl['levelUpDesc'];
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取邀请码
	 * @param $param
	 * @return array
	 */
	public function getInviteCode($param) {
		if(!$this->auth($param, 1)) {
			$ret['flag'] = -1; //参数错误
			$ret['code'] = array();
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['flag'] = -1; //参数错误
			$ret['code'] = array();
			return $this->genRet($param['mid'], $ret);
		}
		oo::setLang($param['langtype']); //设置语言文件
		$haveCode = functions::uint($param['param']['haveCode']);

		$codeNum = (int)oo::$config['inviteNum']; //每天可邀请的个数
		$inviteNumKey = okey::mkinvitenum($mid);
		$aInviteNum = ocache::kvs()->get($inviteNumKey); //获取当前用户当天已邀请的人数
		if(!$aInviteNum || $aInviteNum['expiration'] < time()) {
			$todayInvite = $codeNum; //返回今天此用户还可邀请的好友数
		} else {
			$todayInvite = $codeNum - $aInviteNum['num']; //返回今天此用户还可邀请的好友数
		}
		$codeBox = array(); //用来存code
		$aRand = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
		$i = 0;
		while($i < $codeNum - $haveCode) {
			shuffle($aRand);
			$code = implode(array_slice($aRand, 0, 6)); //随机取出6位作为邀请码
			$inviteCodeBoxKey = okey::mkinviteCodeBox($code);
			$isCode = ocache::kvs()->get($inviteCodeBoxKey); //查看此邀请码是否已用过
			if(!$isCode) {
				ocache::kvs()->put($inviteCodeBoxKey, array('time' => time()));
				$codeBox[] = $code;
				$i++;
			}
		}
		$ret['url'] = (string)lang::$inviteFriendInfo['url']; //邀请好友地址
		$ret['emailTitle'] = (string)lang::$inviteFriendInfo['emailTitle']; //邀请好友标题
		$ret['content'] = (string)lang::$inviteFriendInfo['content']; //邀请fb好友内容
		$ret['emailContent'] = (string)lang::$inviteFriendInfo['emailContent']; //邀请邮箱好友内容
		$ret['smsContent'] = (string)lang::$inviteFriendInfo['smsContent']; //邀请sms好友内容
		$ret['pictureURL'] = (string)lang::$inviteFriendInfo['pictureURL']; //邀请好友图片地址
		$ret['getChips'] = (int)oo::$config['getChipC']; //接受邀请可得钱数
		$ret['sendChips'] = (int)oo::$config['getChip']; //邀请者所获得的筹码
		$ret['flag'] = 1; //生成邀请码成功
		$ret['code'] = $codeBox;
		$ret['todayInvite'] = $todayInvite; //返回今天此用户还可邀请的好友数
		return $this->genRet($mid, $ret);
	}

	/**
	 * 邀请好友
	 * @param Mixed $param
	 * @return array
	 */
	public function inviteFriend($param) {
		if(!$this->auth($param, 1)) {
			$ret['flag'] = -3; //参数错误
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['flag'] = -3; //参数错误
			return $this->genRet($param['mid'], $ret);
		}
		if(!$key = $param['param']['key']) {
			$ret['flag'] = -3; //参数错误
			return $this->genRet($mid, $ret);
		}
		if((!$code = $param['param']['code']) || (preg_match('/[^0-9a-z]/', $code) == 1)) { // 邀请码只能是数字和字母
			$ret['flag'] = -3; //参数错误
			return $this->genRet($mid, $ret);
		}

		$inviteCodeBoxKey = okey::mkinviteCodeBox($code);
		$isCode = ocache::kvs()->get($inviteCodeBoxKey);
		if(!$isCode) { // 如果邀请码与内部已存的不匹配
			$ret['flag'] = -3; //参数错误
			return $this->genRet($mid, $ret);
		}
		oo::setLang($param['langtype']); //设置语言文件
		$expiration = (int)oo::$config['inviteExpiration']; //邀请码过期时间(天)
		$inviteNum = (int)oo::$config['inviteNum']; //每天允许邀请的好友个数
		$getChip = (int)oo::$config['getChip']; //邀请者所获得的筹码
		$inviteNumKey = okey::mkinvitenum($mid);
		$aInviteNum = ocache::kvs()->get($inviteNumKey); //获取当前用户当天已邀请的人数
		if($aInviteNum && $aInviteNum['expiration'] > time() && $aInviteNum['num'] >= $inviteNum) {
			$ret['flag'] = -2; //邀请的好友已超出个数限制
			return $this->genRet($mid, $ret);
		}
		$isinvitedKey = okey::mkisinvited($mid, $key);
		$aIsinvited = ocache::kvs()->get($isinvitedKey); //查询此好友是否已被邀请过
		$thisWeek = date("W");
		if($aIsinvited) {
			if($aIsinvited['time'] == -1) { //好友已接受邀请
				$getChip = 0; //一周内重复邀请同一个好友不给加筹码
			}
			if(date("W", $aIsinvited['time']) >= $thisWeek) { //好友已被邀请过 ，如果此好友没有接受邀请，下周可再次邀请该好友
				$getChip = 0; //一周内重复邀请同一个好友不给加筹码
			}
		}
		$inviteKey = okey::mkinvite($code);
		$aInviteNew = array('mid' => $mid, 'key' => $key, 'expiration' => strtotime($expiration . ' days'));
		$aInvite = ocache::kvs()->get($inviteKey);
		if(!$aInvite || $aInvite['expiration'] < time()) {
			ocache::kvs()->put($inviteKey, $aInviteNew); //存入一条记录，当输入邀请码时从此记录里查询
		}
		if(!$aInviteNum || $aInviteNum['expiration'] < time()) {
			ocache::kvs()->put($inviteNumKey, array('num' => 0, 'expiration' => mktime(0, 0, 0, date('m'), date('d') + 1, date('Y')))); //到明天0晨过期
			$aInviteNum = ocache::kvs()->get($inviteNumKey);
		}
		ocache::kvs()->put($inviteNumKey, array('num' => $aInviteNum['num'] + 1, 'expiration' => $aInviteNum['expiration'])); // 将今天邀请的人数加加
		ocache::kvs()->put($isinvitedKey, array('time' => time()));
		$getChip && oo::logs()->addWin($mid, 12, 0, $getChip, '1', '', true); //给邀请者加筹码
		$ret['flag'] = 1; //成功获得的邀请码
		$ret['todayInvite'] = $inviteNum - $aInviteNum['num'] - 1; //返回今天此用户还可邀请的好友数
		return $this->genRet($mid, $ret);
	}

	/**
	 * 输入邀请码接受好友邀请
	 * @param Mixed $param
	 * @return array
	 */
	public function inputInviteCode($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('flag' => -1)); //参数错误
		}
		if(!$mid = functions::uint($param['mid'])) {
			return $this->genRet($param['mid'], array('flag' => -1)); //参数错误
		}
		if((!$code = $param['param']['code']) || (preg_match('/[^0-9a-z]/', $code) == 1)) {
			return $this->genRet($param['mid'], array('flag' => -1)); //参数错误
		}
		oo::setLang($param['langtype']); //设置语言文件
		$getChipC = oo::$config['getChipC']; //接受邀请后被邀请者所获得的筹码
		$getChipP = oo::$config['getChipP']; //接受邀请后邀请者所获得的筹码

		$isacceptedKey = okey::mkisaccepted($mid);
		$isInvited = ocache::kvs()->get($isacceptedKey);
		if($isInvited == 1) {
			$ret['flag'] = -2;
			return $this->genRet($mid, $ret); //已接受过邀请
		}
		$inviteKey = okey::mkinvite($code);
		$aGetCode = ocache::kvs()->get($inviteKey);
		if(!$aGetCode) {
			$ret['flag'] = -3;
			return $this->genRet($mid, $ret); //邀请码错误或邀请码过期
		}
		if($aGetCode['expiration'] < time()) {
			$ret['flag'] = -4;
			return $this->genRet($mid, $ret); //邀请码过期
		}
		if($aGetCode['key'] != 'fb') { //非facebook用户才加筹码
			oo::logs()->addWin($aGetCode['mid'], 8, 0, $getChipP, '', '', true); //给邀请者加筹码
			oo::logs()->addWin($mid, 123, 0, $getChipC, '', '', true); //给被邀请者加筹码
			$isinvitedKey = okey::mkisinvited($aGetCode['mid'], $aGetCode['key']);
			ocache::kvs()->put($isinvitedKey, array('time' => -1)); // 将此用户设为不可再被邀请
		}
		oo::friends()->addFriend($aGetCode['mid'], $mid, 1); //把此两用户加为牌友
		ocache::kvs()->put($isacceptedKey, 1); //把该用户设为已接受过的邀请
		ocache::kvs()->out($inviteKey); //删除该邀请码
		$ret['flag'] = 1;
		return $this->genRet($mid, $ret); //成功
	}

	/**
	 * 用户头上传  针对移动设备
	 * fileUrl 上传头像时
	 * url	上传相册时
	 * @param file
	 * @return fileUrl
	 */
	public function PhotoUpload($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array(-1));
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$api = (int)$param['api'];
		$sUrl = (string)$param['param']['fileUrl'];		
		
		if(in_array(oo::$config['sid'], array(93, 117)) 
				&& strpos($sUrl, 'https://dxbfdifktg8gp.cloudfront.net') !== false){
			$sUrl = str_replace('https://dxbfdifktg8gp.cloudfront.net', 'http://pkhead.17c.cn', $sUrl);
		}
		if(in_array(oo::$config['sid'], array(93, 117)) 
				&& strpos($sUrl, 'https://byheadpic.akamaized.net') !== false){
			$sUrl = str_replace('https://byheadpic.akamaized.net', 'http://pkhead.17c.cn', $sUrl);
		}

		$mbPhotoSwc = oo::mobileConfig()->getSwc($api, 'mbPhotos');
		if($mid && $sUrl) {
			$bDo = oo::member()->update($mid, array('micon' => $sUrl, 'mbig' => $sUrl));
			if($bDo && in_array(oo::$config['sid'],array(93,117))){
				$cacheKey = okey::mkUserMicon($mid);
				$aImgs = array(date('Ymd His').'|'.$sUrl);
				ocache::mongoCache()->set($cacheKey,$aImgs);//标识一下是否手动上传过头像
//				$aData["玩家更改头像"] = 1;
//				oo::lc()->sendEvent( of::getLogcenterSid(), $mid, "upload_micon", $aData );	
			}
		}


		if(isset($param['param']['type'])){//上传类型 1:玩家相册图片
			if( ((int)$param['param']['type'] == 1) && $mbPhotoSwc){
				$key = $param['param']['key'];//第几张图片
				$url = $param['param']['url'];//图片地址

				$aUser	= oo::minfo()->getMinfo($mid, array('mbPhotos'));
				if( $key >= 0 && $url){//添加，更改图片
					if(is_array($aUser['mbPhotos'])){
						$aUser['mbPhotos']['photos'][$key] = $url;
					}else{//第一次设置，mbPhotos=0
						$aUser['mbPhotos'] = array(
							"photos"=>array($key => $url),
							'awarded'=>0,
						);
					}
					(count($aUser['mbPhotos']['photos']) > $mbPhotoSwc) && ($aUser['mbPhotos']['photos'] = array_slice($aUser['mbPhotos']['photos'],0,$mbPhotoSwc,true));//只存指定的照片数
				}
				$aSet = oo::minfo()->set($mid, array('mbPhotos'=>$aUser['mbPhotos']));
				oo::lc()->sendEvent(of::getLogcenterSid(), $mid, 500000, array('上传照片人次' => 1));
			}
		}

		if($sUrl && (in_array($sid, array(79, 233)) || in_array(oo::$config['sid'],array(93,117)))) { //游客,博雅通行证
			$aSnd = array('uid' => $mid, 'lts_at' => time(), 'et_id' => 13016, 'mid' => $mid, 'img' => substr(strrchr($sUrl, '/'), 1), 's' . $sid => 1, 'r' . ($bDo ? 1 : 0) => 1,);
			oo::dc()->sendData(oo::$config['api'][$api][1], 23, $aSnd);
		}
		if($bDo) {
			$tmpKey = okey::mkDtaskCon($mid, 'rewchangepic');
			if($api == 29 && (functions::version_compare($param['version'], '5.6.0') >= 0)) {
				if(false === ocache::everyday()->get($tmpKey)) { // 当天第一次修改统计
					$dcData = array('uid' => $mid, 'lts_at' => time(), 'et_id' => 88805, 'cpic' => 1);
					oo::dc()->sendData(oo::$config['api'][$api][1], 23, $dcData);
				}
			}
			ocache::everyday()->set($tmpKey, array(1), (strtotime('tomorrow') - 1));
		}		
		$ret['result'] = ($bDo||$aSet) ? 1 : 0;
		return $this->genRet($mid, $ret);
	}
	/**
	 * 发送激活邮件
	 * @param $param
	 */
	public function addActivateEmail($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$langtype = $param['langtype'];
		oo::setLang($langtype); //设置语言文件
		$mid = (int)$param['mid'];
		if(!$memail = oo::member()->getUserEmail($mid)) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$thisTime = time();
		$link = "a={$mid}&e=" . urlencode($memail) . "&t=" . $thisTime . "&l={$langtype}&s=" . sha1($mid . "kefn93reErgiPo" . $memail . $thisTime);
		$link = oo::$config['baseUrl'] . "api/activation.php?q=" . base64_encode($link);
		$mqsubject = lang::$activateEmail['title'];
		$mqbody = str_replace(array('{link}'), array($link), lang::$activateEmail['body']);
		//oo::mailqueue()->addOne( $mid, 3, $memail, $mqsubject, $mqbody );
		$ret['result'] = 1;
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 上报iphone单机游戏活跃
	 * @param  $param
	 */
	public function singleGame($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$unid = (int)$param['unid'];
		$type = (int)$param['param']['type']; //是否有网络  1为有网，0为无网
		$count = (int)$param['param']['count']; //是否有网络  1为有网，0为无网
		if(!in_array($type, array(0, 1))) {
			$ret['result'] = -2;
			return $this->genRet($mid, $ret);
		}
		$count = $count ? $count : 1;
		$ret['result'] = 1;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取微游戏大厅邀请/ 房间邀请 所要数据
	 *
	 * @param Array $param
	 * @return Mixed
	 */
	public function getHallInvite($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid']; //登录用户的mid
		$sid = (int)$param['sid'];
		$api = (int)$param['api'];
		if($api == 35) { //腾讯微博
			$aList = oo::lottery()->gettappEvent($mid);
			if(!($aList && is_array($aList))) { //没有数据
				$ret['result'] = 3;
				$ret['list'] = array();
				return $this->genRet($mid, $ret);
			}

			$aFriends = oo::friends()->getIdList($mid, 0); //现有的好友
			$aMinfo = oo::minfo()->getFieldsMulti($aFriends, array('sitemid'));
			foreach((array)$aMinfo as $v) {
				$aSiteMids[] = $v['sitemid'];
			}

			$aRet = array();
			$i = 0;
			foreach($aList as $k => $v) {
				if(in_array((int)$v['uid'], $aSiteMids)) {
					continue;
				}

				$aRet[$i]['uid'] = (int)hexdec($v['uid']); //平台ID
				$aRet[$i]['name'] = (string)$v['name']; //昵称
				$aRet[$i]['realname'] = (string)$v['realname']; //真名
				$aRet[$i]['pic_square'] = (string)$v['headurl'] . '/50'; //小头像
				$aRet[$i]['big_pic'] = (string)$v['headurl'] . '/200'; //大头像
				$i++;
			}
		} else {
			$aList = oo::lottery()->getWYXEvent($mid, 5); //互粉信息详细数据
			if(!($aList && is_array($aList))) { //没有数据
				$ret['result'] = 3;
				$ret['list'] = array();
				return $this->genRet($mid, $ret);
			}

			$aFriends = oo::friends()->getIdList($mid, 0); //现有的好友
			$aMinfo = oo::minfo()->getFieldsMulti($aFriends, array('sitemid'));
			foreach((array)$aMinfo as $v) {
				$aSiteMids[] = $v['sitemid'];
			}

			$aRet = array();
			$i = 0;
			foreach($aList as $k => $v) {
				if(in_array((int)$v['id'], $aSiteMids)) {
					continue;
				}
				$aRet[$i]['uid'] = (int)$v['id']; //平台ID
				$aRet[$i]['name'] = (string)$v['screen_name']; //昵称
				$aRet[$i]['realname'] = (string)$v['name']; //真名
				$aRet[$i]['pic_square'] = (string)$v['profile_image_url']; //小头像
				$aRet[$i]['big_pic'] = (string)$v['head_image_url']; //大头像
				$i++;
			}
		}
		$ret['result'] = 1;
		$ret['list'] = $aRet;

		return $this->genRet($mid, $ret);
	}

	/**
	 * 跟踪玩家所属桌子
	 *
	 * @param type $param
	 * @return type
	 */
	public function trackUser($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('tid' => 0));
		}

		$api = intval($param['api']);

		if(!$fmid = functions::uint($param['param']['fmid'])) {
			return $this->genRet($param['mid'], array('tid' => 0));
		}
		$aOnline = oo::membertable()->onlineinfo($fmid);
		if(in_array($api, array(89)) && $aOnline['tid']) { //ipad QQ没有淘汰赛,若好友在pc淘汰赛移动需要将状态改为大厅
			$tInfo = oo::tables()->getTableById($aOnline['tid'], true, array('ttype'));
			if($tInfo['ttype'] == 4) {
				$aOnline['mtstatus'] = 0; //设置用户在玩状态为大厅
				$aOnline['tid'] = 0; //当前所在桌子ID为0
			}
		}

		return $this->genRet($param['mid'], array('tid' => (int)$aOnline['tid']));
	}

	/**
	 * 获取移动设备的系统消息
	 * @param array $param
	 * @return array
	 */
	public function getNoticeForPhone($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$unid = functions::uint($param['unid'])) {
			$ret['result'] = -3;
			return $this->genRet($param['mid'], $ret);
		}
		in_array($param['api'], array(10, 21, 23, 35, 56, 60, 61)) && $unid = oo::$config['api'][$param['api']][1]; //得到sid
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		if(!$mid = functions::uint($param['mid'])){
            $ret['result'] = -4;
			return $this->genRet($param['mid'], $ret);
        }
		$langfix = oo::$config['language'][$param['langtype']];
		$ret['result'] = 1;
		if(oo::$config['noticev2']){
			$ret['noticeList'] = oo::noticev2()->getNotice($mid, $langfix, $api, $param['version']);
			//整合pc的个人消息
			if(oo::$config['showMsgAtMobile']){
				$aMessage = oo::msg($langfix)->getMsgForMobile($mid);
				$ret['noticeList'] =array_merge($ret['noticeList'],$aMessage);
			}
			return $this->genRet($mid, $ret);
		}
		$noticeList = array();
		oo::setLang($param['langtype']);
		if(functions::uint($mid) && of::isAndroid($api)) { //兼容安卓不支持系统消息
			$param['param']['getAll'] = 1;
		}
		$noticeList = oo::notice()->getUserMessage($mid, $unid, $param);

		foreach($noticeList as $key => &$item) {
			is_array($item['title']) && ($item['title'] = $item['title'][$param['langtype']]);
			is_array($item['content']) && ($item['content'] = $item['content'][$param['langtype']]);
			$item['time'] = date('Y-m-d', strtotime($item['time']));
		}
		$msgKey = okey::mksm(oo::$config['api'][$api][1]) . "|{$mid}";
		$additionalMsg = ocache::cache()->get($msgKey);
		if($additionalMsg) {
			if((of::isRealIpad($param['api']) && $param['param']['typeIds'] == 2) || !of::isRealIpad($param['api'])) {
				$langKey = "msg{$additionalMsg}";
				if(isset(lang::$iphoneAct[$langKey])) {
					$tempMsg['title'] = lang::$iphoneAct[$langKey]['title'];
					$tempMsg['content'] = lang::$iphoneAct[$langKey]['content'];
					$tempMsg['time'] = date('Y-m-d', strtotime('today'));
					$tempMsg['type'] = 2;
				}
				$noticeList[] = $tempMsg;
			}
		}
		$mbPhotoSwc = oo::mobileConfig()->getSwc($api, 'mbPhotos');
		if($mbPhotoSwc){
			$photosKey 		= okey::noticeMbPhotosKey($mid);
			$mbPhotosNotice = ocache::cache()->get($photosKey);
			if($mbPhotosNotice){
				foreach((array)$mbPhotosNotice as $one){
					$desc = $one['desc'][$langfix];
					if(empty($one) || empty($desc))continue;
					$temp['title']	= '';
					$temp['content']= $desc;
					$temp['time'] 	= date('Y-m-d',$one['time']);
					$temp['type'] 	= 2;
					$noticeList[] 	= $temp;
				}
			}
		}
		$ret['noticeList'] = (array)$noticeList;
		//整合pc的个人消息
		if(oo::$config['showMsgAtMobile']){
			$aMessage = oo::msg($langfix)->getMsgForMobile($mid);
			$ret['noticeList'] =array_merge($ret['noticeList'],$aMessage);
		}

		if(in_array(oo::$config['sid'], array(93, 117))){//把公告列表配置的放到系统公告这里
			$uInfo = oo::minfo()->getMinfo($mid, array('mtime', 'sid', 'mvip'));
			$aNotice = oo::notice()->getNotice($mid, $uInfo, true);
			if($aNotice && is_array($aNotice)){
				foreach ($aNotice as $key=>$val) {
					$ret['noticeList'][] = array(
						'title' => $val['nttitle'],
						'content' => strip_tags($val['ntcontent']),
						'time' => date('Y-m-d', $val['time']),
						'type' => 2,
						'creatTime' => $val['time'],
					);
				}
			}
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取用户未读的信息条数
	 * @param array $param
	 * @return int
	 */
	public function getNoticeNum($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$unid = functions::uint($param['unid'])) {
			$ret['result'] = -3;
			return $this->genRet($mid, $ret);
		}
		$langtype = (int)$param['langtype'];
		$sid = (int)$param['sid'];
		oo::setLang($param['langtype']); //设置语言文件
		in_array($param['api'], array(21, 23, 35, 56)) && $unid = oo::$config['api'][$param['api']][1]; //得到sid

        if(oo::$config['noticev2']){
            $langfix = isset(oo::$config['language'][$langtype]) ? oo::$config['language'][$langtype] : oo::$config['langfix'];
            $noticeNum = oo::noticev2()->getNotice($mid, $langfix, $param['api'], $param['version'], 1);
        }else{
            $noticeNum = oo::notice()->getUserMessageNumber($mid, $unid); //系统消息
        }

		$userMessageNum = oo::member()->getUserMessageNum($mid); //个人消息

		if(oo::$config['mbnewwinlog'] == 1){
			$bag = oo::logs()->getMbWinLog($mid, $langtype, $sid);
			foreach($bag['bag'] as $k =>$v){
				if ($v)$ret['bag'] += 1;
			} 
		}
		$ret['result'] = 1;
		$ret['noticeNum'] = (int)$noticeNum;
		$ret['userMessageNum'] = (int)$userMessageNum;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 玩够30局牌，送3次免验证码输入机会
	 *
	 * @param Mixed $param
	 * @return Mixed
	 */
	public function giveFreeValid($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}

		$mid = (int)$param['mid'];
		$aMgi = oo::memberGameinfo()->getMgi($mid); //用户游戏信息
		$gameCount = oo::memberlog()->getNormal( $mid );
		if($gameCount >= 30 && oo::logs()->limitCount($mid, 24, 1) <= 1) {
			$ret['result'] = 1;
		} else {
			$ret['result'] = 0;
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取用户最新信息
	 * @param array $param
	 * return array
	 */
	public function getUserNewInfo($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$aMgi = oo::memberGameinfo()->getMgi($mid); //用户游戏信息
		$ret['result'] = 1;
		$aExt['winCount'] = (int)$aMgi['winCount']; //赢的局数
		$aExt['loseCount'] = (int)$aMgi['loseCount']; //输的局数
		$aExt['userSkillExp'] = $aMgi['userSkillExp'];
		if(isset(oo::$config['mbGoldFrame']) && oo::$config['mbGoldFrame'] > 0 && in_array($param['api'], array(98))) {
			$userExpired = (int)ocache::kvs()->get(okey::mkMbGoldFrame($mid));
			$GFExpired = oo::$config['mbGFExpired'] ? oo::$config['mbGFExpired'] : 1231;
			$goldFrameExpired = intval(date('Y') . $GFExpired);
			$aExt['goldFrame'] = ($userExpired != $goldFrameExpired ? 0 : 1);
		}
		$ret['info'] = $aExt;
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 离线登录奖励
	 * @param array $param
	 * @return array
	 */
	public function offlineReward($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array('-1'));
		}

		$mid = (int)$param['mid'];
		$api = (int)$param['api'];

		$aUser = oo::minfo()->getMinfo($mid, array('unid'));

		if($aUser['mid'] != $mid) {
			return $this->genRet($mid, array('-2'));
		}

		$aReward = oo::member()->offlineReward($mid, true, false, $aUser['unid']); //领取离线奖励，暂不区分VIP

		$iReward = (int)$aReward[0];

		if($iReward > 0) { //领奖成功
			$ret['reward'] = $iReward;
			$ret['mmoney'] = (int)$aReward[1];
		} else {
			$ret['errorCode'] = 1;
			$ret['dec'] = '';
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * 加关注
	 * @param array $param
	 * @return array
	 */
	public function addFollow($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array());
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$fmid = (int)$param['param']['fmid'];
		$type = (int)$param['param']['type']; //0检查是否关注过，1加关注

		$aMember = oo::minfo()->getMinfo($fmid, array('sitemid'));

		if($api == 21) { //iphone微游戏HTML5
			if($type == 1) { //微游戏暂不提供加关注API，请求加关注则只返回被关注人sitemid
				return $this->genRet($mid, array('result' => 1, 'fsitemid' => $aMember['sitemid']));
			}

			@include PATH_LIB . 'class.weiyouxiclient.php';
			$_GET = (array)$param['param']; //需要session_key和signature
			$wyxClient = new WeiyouxiClient(oo::$config['sina_api_key_iphone_html5'], oo::$config['sina_api_secret_iphone_html5']);
			if($type == 1) { //加关注
				$wyxClient->get('friendships/create', array('user_id' => $aMember['sitemid']));
				$result = ($httpCode = $wyxClient->getHttpCode()) == 400 ? 0 : ($httpCode == 403 ? 2 : 1);
			} else { //是否关注过
				$data = $wyxClient->get('friendships/show', array('target_id' => $aMember['sitemid']));
				$result = isset($data['target']) ? (true === $data['target']['followed_by'] ? 2 : 1) : 0;
			}
		}
		return $this->genRet($mid, array('result' => (int)$result)); //0失败，1成功，2已关注过
	}


	/**
	 * 移动获取更新包列表
	 * @param $param
	 * @return array
	 */
	public function getVersionUpdate($param) {
		if (!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$ret = array();
		$ret['versionUpdate'] = oo::mobilePkgUpdate()->getVersionUpdate($api,(array)$param['param']);
		if(empty($ret['versionUpdate']))  unset($ret['versionUpdate']);
		return $this->genRet($mid, $ret);
	}
	/**
	 * 客户端预登录(获取版本更新信息)
	 *
	 * @param array $param
	 * @return array
	 */
	public function prelogin($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			$ret['desc'] = '参数有问题';
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$version = $param['version'];
		$langCode = (int)$param['langtype'];
		$unid = oo::$config['api'][$api][1];
		$now = time();

		// 挂靠主站的站点，商品信息独立
		if (isset($param['unid']) && isset(oo::$config['detachStatV2'][$api]) && array_key_exists($param['unid'], oo::$config['detachStatV2'][$api])) {
			$unid = $param['unid'];
			$api = oo::$config['detachStatV2'][$api][$unid];
		}
		if (of::isIphone($api)) {//ios审核总开关
			$ret['iosCheck'] = oo::mobileConfig()->getSwc($api, 'iosCheck') ? 1 : 0;
		}
		if(oo::$config['dynamicHost']) { //动态域名开关
			$sWebVersion = (int)$param['param']['webVersion']; //动态域名版本号
			$sHostVersion = oo::mobileConfig()->getCommonConfigField($api, 'webHost');
			$ret['webStatus'] = ($sWebVersion < $sHostVersion) ? 1 : 0; //小于服务器版本需要更新
			$ret['webVersion'] = $sHostVersion;
		}
		$appid = (int)$param['param']['appid'];
		$appkey = (string)$param['param']['appkey'];
		$mobid = (string)$param['param']['mobid'];
		$is_overseas = (int)$param['param']['is_overseas'];

		$cid = (string)$param['param']['cid']; //32位字符串，由渠道联盟统一分发。
		$deno = (string)$param['param']['deno']; //设备编号

		if(in_array(_API_, array(25, 28, 61, 89))) {
			oo::adstat()->asynPostLunch($api, $version); //简体ios正版广告统计上报代码
		}
		if((oo::$config['channelUnion'] == 1) && $cid) { //渠道联盟cid
			$aChannlData = array('cid' => $cid, 'd' => $deno);
			oo::andrstart()->channelPromo(0, 1, 1, $aChannlData); //启动
		}

		// 此处的上报数据格式有问题 且 上报接口为Stats.countStartInfo。 若这里再上报，则会上报2份数据。故注释掉
		//$appid && oo::andrstart()->androidPromo(0, 1, 1, array('appid' => $appid, 'appkey' => $appkey, 'mobid' => $mobid, 'is_overseas' => $is_overseas, false, false, $unid));

		$ret['list'] = array();
		$img = array('cup' => array('cup_close.png', 'cup_open.png'), 'default' => array('close.png', 'open.png'),);
		$no_default = oo::mobileConfig()->getSwc($api, 'baoxiang');
		$close_img = $no_default ? $img['cup'][0] : $img['default'][0];
		$open_img = $no_default ? $img['cup'][1] : $img['default'][1];
		$img_dir = oo::$config['imagesUrl'] . 'mobile/rewards/';
		$ret['list'] = array('open' => $img_dir . $open_img . '?v=' . $vers, 'close' => $img_dir . $close_img . '?v=' . $vers);
		if (oo::mobileConfig()->getSwc($api, 'baoxiangV1')) {
			$aCnf = oo::mobileConfig()->getDeploy($api, 'playReward'); //加载配置
			unset($ret['list']);
			if (is_array($aCnf['reward'])) {
				$img_dir = oo::$config['imagesUrl'] . 'mobile/rewards/';
				$img = array();
				foreach ($aCnf['reward'] as $k => $v) {
					if ($now < $v['stime'] || $now > $v['etime']) {
						continue;
					}
					$img[0] = $v['blind'][0];
					$img[1] = $v['blind'][1];
					$img[2] = $img_dir . $v['img'][0] . '?v=' . $vers;
					$img[3] = $img_dir . $v['img'][1] . '?v=' . $vers;
					$ret['list'][] = $img;
				}
			}
			//不存在配置时的默认图片
			$aBlindRange = oo::tables()->aTblindmin;
			$blindRange = $aBlindRange[oo::$config['sid']];
			array_unshift($blindRange, 0);
			array_push($blindRange, 10000000 * oo::$config['blowup']);
			$rangeCnt = count($blindRange) - 1;
			$chestImgDir = oo::$config['cdn'] . 'mobile/chest/';
			for ($i = 0; $i < $rangeCnt; $i++) {
				$ret['list'][] = array($blindRange[$i], $blindRange[$i + 1], "{$chestImgDir}{$i}o.png", "{$chestImgDir}{$i}.png");
			}
		}
		$xTunnelVerify = functions::isUseXTunnelVerify($api, $version) ? functions::getXTunnelVerify($api) : null;
		if($xTunnelVerify) {
			//ios上报新设备启动次数
			if(of::isIphone($api)) {
				$users = oo::deviceloginlog()->usersGet($xTunnelVerify['macID']);
				$md5Addr = MD5($xTunnelVerify['macAddr']); //原始
			} else {
				$md5Addr = $xTunnelVerify['macID']; //MD5处理过
			}
		}

		//获取一条闪屏
		$isOpen = (in_array($api, array(26, 42, 50, 32, 44, 52, 48, 62, 31, 64, 66, 55, 63, 128, 130)) or oo::mobileConfig()->getSwc(_API_, 'splashSwitch'));//闪屏开关
		if(isset($param['param']['splash']) && $isOpen) { //android 简 繁 泰 多语言安卓
			$langtype = oo::$config['language'][$langCode];
			$splashs = oo::mobileSplashs()->get($api, $langtype);
			$ret['splashs'] = $splashs;
		}
		$ret['result'] = 1;
		$clientBreak = (int)$param['param']['clientBreak']; //clientBreak  客户端传1代表是越狱 0是正常客户端
		if(!$appid && $api == 29 && !empty($xTunnelVerify['macID'])){
			$appid = ocache::free()->get(okey::mkUdid2appid($xTunnelVerify['macID'],$api,''));
			ocache::free()->delete(okey::mkUdid2appid($xTunnelVerify['macID'],$api,''));
		}

		$update = $this->_getClientVersion($api, $version, $clientBreak, $appid, $langCode, $param);
		$sileceUpv1 = (isset(oo::$config['silenceUp']) && oo::$config['silenceUp']) && (in_array($api, array(44, 64, 55, 62,165)));
		if(oo::mobileConfig()->getSwc(_API_, 'silenceUpv2') or $sileceUpv1) {
			is_array($update) || ($update = array());
			$clientBreak = isset($param['param']['clientBreak']) ? (int)$param['param']['clientBreak'] : 0;
			$version = $param['version'];
			$silenceUp = oo::versions()->getSilenceUpdate($api, $version, $clientBreak, 0);
			$update['silence'] = $silenceUp['silence'];
			$update['force'] = $silenceUp['force'];
			$update['source'] = $silenceUp['source'];
		}

		if($api == 29 && !empty($xTunnelVerify['macID']) && in_array($param['version'],array('5.4.1', '6.1.5'))  ){ // fuck,该渠道发错包要强制更新
			$tmpAppid = ocache::free()->get(okey::mkUdid2appid($xTunnelVerify['macID'],$api,''));
			ocache::free()->delete(okey::mkUdid2appid($xTunnelVerify['macID'],$api,''));
			if(intval($tmpAppid) == 114024){
				$update['type'] = 1;
				$update['url'] = 'http://amzcs01.static.boyaagame.com/bigfile/guowai/poker.apk';
				$update['desc'] = 'กำลังอัพเดทฐานข้อมูล';
				$update['content'] = '';
			}
		}
		
		if(oo::$config['forceUpgradeApk']){ //强制升级
			$updateCfg = explode(',', oo::$config['forceUpgradeApk']);
			list($adrLmtVer, $iosLmtVer, $android_id, $ios_id, $awdAid) = $updateCfg;
			//||(of::isAndroid($api) && functions::version_compare($version, $adrLmtVer) < 0)
			if((of::isIphone($api) && in_array(_API_,array(25,60)) && functions::version_compare($version, $iosLmtVer) < 0)){
				$update['type'] = 1;
				$update['url'] = of::isIphone($api) ? 'http://itunes.apple.com/cn/app/bo-ya-de-zhou-pu-ke/id490939135?mt=8' 
						: 'http://bigfile-ws-1.static.17c.cn/bigfile-ws/guonei/5.9.5_release_boyaa_100149.apk';
				$update['desc'] = "为给您提供更好的游戏体验，请您升级到最新版本，并前往活动中心领取一份专属惊喜大礼包吧！";
			}
		}

		if( in_array( $api, array(226,227) ) ){//乐视开放专场比赛,http://mp.oa.com/?do=planGantt&p=125890# 需求地址
			$ret['LeshiMtt'] = false;
			$mtts = (array)oo::$config['mttmatchnew'];
			foreach($mtts as $onemtt){
				$leshimtt = stristr($onemtt['tips'],'乐视')? true : false;
				if($leshimtt){
					$ret['LeshiMtt'] = true;
					break;
				}
			}
		}

		if( in_array( $api, array(237,238) ) ){//斗牌开放专场比赛,同乐视一样
			$ret['DoupaiMtt'] = false;
			$mtts = (array)oo::$config['mttmatchnew'];
			foreach($mtts as $onemtt){
				$leshimtt = stristr($onemtt['tips'],'斗牌')? true : false;
				if($leshimtt){
					$ret['DoupaiMtt'] = true;
					break;
				}
			}
		}
		
		//百度贴吧115081渠道
		if($api == 36){
			$ret['baidutieba'] = oo::mobileConfig()->getSwc($api, 'iosCheck',$mid) ? 1 : 0;//针对渠道号为115081做开关
			//$ret['baidutieba'] = 1;
		}
		
		//百度品宣     
		if(in_array($api,array(246,247))){
			$ret['baidupinxuan'] = oo::mobileConfig()->getSwc($api, 'iosCheck',$mid) ? 1 : 0;//百度品宣，审核开关打开，返回1
		}elseif(oo::mobileConfig()->getSwc($api, 'closeBrand')){//品宣开关
			$ret['baidupinxuan'] = 0;//返回0时不显示 1时显示
		}else{
			$ret['baidupinxuan'] = 1;
		}
		

		if( in_array( $api, array(116,117) ) ){//华为开放专场比赛,同乐视一样
			$ret['HuaweiMtt'] = false;
			$mtts = (array)oo::$config['mttmatchnew'];
			foreach($mtts as $onemtt){
				$leshimtt = stristr($onemtt['tips'],'华为')? true : false;
				if($leshimtt){
					$ret['HuaweiMtt'] = true;
					break;
				}
			}
		}

		//电视机版本
		if(oo::mobileConfig()->getSwc($api, 'updateimage')) { //电视机导用户
			$ret['updateimage'] = in_array(oo::$config['sid'], array(117)) ? oo::$config['imagesUrl'] . "tv_export.png" : oo::$config['imagesUrl'] . "tv_export_{$api}.png";
		}
		//模块安装 配置包下载CDN地址
		if(isset($param['param']['curver'])  && oo::mobileConfig()->getSwc($api, 'pkgupd')) {
			$curver = $param['param']['curver'];
			$cfg=oo::mobilePkgUpdate()->builtPkgUrl($api,$curver,$appid);
			if(!empty($cfg)){
				$ret['pakageInfo']= $cfg;
			}
		}
		if($iconType = (int)oo::mobileConfig()->getSwc($api, 'iconType')){//左下角按钮值
			$ret['bpt'] = $iconType;
		}else{
			//使用v3的条件控制客户端入口图标 其实最好在System.init里控制，这才不用重复运算
			$ret['bpt'] = (int)oo::ac('base')->checkOneCond(array(
					'mid' => $mid,
					'sid' => $unid,
					'tplid' => 104,
					'subkey' => 'bpt',
			));
		}
		
		if(oo::mobileConfig()->getSwc($api, 'mbGameHall')){
			$ret['mbGameHall'] = oo::mobileConfig()->mbGameHall($api);
		}
		//安全中心 针对ios拿不到唯一标识后端伪造一个
		if(isset($param['param']['iosUdid']) && $param['param']['iosUdid']==1 && of::isIphone($api)){
			$ret['iosUdid'] = functions::genGUID('');
		}

		//主推平台账户注册加送游戏币
		$masterAccountCfg = oo::mobileConfig()->getSwc($api, 'masterAccount');
		$blow = max(oo::$config['blowup'], 1);
		$aNone = array();
		$aCfg = explode(',', $masterAccountCfg);
		foreach ((array)$aCfg as $one) {//$one 185-1000
			if (empty($one)) continue;
			$aOne = explode('-', $one);
			if (oo::$config['sid'] == 197 && functions::version_compare($version, '7.0.0') >0 ) {//一个api多个平台登录的情况下。185-1000,232-800
				$aNone[] = array($aOne[0],(int)$aOne[1] * $blow);
			}else{
				$aNone[0] = $aOne[0];
				$aNone[1] = (int)$aOne[1] * $blow;
			}
		}
		$ret['masterAccount'] = $aNone;
		//IPHONE为过审而关闭博雅通行证登陆功能。
		//if(oo::mobileConfig()->getSwc($api, 'cloByLogin')) $ret['cloByLogin'] = 1;

		if($iconType){//当bpt左下角按钮打开时，传入2017bpt首页参数 
			$bptcfg = oo::ac('base')->cfgFid('104', 'bpt2017');
			$langtype = oo::$config['language'][$langCode];
			$ret['bptparam'] = $bptcfg['home'] && $bptcfg['home'][$langtype] ? $bptcfg['home'][$langtype] : array();
		}
		
		return $this->genRet($mid, $ret, $update);
	}


	/**
	 * 检查客户端是否有最新版本
	 *
	 * @param int $api 接口(应用)类型
	 * @param string $version 版本号
	 * @param string $clientBreak 客户端传1代表是越狱 0是正常客户端
	 * @param int $appid  渠道ID
	 * @param string $mid 如果mid不为0,则表示用户已登录
	 */
	private function _getClientVersion($api, $version, $clientBreak = 0, $appid = false,$language=0,$param=array()) {
		if(empty($api) || !isset(oo::$config['api'][$api]) || !file_exists(PATH_MOD . 'versions.php')) {
			return null;
		}
		$langfix = isset(oo::$config['language'][$language]) ? oo::$config['language'][$language] : oo::$config['langfix'];
		$ver = oo::mobileConfig()->getSwc($api, 'apkUpdateV2') ? oo::versions()->getLastestV2($api, $appid) : oo::versions()->getLastest($api, $clientBreak);
		$result = array('type' => -1, 'url' => '', 'desc' => '', 'content' => '', 'silence' => 0, 'force' => 0, 'source' => '','reward'=>'');
		if(!empty($ver) && $ver['cids'] && ($appid !== false)){
			$exChannel = array();
			if(strpos($ver['cids'], ',') !== false){
				$exChannel = explode(",", $ver['cids']);
			}else{
				$exChannel = explode("|", $ver['cids']);
			}
			if(in_array($appid, $exChannel)){	//不需要升级的渠道
				return $result;
			}
		}
		
		//5.7包更新临时处理
		$zhIgn = false;
		if(in_array(oo::$config['sid'], array(117, 93)) && in_array($api, array(25, 36, 60, 61, 65)) && isset($param['param']['curver'])){
// 			$isBoyaaIP = of::isBoyaaIp(functions::getip());//勿删
// 			if(in_array($ver['version'], array('7.7.96', '5.7.0')) && !$isBoyaaIP){
// 				return $result;
// 			}
			
			//简体主版本5.6升级到96才能更新主包
			if($param['param']['curver'] < 96){
				if(of::isAndroid($api) && functions::version_compare($version, '7.6.0') >= 0 && functions::version_compare($version, '7.7.0') < 0){
					$zhIgn = true;
				}elseif(of::isIphone($api) && functions::version_compare($version, '5.6.0') >= 0 && functions::version_compare($version, '5.7.0') < 0){
					$zhIgn = true;
				}
			}
			
			if($zhIgn !== true && $param['param']['curver'] < 97){
				if(of::isAndroid($api) && functions::version_compare($version, '7.7.0') >= 0 && functions::version_compare($version, '7.7.100') < 0){
					$zhIgn = true;
				}
// 				elseif(of::isIphone($api) && functions::version_compare($version, '5.7.0') >= 0 && functions::version_compare($version, '5.7.5') < 0){
// 					$zhIgn = true;
// 				}
			}
		}
		
		if($zhIgn) return $result;//简体跳过更新的版本
		
		$spcial = false;
		((in_array($api,array(128,140))) && version_compare($version, $ver['version']) != 0 && version_compare($version, '6.6.86')<=0) && $spcial=true;
		if(!empty($ver) && (functions::version_compare($version, $ver['version']) < 0 || $spcial)) {
			$result = array(
				'type' => $ver['control'],
				'url' => $ver['url'],
				'desc' => isset($ver['description'][$langfix]) ? $ver['description'][$langfix] : ($ver['description'] ? $ver['description'] : '') ,
				'content' => isset($ver['content'][$langfix])? $ver['content'][$langfix] : ($ver['content'] ? $ver['content'] : '') ,
				'reward' => isset($ver['reward'][$langfix]) ? $ver['reward'][$langfix] : ($ver['reward'] ? $ver['reward'] : '') ,
			);
			if ( in_array($api,array(26)) ) $result['desc'] = isset($ver['description'][$langfix]) ? $ver['description'][$langfix] : ( is_array($ver['description']) ? ($ver['description'][oo::$config['langfix']] ? $ver['description'][oo::$config['langfix']] : '') : $ver['description'] );
			if(of::isAndroid($api) && !of::isFacebook(oo::$config['sid'])) {
				$result['version'] = $ver['clientVer'];
			}
		}
		return $result;
	}

	/**
	 * 设置下一安全码弹出框
	 *
	 * @param type $param
	 * @return type
	 */
	public function nextPopTime($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array());
		}

		$ret['result'] = 0;

		if(oo::superaccount()->nextPopTime($param['mid'], time() + 7 * 24 * 3600) > 0) {
			$ret['result'] = 1;
		}

		return $this->genRet($mid, $ret);
	}

	/**
	 * 得到新消息中心消息消息信息
	 *
	 * @param type $param
	 * @return array
	 */
	public function getMessage($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		$language = oo::$config['language'][$param['langtype']];
		if(is_file(PATH_LNG . "msg.{$language}.php")) {
			require(PATH_LNG . "msg.{$language}.php");
		} else {
			$aMsgType = array();
		}
		$aMessage = oo::notice()->getMessage($mid);
		$aMessage = array_reverse($aMessage, true);
		foreach($aMessage as $key => $msg) {
			if(in_array($api, array(23)) && (!in_array($msg['type'], array(1, 2, 3, 4, 5, 9, 10, 14, 16, 17, 18, 19, 20, 35, 36)))) { //只显示一部分
				continue;
			}
			$aSearch = $aReplace = array();
			foreach($msg as $mk => $mv) {
				$aSearch[] = '{' . $mk . '}';
				$aReplace[] = $mv;
			}
			$aMessage_list[$key]['desc'] = str_replace($aSearch, $aReplace, $aMsgType[$msg['type']]['desc']);
			$aMessage_list[$key]['time'] = date('Y-m-d H:s', $aMessage_list[$key]['time']);
			if(in_array($msg['type'], array(10, 17, 18, 19, 20))) { //特殊替换下日期
				$aMessage_list[$key]['desc'] = str_replace(array('{nick}', '{date1}', '{date2}', '{goods}'), array($msg['nick'], date('m-d H:i', $msg['time']), date('m-d H:i', $msg['time'] + 48 * 3600), $msg['goods']), $aMsgType[$msg['type']]['desc']);
			}

			if(in_array($msg['type'], array(1, 2, 3, 4, 5, 13))) {
				$aMember = oo::minfo()->getMinfo($msg['fmid'], array('mnick', 'sitemid'));
				$aMessage_list[$key]['sender'] = array('mnick' => $aMember['mnick'], 'sitemid' => $aMember['sitemid']);
				$aMessage_list[$key]['desc'] = str_replace('{mnick}', $aMember['mnick'], $aMessage_list[$key]['desc']);
			}

		}
		$ret['result'] = 1;
		$ret['msg'] = $aMessage_list;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 新消息中心消息处理
	 *
	 * @param type $param
	 * @return array
	 */
	public function dealMessage($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$op = (int)$param['op'];
		$msgid = (array)$param['msgid'];
		$aDealRet = oo::notice()->dealMessage($mid, $msgid, $op);
		if($aDealRet) {
			$aSender = oo::minfo()->getMinfo($aDealRet['fmid'], array('mnick', 'sitemid'));
			$aDealRet['sender'] = (string)$aSender['mnick'];
			$aDealRet['target_id'] = (string)$aSender['sitemid'];
		}
		$ret['result'] = 1;
		$ret['deal'] = $aDealRet;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 邀请回调,记录邀请的人
	 *
	 * @param type $param
	 * @return array
	 */
	public function inviteback($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$sitemids = (array)$param['sitemids'];
		$type = (int)$param['type'];
		oo::friends()->setInvite($mid, $sitemids, $type, 30); //记录发送列表  保存30天
		$api = (int)$param['api'];
		$sitemid = (int)$param['param']['sitemid'];
		$statsid = oo::$config['api'][$api][1]; //统计的sid

		$ret['result'] = 1;
		return $this->genRet($param['mid'], $ret);
	}

	
	/**
	 * 新版的好友列表接口，目的是优化好友列表的响应速度 简体5.9版本使用(大厅用)
	 * @param type $param
	 * @return type
	 */
	public function getFriendListHall($param){
		$start = microtime(1);
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			$ret['desc'] = "auth err";
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			$ret['desc'] = "mid err";
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		$mid = intval($param['mid']);

		$aMids = (array)oo::friends()->getIdList($mid, 0);//查找朋友的id
		$aMids = array(97740);
		//排一下序
		$aUsers = oo::minfo()->getFieldsMulti($aMids, array('mactivetime') );
		$aSort = array(array(), array(), array(), array()); //在玩,旁观,在线,离线
		foreach($aMids as $v) {
			if(!$aUsers[$v]) continue;//不存在的好友、minfo里没有数据的好友
			if($aStats[$v][1] == 2) { //在玩
				$aSort[0][] = $v;
			} elseif($aStats[$v][0] > 0) { //旁观
				$aSort[1][] = $v;
			} elseif(isset($aStats[$v])) { //在线
				$aSort[2][] = $v;
			} else { //离线
				$aSort[3][$v] = $v;//$aUsers[$v]['mactivetime']; //按最后登录时间
			}
		}
		$aList = array_merge($aSort[0], $aSort[1], $aSort[2], $aSort[3]);
		$ret['list'] = $aList;//排序过的好友mid列表
		
		oo::setLang($param['langtype']);
		
		//基础个人信息
		$aFields = array('mnick','micon','mbig','mmoney'); //mactivetime PC用户的登陆时间，PC仅在第一次登陆的时间
		$aUsers = oo::minfo()->getFieldsMulti($aList, $aFields);
		
		//查看在线情况,为了能够追踪好友
		//$aList = array(80756,90624,72051,97988,13287,79364,7218,91131,96090,76202);
		$onlineinfo = oo::membertable()->getMultionlineinfo($aList);
		//p($onlineinfo);
		$whiteList = array(0, 1, 2, 3, 4 , 6, 7, 13, 30, 38); //移动可好友追踪桌子白名单
		oo::$config['act824_mttOB'] && $whiteList[] = 11;//锦标赛旁观总开关开启 锦标赛全面开放

		if(!isset(oo::$config['mbprechip'])){//屏蔽必下房
			$prechipUnFit = true;
		}else{
			$prechipUnFit = (oo::$config['mbprechip'] && !oo::mobileConfig()->getSwitchValue($mid, 'prechipSwitch'));
		}
		$obSvids = !empty(oo::$config['act824_obArr']) ? (array)explode(',', oo::$config['act824_obArr']) : array();//锦标赛旁观灰度svid
		$tids = array();//tid列表，为了取桌子信息，根据不同的桌子信息决定是否屏蔽追踪
		foreach($onlineinfo as $one){
			$one['tid'] && $tids[] = $one['tid'];//把tid取出来
		}
		$tinfo = oo::tables()->getTablesByIds($tids, true, array('tpostion','Allprechip','tattr','privateRoom','tname','tname_'.oo::$config['langfix'],'svid', 'tpassword','tplayermax','tvip'));
		foreach($onlineinfo as $mid => $one){
			$aUsers[$mid]['tid'] = (int)$one['tid'] ? (int)$one['mtstatus'] : -1;
			$aUsers[$mid]['mtstatus'] = (int)$one['mtstatus'] ? (int)$one['mtstatus'] : -1;
			
			if( ($one['tid'] == 0) && (time() - $one['mttime'] > 5 * 60)){ //5分钟无动作表现为离线
				$aUsers[$mid]['tid'] = -1;
				$aUsers[$mid]['mtstatus'] = -1;
			}
			
			$tInfo = $tinfo[$one['tid']] ? $tinfo[$one['tid']] : null; 
			if(!in_array($tInfo['ttype'], $whiteList)){
				if(!in_array($tinfo['svid'],$obSvids)){ //锦标赛旁观灰度，在灰度里面的svid放行
					$aUsers['mtstatus'] = 0;
					$aUsers['tid'] = 0;
				}
			}
			if($tInfo['ttype'] == 4 && oo::mobileConfig()->getSwc($api, 'newsnglimit')){
				$aUsers['mtstatus'] = 0;
				$aUsers['tid'] = 0;
			}
			//屏蔽pc专用且非私人房间
			if($tInfo['tpostion'] == 1 && $tInfo['privateRoom'] == 0){
				$aUsers['mtstatus'] = 0;
				$aUsers['tid'] = 0;
			}
			//屏蔽必下房
			if($tInfo['Allprechip'] > 0 && $prechipUnFit){
				$aUsers['mtstatus'] = 0;
				$aUsers['tid'] = 0;
			}
			if(isset($tInfo['tattr'])){
				$tattr = json_decode($tInfo['tattr'], true);
				//屏蔽pc简化场
				if(isset($tattr['simple']) && $tattr['simple'] == 1){
					$aUsers['mtstatus'] = 0;
					$aUsers['tid'] = 0;
				}
			}
			//ipad QQ没有淘汰赛,若好友在pc淘汰赛移动需要将状态改为大厅
			if((in_array($api, array(89)) && $tInfo['ttype'] == 4)) {
				$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
				$aUsers['tid'] = 0; //当前所在桌子ID为0
			}
			if( (of::isAndroid($api) || of::isIphone($api)) && $tInfo['ttype'] == 20){//移动荷官场不能被追踪
				$aUsers['mtstatus'] = 0;
				$aUsers['tid'] = 0;
			}
			//晋级赛
			if($tInfo['ttype'] == 7 && !in_array($api, array(14,61,25,19))){//iphone繁简泰
				$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
				$aUsers['tid'] = 0; //当前所在桌子ID为0
			}

			//移动淘汰赛不能进入二、三、四人场
			if($tInfo['ttype'] == 4){
				if(in_array((int)$tInfo['tplayermax'], array(2,3,4))) {
					$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
					$aUsers['tid'] = 0; //当前所在桌子ID为0
				}
				if(oo::$config['openSngV3_1'] && $tInfo['tpassword']){//客户端不支持有密码的追踪 先屏蔽
					$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
					$aUsers['tid'] = 0; //当前所在桌子ID为0
				}
			}

			if($api == 98 && isset(oo::$config['mbSimpleTableRule']) && oo::$config['mbSimpleTableRule'] == 1 && !in_array((int)$tInfo['tplayermax'], array(5)) &&  !in_array($tInfo['ttype'], array(0,1,2,3, 6))    ){//新浪简化版的规则
				$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
				$aUsers['tid'] = 0; //当前所在桌子ID为0
			}

			if($aUsers['tid'] && oo::$config['friendsRoomFilterTables'] && $tInfo['tattr'] && oo::tables()->isFriendsRoom($aUsers['tid'], $tInfo['tattr']) ){//好友俱乐部房间过滤
				$aUsers['mtstatus'] = 0; //设置用户在玩状态为大厅
				$aUsers['tid'] = 0; //当前所在桌子ID为0
			}
			
		}
		$ret['info'] = $aUsers;//好友的详细信息
		
		//查询有没有给好友赠送过游戏币
		//批量查询
		if(is_array($aList)){
			if(count($aList) > 64){
				$aList = array_slice($aList, 0, 64);
			}
			$receive = array();
			$apiArray = oo::presents()->batchReceivable($mid, $aList);
			foreach ($aList as $to){
				$receive[$to] = ($apiArray[$to] > 0 ? 1 : $apiArray[$to]);
			}
		//单条查询
		}else{
			$receivable = oo::presents()->receivable($mid, $aList);
			$receive =($receivable > 0 ? 1 : $receivable);
		}
		$ret['receivable'] = $receive;
		$ret['usetimr']  = microtime(1) - $start;
		return $this->genRet($mid, $ret);
	}
	
	/**
	 * 获取好友列表
	 * @param array $param
	 * @return array
	 */
	public function getFriendList($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$type = (int)$param['param']['type'];
		$dating = (int)$param['param']['dating']; //是否大厅显示
		$tid = (int)$param['param']['tid'];
		if($tid == 0){
			$dating = 1;
		}
		$langtype = (int)$param['langtype'];
		$lang = oo::$config['language'][$langtype];

		$ret = array('result' => 0, 'list' => array());

		
		
		if((!in_array($type, array(4, 6))) || (!$aMids = oo::friends()->getIdList($mid, 0))) { //类型不支持|没有好友
			return $this->genRet($param['mid'], $ret);
		} elseif(count($aMids) > 5000) {
			
			$aMids = array_slice($aMids, 0, 5000);
		}
        $aMids = array_slice($aMids, 0, 5000);
		$iSort = oo::mobileConfig()->getSwc($api,'sortFriendsBySex');
		$aStats = oo::membertable()->getIdsStatus($aMids,$iSort);//获取好友的状态
		$aList = array(); //列表

		if($type == 6) { //邀请好友玩牌
			$aInfo = oo::minfo()->get($mid); //我的信息
			$aUsers = oo::minfo()->getFieldsMulti($aMids, array('unid', 'mmoney') );//批量获取好友的指定信息 
			$aOnlis = array_keys($aStats);
			$aInvis = array_intersect(array_keys(oo::friends()->pushFriends($api, $mid)), $aMids); //已邀请的好友(intersect:要求在$aMids内)
			$aUnInvis = array_diff($aMids, $aInvis); //没邀请过的
			$aOflis = array_diff($aUnInvis, $aOnlis); //没邀请过的离线好友
			$aTmps = array_flip(array_intersect($aUnInvis, $aOnlis)); //没邀请过的在线好友ID
			$aSort = array(array(), array()); //在线,在玩
			foreach($aUsers as $k => $v) {
				if(!$v) continue;
				if(!isset($aTmps[$k]) || !of::isPhone($v['unid']) || ($tid && ($tid == $aStats[$k][0]))) { //只关心部分用户|最后为PC登录|同桌则不参与排序
					continue;
				}
				$idx = $aStats[$k][0] > 0 ? 1 : 0;
				$aSort[$idx][$k] = abs($aInfo['mmoney'] - $v['mmoney']);
			}
			asort($aSort[0]);
			asort($aSort[1]);
			asort($aOflis); //按注册先后
			$aList = array_merge(array_keys($aSort[0]), array_keys($aSort[1]), $aOflis, $aInvis); //在线->在玩->离线->已邀请
			$aList = array_values(array_unique($aList)); //重整索引值
		} elseif($type == 4) { //所有好友
			if(oo::$config['mobilefriend'] && of::isIphone($api)) { //iOS排序
				$aUsers = oo::minfo()->getFieldsMulti($aMids, array('mactivetime') );
				$aSort = array(array(), array(), array(), array()); //在玩,旁观,在线,离线
				foreach($aMids as $v) {
					if(!$aUsers[$v]) continue;//不存在的好友、minfo里没有数据的好友
					if($aStats[$v][1] == 2) { //在玩
						$aSort[0][] = $v;
					} elseif($aStats[$v][0] > 0) { //旁观
						$aSort[1][] = $v;
					} elseif(isset($aStats[$v])) { //在线
						$aSort[2][] = $v;
					} else { //离线
						$aSort[3][$v] = $v;//$aUsers[$v]['mactivetime']; //按最后登录时间
					}
				}
				//arsort($aSort[3], SORT_NUMERIC);
				//$aList = array_merge($aSort[0], $aSort[1], $aSort[2], array_keys($aSort[3]));
				$aList = array_merge($aSort[0], $aSort[1], $aSort[2], $aSort[3]);
			} elseif($iSort && $dating){
				$aInfo = oo::minfo()->get($mid); //我的信息
				$aUsers = oo::minfo()->getFieldsMulti($aMids, array('mgender') ); 
				$aSort = array(array(), array(), array()); //在玩,旁观,在线,离线
				$aOneMids = $aTwoMids = $aThreeMids= array();
				foreach($aMids as $v) {
					if(!$aUsers[$v]) continue;//不存在的好友、minfo里没有数据的好友
					if($aStats[$v][0] > 0) { //房间内
						$aSort[0][] = $this->_getSexOrder($aUsers[$v]['mgender'],$aInfo['mgender']);
						$aOneMids[]= $v;
					} elseif(isset($aStats[$v])) { //在线
						$aSort[1][] = $this->_getSexOrder($aUsers[$v]['mgender'],$aInfo['mgender']);
						$aTwoMids[]= $v;
					} else { //离线
						$aSort[2][] = $this->_getSexOrder($aUsers[$v]['mgender'],$aInfo['mgender']);
						$aThreeMids[]= $v;
					}
				}
				array_multisort($aSort[0], SORT_DESC, SORT_NUMERIC, $aOneMids);
				array_multisort($aSort[1], SORT_DESC, SORT_NUMERIC, $aTwoMids);
				array_multisort($aSort[2], SORT_DESC, SORT_NUMERIC, $aThreeMids);
				$aList = array_values(array_merge($aOneMids, $aTwoMids, $aThreeMids)); //重整索引
			}else { //其他排序
				$aUsers = oo::minfo()->getFieldsMulti($aMids, array('mmoney') ); 
				$aSort = array(array(), array()); //在玩,资产   sortFriends 异性在房间 同性在房间 。。。同性离线
				foreach($aMids as $k=>$v) {
					if(!$aUsers[$v]){//不存在的好友、minfo里没有数据的好友
						unset($aMids[$k]);//要把$aMids个数  与$aSort个数一致
						continue;
					}
					$aSort[0][] = $aStats[$v] ? (int)$aStats[$v][1] : -1;
					$aSort[1][] = (int)$aUsers[$v]['mmoney'];
				}
				array_multisort($aSort[0], SORT_DESC, SORT_NUMERIC, $aSort[1], SORT_DESC, SORT_NUMERIC, $aMids);
				//p('sdfs');
				$aList = array_values($aMids); //重整索引
			}
		}

		$ret['result'] = 1;
		$ret['list'] = $aList;
		return $this->genRet($mid, $ret);
	}

	/**
	 *
	 * 邀请好友进入房间
	 */
	public function inviteFriendsTables($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if((!$mid = functions::uint($param['mid'])) || (!$fmid = functions::uint($param['param']['fmid']))) {
			$ret['result'] = -3;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		$type = (int)$param['param']['type'];
		$tid = (int)$param['param']['tid'];
		$statsid = (isset(oo::$config['api'][$api]) ? oo::$config['api'][$api][1] : oo::$config['sid']);
		oo::setLang($param['langtype']);
		if(!oo::mobileConfig()->getSwitch($api, 'inviteFriends')) {
			$ret['result'] = -2;
			return $this->genRet($mid, $ret);
		}
		if(oo::$config['openMissionV3']){
			oo::missiontypes()->yqpyyqdpCountLog($mid,1);
		}
		if(!in_array($type, array(1, 2))) {
			$ret['result'] = -4;
			return $this->genRet($param['mid'], $ret);
		}
		$continus = oo::friends()->inviteFriendDays($api, $mid);
		$continus[0] = intval($continus[0]);
		$continus[1] = intval($continus[1]);
		$todayFirst = $continus[1] < strtotime('today');
		if($todayFirst) { //今天第一次邀请
			oo::friends()->inviteFriendDays($api, $mid, true);
		}
		$inviteAble = (!$flist = oo::friends()->pushFriends($api, $mid)) || !$flist[$fmid]; //满足邀请条件
		if($type == 1) {
			if($inviteAble) {
				if(!((oo::$config['mPushOpen'] == 1) && oo::pushSubmit()->addPushCenter($fmid, 10001, 0))) {
					$ret['result'] = -6;
					return $this->genRet($param['mid'], $ret);
				}
				oo::friends()->pushFriends($api, $mid, $fmid, true); //记录邀请的
				$ret['result'] = 1;
				return $this->genRet($param['mid'], $ret);
			}
		}
		if($type == 2) {
			if($inviteAble) {
				oo::friends()->pushFriends($api, $mid, $fmid, true); //记录邀请的
				$ret['result'] = 1;
				return $this->genRet($param['mid'], $ret);
			}
		}
		$ret['result'] = -5;
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 获取在线好友数
	 * @param array $param
	 */
	public function getOnlineNum($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$aGetList = oo::friends()->getOnline($mid, 0, $sid, $unid);
		$ret['result'] = 1;
		$ret['num'] = count($aGetList); //好友在线数
		return $this->genRet($mid, $ret);
	}

	/**
	 * @desc 【邀请打牌】返回可邀请的玩家列表
	 * @access public
	 * @param Array $param
	 * @return Array
	 */
	public function getInvitePlayLists($param){
		if( !$this->auth( $param, 0 ) ){
			return $this->genRet( $param['mid'], array( ) );
		}
		$api = (int)$param['api'];
		$mid = (int)$param['mid'];
		$tid = (int)$param['param']['tid'];
		$online = (int)$param['param']['online'];//是否只是取在线的数据
		$withInfo = (int)$param['param']['info'];//是否同时返回用户信息
		
		$ret = array();
		if(oo::$config['openplayinvite']){//mongo版房邀请
			$ret = oo::playinvite()->getList($mid, $tid, $api, $online, 0, $withInfo);
		}else{
			$ret = oo::playinvite()->getResult($mid);//海外的as 需要的数据
		}
		return $this->genRet( $mid, $ret );
	}

	/**
	 * @desc 【邀请打牌】发送邀请
	 * @access public
	 * @param Array $param
	 * @return Array
	 */
	public function sendInvitePlay($param){
		if( !$this->auth( $param, 0 ) ){
			return $this->genRet( $param['mid'], array( ) );
		}
		$api = (int)$param['api'];
		$mid = (int) $param['mid'];
		$version = $param['version'];
		$tos = explode(',', $param['param']['tos']);//受邀好友列表
		$type = (int)$param['param']['type'];
		$ret = array();		
		$ret = oo::playinvite()->send($mid, $tos, $type, $api,$version);		

		if(oo::$config['openMissionV3']){
			oo::missiontypes()->yqpyyqdpCountLog($mid,1);
		}

		return $this->genRet( $mid, $ret );
	}

	/**
	 * @desc 【邀请打牌】接受邀请
	 * @access public
	 * @param Array $param
	 * @return Array
	 */
	public function acceptInvitePlay($param){
		if( !$this->auth( $param, 0 ) ){
			return $this->genRet( $param['mid'], array( ) );
		}
		$api = (int)$param['api'];
		$mid = (int) $param['mid'];
		$fmid = functions::uint($param['param']['fmid']);
		$tid = functions::uint($param['param']['tid']);
		$ret = array();		
		$ret = oo::playinvite()->accept($mid, $tid, $fmid);
		
		if($ret && $fmid && oo::$config['openMissionV3']){
			oo::missiontypes()->cgyqpyyqdpCountLog($fmid,1);
		}
		return $this->genRet( $mid, $ret );
	}

    /**
     * 接受邀请人进入房间发小喇叭
     * @param $param
     * @return array|mixed
     */
    public function sendInviteMsg($param)
    {
        if (!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
            return $this->genRet($param['mid'], array('ok' => 0));
        }
        $mid = (int)$param['mid'];//进来的玩家
        $fmid = (int)$param['param']['fmid'];//邀请人
        $tid = (int)$param['param']['tid'];
        $svid = (int)$param['param']['svid'];
        $gameID = (int)$param['param']['gameID']; // 小游戏ID（1-骰宝房 2-大菠萝房 0-德州扑克）
        $langtype = (int)$param['langtype'];
        oo::setLang($langtype);
        $xlbMsg = property_exists(lang, 'invitexlb') ? lang::$invitexlb : '';
        if ($xlbMsg=="" || !$tid || !$mid || !in_array($gameID, array(0, 1, 2))) {
            return $this->genRet($param['mid'], array('ok' => 0));
        }

        $aUsers = oo::minfo()->getFieldsMulti(array($mid, $fmid), array('mnick'));
        $msg = str_replace(array('#0', '#1'), array($aUsers[$fmid]['mnick'], $aUsers[$mid]['mnick']), $xlbMsg);
        $data = array(
            "tid" => $tid,
            "fmnick" => $aUsers[$fmid]['mnick'], //邀请人的名字
            "tmnick" => $aUsers[$mid]['mnick'], //被邀请人的姓名
            "gameID" => $gameID,
            "msg" => $msg,
			"content" => $msg//这里海外客户端用的是content
        );
        if (in_array($gameID, array(1, 2))) {
            $gameInfo = oo::swoolegame()->getTableMids($mid, $gameID, $svid);
            $allMembers = isset($gameInfo['mids']) ? $gameInfo['mids'] : array();
        } else {
            $allMembers = oo::membertable()->getMembersByTid($tid);
        }
        foreach ($allMembers as $imid => $mstatus) {
            $json = json_encode(array('type' => 526, 'data' => $data));
            oo::EServer()->sendSingleMsg($imid, $imid, $json);
        }
        return $this->genRet($param['mid'], array('ok' => 1));
    }

	/**
	 * 获取移动版连续登录的配置和当前用户的连续天数
	 * @param array $param
	 */
	public function getContinuousConf($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		if($api == 126 && $param['sid'] == 233) { //繁体html5辣椒通行证不给次日登录奖励
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if(defined('_VERSION_') && ((functions::version_compare(_VERSION_, '5.0.58') >= 0) && (functions::version_compare(_VERSION_, '5.0.62') < 0) && in_array($api, array(36, 65))) && (oo::mobileinfo()->countActFuc($mid, 'newHadBag') == 1)) {
			$aGameData = array('uid' => $mid, 'lts_at' => time(),);
			$aGameData['et_id'] = 13072; //注册后进入游戏是否弹出选礼盒界面
			oo::dc()->sendData(_UNID_, 23, $aGameData);
			oo::mf()->send(_UNID_, $mid, 'stc_mbdzp_log', array('type' => 8, 'value' => 1), time()); //8 注册后进入游戏是否弹出选礼盒界面
			$ret['showNewHandBag'] = 1; //弹新手礼包的框
			$ret['newHandBagCfg'] = oo::missions()->getNewHandBagReward($mid, true); //获取礼包配置信息
		}
		$aInfo = oo::minfo()->getMinfo($mid, array('unid', 'mmoney', 'mtime', 'gamevipLevel',), true);
		oo::setLang($param['langtype']); //设置语言文件
		if(isset(oo::$config['newhandreggift']) && oo::$config['newhandreggift'] == 1 && oo::checkin()->regGiftFit($api, $param['version'])) { //展示新手注册礼包
			$regRet = oo::checkin()->getRegGiftList($aInfo);
			if(!is_array($regRet) || (empty($regRet['ret']) && $regRet['is_view'] == 0)){
				$ret['regGiftConf'] = 0;
				$ret['regGiftList'] = array();
			}
			if(!empty($regRet['ret'])) {
				//WARNING:firstin值必须和首次注册送的游戏币一致 否则会导致显示和发的游戏币数值不一致
				if(in_array($api, array(64, 166)) || in_array(oo::$config['sid'], array(110)) ) { //阿语返回注册第一天送的钱
					$firstin = 5000;
				} elseif(in_array($api, array(44, 52, 55))) {
					$firstin = 8000;
				} elseif(in_array($api, array(32,183,199))) {
					$firstin = 2000;
				} elseif(in_array(oo::$config['sid'],array(60))){
					$firstin = 2000;
				} else if(in_array(oo::$config['sid'], array(197,104))){
					$firstin = oo::$config['firstin'];
				} else if ( in_array($api,array(155,26,42))){//英语TCL版本
					$firstin = oo::$config['firstin'];
				}else{
					$firstin = 800;
				}
				$ret['firstin'] = oo::$config['blowup'] * $firstin;
				$ret['todayContinue'] = 1; //连续登陆设置为不可领取: 0 可以领 1已经领取
				$ret['regGiftConf'] = $regRet['is_view'];
				$ret['regGiftList'] = $regRet['ret'];
				if(!(isset(oo::$config['optiRegGift']) && oo::$config['optiRegGift'] == 1 && oo::checkin()->optiRegGiftFit($api, $param['version']))) { //此处开始优化新版新手大礼包
					return $this->genRet($param['mid'], $ret);
				}
			}
		}

		//连续五天领取登录奖励或连续登录奖励，且没有玩牌记录，禁止再领取奖励
		if(PRODUCTION_SERVER && oo::daymoneylimit()->limited($mid, $api)) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}

		//微游戏HTML5 FB繁体HTML5关闭连续登录奖励
		if(in_array($api, array(21, 23, 144)) || in_array($param['unid'], array(130, 135))) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}

		$today = strtotime('today');
		//新用户不弹连续登录
		if(($aInfo['mtime'] >= $today) && !oo::mobileConfig()->getSwc($api, 'newUserContinue')) {
			$ret['result'] = -3;
			return $this->genRet($param['mid'], $ret);
		}

		$continuous = oo::checkin()->getContinuouDays($mid);
		$thisContinuous = is_array($continuous[0]) ? $continuous[0] : array(); //本次连续登录
		$continuouDays = 0;

		/**
		 * 修改夏令时，由ETC/GMT-2 修改为 ETC/GMT-1
		 * strtotime('yesterday') 返回的时间戳↑3600  修改前，修改后 1445983200,1445986800
		 * 设用户昨天登录过$thisContinuous[1]=>1445983200，
		 * 则strtotime('yesterday') => 1445986800，
		 * strtotime('today') 同理
		 * 导致用户连续登录领取不了，或者领取天数从N天 → 1天
		 */
		//修改夏令时，BUG修复
		//配置说明信息：oo::$config['modifyZone'] = "20170327,+1";//时区7 > 6  当前时间，当地当天时间加/减一个小时
		$aModify = explode(',',oo::$config['modifyZone']);
		$timediff = 0;//正常24小时
		/**
		 *
		 * 时区6 > 7  20170327,-1  当前时间，当地当天时间减一个小时
		 * 时区7 > 6  20170327,+1  当前时间，当地当天时间加一个小时
		 */
		$aModify && $aModify[0] == date("Ymd")  && $timediff += (int)$aModify[1] * 3600;
		if(!empty($thisContinuous) && ($thisContinuous[1] + $timediff >= strtotime('yesterday') )) {
			$continuouDays += 1 + ($thisContinuous[1] - $thisContinuous[0]) / (24 * 3600); //连续登录天数
			$continuouDays = (int)round($continuouDays);//修改夏令时的时候会出现小数的情况
		}

		$ret['result'] = 1;
		$ret['todayContinue'] = 0;
		$ret['continuouDays'] = $continuouDays;
		if(($thisContinuous[1] == $today) || (!oo::mobileConfig()->getSwc($api, 'newUserContinue') && $aInfo['mtime'] >= $today)) {
			$ret['todayContinue'] = 1; //领过了或不需要领
			if( !oo::mobileConfig()->getSwc($api,'continuousOpt')){
				return $this->genRet($mid, $ret);
			}
		}
		$aConf = oo::checkin()->getContinuousConf($api, _VERSION_);
		if(oo::mobileConfig()->getSwc($api, 'continuousv1')){
			$aConf = oo::checkin()->getContinuousv1Conf($mid,$api,_VERSION_);
			oo::logs()->debug(array(date('YmdHis'),$aConf),'continue.debug');
		}
		if(($api == 18)) {
			$addChips = (int)oo::$config['gameviplevelchips']; //魔钻用户多送钱
			($addChips) && $ret['tips'] = functions::lang(array('str' => ($aInfo['gamevipLevel'] > 0) ? lang::$phone_continuous_tips1 : lang::$phone_continuous_tips2, 1 => $addChips));
		}
		$langtype = (int)$param['langtype'];
		$langfix = oo::$config['language'][$langtype];
		$imageUrl = oo::$config['imagesUrl'] . "mobile/continuous/";
		foreach($aConf as $k => $v) {
			if($k == 'version'){//生成的时候多了个这个，先过滤掉
				continue;
			}
			$thisConf[$k][0] = $v[0] ? $v[0] : 0;
			$thisConf[$k][1] = (oo::$config['blowup'] > 1) ?  $v[1] * oo::$config['blowup'] :  $v[1];
			$thisConf[$k][2] = $v[2] ? $imageUrl.$v[2] : '' ;//图片
			$thisConf[$k][3] = $v[4][$langfix] ? $v[4][$langfix] : '' ;//标题
			if(of::isTV($api) && oo::mobileConfig()->getSwc($api,'TVContinueV1')){//电视机增加字段
				$thisConf[$k][4] = $v[5];//多送
				$thisConf[$k][5] = $v[6] ? oo::$config['cdn'].'images/tvmorechips/'.$v[6] : '' ;//图片
			}
		}
		//android/iphone特殊任务显示（实际上就是个每日任务）
		if((of::isAndroid($api) && functions::version_compare($param['version'], '4.5.0') >= 0) || (of::isRealIphone($api) && functions::version_compare($param['version'], '2.8.0') >= 0) || of::isWinPhone($api)
		) {
			oo::missiontypes()->setVars(array('version' => $param['version']));
			$types = oo::$config['limitmissionver'] ? oo::missiontypes()->getList(0, null, $api, $mid) : oo::missiontypes()->getList(0, null, $api); //是否打开新版本每日任务（限制显示）
			$langtype = intval($param['langtype']);
			$suffix = oo::$config['language'][$langtype];
			$speTask = oo::$config['openSpeTask'] ? oo::mobileConfig()->getDeploy($api, 'spetasks') : array();
			$speMission = isset($speTask['selectMission']) ? array("TESURENWU", $speTask['selectMission']) : array("TESURENWU");
			$ret['mission'] = $ret['speMission'] = array();
			$iconDir = of::isRealIpad($api) ? '132x132' : (of::isRealIphone($api) ? 'iphone' : 'ipad');
			foreach($types as $item) {
				if(!in_array($item['typeid'], $speMission)) {
					continue;
				}
				$lists = oo::missions()->getList($mid);
				$status = in_array($item['typeid'], $lists) ? 1 : 0;
				if(isset($ret['regGiftConf']) && $ret['regGiftConf'] == 1) {
					$status = 0; //新手礼包限制特殊任务
				}
				$missionArr = array('desc' => empty($item["desc_{$suffix}"]) ? $item['desc'] : $item["desc_{$suffix}"], 'reward' => (isset(oo::$config['blowup']) ? $item['reward'] * oo::$config['blowup'] : $item['reward']), 'status' => $status,);
				if($item['typeid'] == "TESURENWU") {
					$ret['mission'] = $missionArr;
				}
				if(isset(oo::$config['openSpeTask']) && oo::$config['openSpeTask'] == 1 && isset($speTask['selectMission']) && ($item['typeid'] == $speTask['selectMission'])) {
					$missionArr['icon'] = oo::$config['imagesUrl'] . $speTask['img'];
					$missionArr['goto'] = isset($speTask['selectMission']) ? $speTask['selectGoto'] : "";
					$missionArr['iconDesc'] = $speTask['name']["{$suffix}"];
					$ret['speMission'] = $missionArr;
				}
			}
		}
		$ret['thisConf'] = $thisConf;
		if((($api == 20) && (functions::version_compare(_VERSION_, '3.0.0') == 0)) || (in_array($api, array(28, 89)) && (functions::version_compare(_VERSION_, '2.9.6') == 0)) || $api == 103 || $api == 122
		) { //兼容iPad winphone客户端整出的BUG
			$ret['continuouDays'] > 5 && ($ret['continuouDays'] = 5);
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * 移动版连续登录 领奖
	 * @param array $param
	 */
	public function phoneContinuous($param) {
		if(!$this->auth($param, 3)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];

		if(BY::concurrent($mid, '', true)){ //防止并发领奖
			$ret['result'] = -88;
			return $this->genRet($mid,$ret);
		}

		if(oo::mobileConfig()->getSwc($api, 'throttle')
				&& oo::mobMod('interfacelimit', array($api, $mid))->isLimit(str_replace('::', '.', __METHOD__))){
			return $this->genRet($mid, array('result' => -10));
		}

		$aUser = oo::minfo()->getMinfo($mid, array('mactivetime', 'sid', 'mtime', 'gamevipLevel', 'mmoney', 'mbank'),false);
//		if(time() - $aUser['mactivetime'] > 86400){ //24小时没更新过登录时间了
//			oo::logs()->debug(time() . ",-3,{$aUser['mid']},{$aUser['mactivetime']}", 'phoneContinuous');
//			$ret['result'] = -3;
//			return $this->genRet($param['mid'], $ret);
//		}

		if((time()-$aUser['mactivetime']) <= 0) { //今天没从移动登录过
			oo::logs()->debug("0:{$aUser['mid']}", 'phoneContinuous');
			$ret['result'] = 0;
			return $this->genRet($mid, $ret);
		}
		//连续五天领取登录奖励或连续登录奖励，且没有玩牌记录，禁止再领取奖励
		if(PRODUCTION_SERVER && oo::daymoneylimit()->limited($mid, $api)) {
			oo::logs()->debug(date("Y-m-d H:i:s").":status:-4:{$aUser['mid']}", 'phoneContinuous');
			$ret['result'] = -4;
			return $this->genRet($param['mid'], $ret);
		}

		//微游戏HTML5 FB繁体HTML5关闭连续登录奖励
		if(in_array($api, array(21, 23, 144)) || in_array($param['unid'], array(130, 135))) {
			$ret['result'] = -5;
			return $this->genRet($param['mid'], $ret);
		}
		oo::setLang($param['langtype']); //设置语言文件
		$errCode = 0;
		$flag = oo::checkin()->phoneContinuous($api, $mid, 0, $aUser, null, $errCode, _VERSION_, $prop);
		if($flag === false) { //领取失败
			oo::logs()->debug(date("Y-m-d H:i:s").":status:-6:{$aUser['mid']}", 'phoneContinuous');
			$ret['result'] = -6;
			$ret['desc'] = '奖励领取失败';
			return $this->genRet($mid, $ret);
		}

		$ret['result'] = $errCode === 0 ? 1 : $errCode;
		$ret['money'] = $flag;
		$ret['prop'] = $prop;
		return $this->genRet($mid, $ret);
	}

	/**
	 * Adr暗黑版游客绑定QQ号(tkid=58670)
	 */
	public function mergemb($param) {
		return $this->genRet($param['mid'], array('result' => -1));
	}

	/**
	 * Adr暗黑2.0版绑定验证(tkid=64798)
	 */
	private function mergembVrfy($param, $opv, &$aHead) {
		if((oo::$config['sid'] != 93) || (!$this->auth($param, 1)) || ($param['api'] != 65) || !in_array(oo::$config['sid'], array(93, 999))) return array('result' => -1);
		$aHead = functions::isUseXTunnelVerify($param['api'], $param['version']) ? functions::getXTunnelVerify($param['api']) : functions::appleHeaderDecrypt($_SERVER['HTTP_CONTENT_DEFINE']);
		if(!$aHead[1]) return array('result' => -2); //验证头解密失败
		if(oo::mobileinfo()->mergembLimit($aHead[1]) || oo::mobileinfo()->mergembLimit($param['param']['sitemid'])) return array('result' => -4); //已绑定过
		if(!oo::mobileConfig()->getSwitch($param['api'], 'adrAnHei2Tx')) return array('result' => -7); //开关没开
		$qqAppId = oo::$config['api'][$param['api']][4];
		$aReq = array('access_token' => $param['param']['token'], 'oauth_consumer_key' => "$qqAppId", 'openid' => $param['param']['sitemid'], 'format' => 'json',);
		$resp = functions::post_request_phone($aReq, 'https://graph.qq.com/user/get_simple_userinfo');
		if((!$aMe = json_decode($resp, true)) || ($aMe['errcode'] != 0) || ($aMe['ret'] != 0)) return array('result' => -3); //平台 账号验证失败
		if(!$aMe = oo::member()->getOneBySitemid($param['param']['sitemid'], 93, true)) return array('result' => -3);

		if(!$aTo = oo::mobileinfo()->mergembApi($aHead[1], $aMe['mid'], intval($opv), 2, $param['param']['sitemid'])) { //没拉到人人数据
			$aTo = oo::mobileinfo()->mergembApi($aHead[1], $aMe['mid'], intval($opv), 2, 'N', 122); //拉Adr腾讯大厅的
		}
		if(!$aTo) return array('result' => -8); //没数据可绑

		return array('result' => 1, 'aTo' => $aTo);
	}

	/**
	 * Adr暗黑2.0版绑定预览(tkid=64798)
	 */
	public function mergembView($param) {
		if((!$aRet = $this->mergembVrfy($param, 2, $aHead)) || ($aRet['result'] <= 0)) return array('result' => $aRet['result']);
		$mid = (int)$param['mid'];
		$aDia = array(10, 12, 13, 15);

		$aTo = $aRet['aTo'];
		$aDiaTo = array();
		foreach((array)$aTo['aTns'] as $ddcard) in_array($ddcard, $aDia) && ($aDiaTo[$ddcard]++);
		foreach((array)$aTo['aTus'] as $v) in_array($v[0], $aDia) && ($aDiaTo[$v[0]]++);

		$aMe = oo::member()->getOneById($mid);
		$aVipMe = array($aMe['mvip'], max(0, ceil(($aMe['mviptime'] - time()) / 86400)));
		$aDiaMe = array();
		$aTols = oo::usertoolworking()->getUserPropList($mid, 2, 0);
		foreach($aTols as $v) $v['utstatus'] && in_array($v['ddcard'], $aDia) && ($aDiaMe[$v['ddcard']]++);
		$aTols = oo::usertoolworking()->getUserPropList($mid, 3, 0);
		foreach($aTols as $v) in_array($v['ddcard'], $aDia) && ($aDiaMe[$v['ddcard']]++);
		$iItrMe = oo::gifts()->getInterPropCount($mid);

		$aDiaDo = $aDiaMe + $aDiaTo;
		foreach($aDiaMe as $ddcard => $v) $aDiaDo[$ddcard] += $aDiaTo[$ddcard]; //数组“+”操作补齐

		$aDat = array('result' => 1, 'data' => array('imy' => array('chips' => $aMe['mmoney'], 'vip' => (array)$aVipMe, 'diamonds' => (Object)$aDiaMe, 'tools' => (int)$iItrMe,), 'ito' => array('chips' => $aTo['mmoney'], 'vip' => (array)$aTo['aVip'], 'diamonds' => (Object)$aDiaTo, 'tools' => (int)$aTo['iItr'],), 'ido' => array('chips' => $aMe['mmoney'] + $aTo['mmoney'], 'vip' => array(max($aVipMe[0], $aTo['aVip'][0]), max($aVipMe[1], $aTo['aVip'][1])), 'diamonds' => (Object)$aDiaDo, 'tools' => (int)$iItrMe + (int)$aTo['iItr'],),));
		return $this->genRet($param['mid'], $aDat);
	}

	/**
	 * Adr暗黑2.0版绑定操作(tkid=64798)
	 */
	public function mergembBind($param) {
		if((!$aRet = $this->mergembVrfy($param, 0, $aHead)) || ($aRet['result'] <= 0)) return array('result' => $aRet['result']);
		oo::setLang(1);
		$result = oo::mobileinfo()->mergembDo2($aHead[1], $param['param']['sitemid'], $aRet['aTo']);
		return $this->genRet($param['mid'], array('result' => $result));
	}

	/**
	 * 取排行mid列表
	 * 成就,好友,财富
	 * @deprecated
	 */
	public function getTopMids($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$type = (int)$param['param']['type']; //1成就,2财富,3好友
		$subtype = (int)$param['param']['subtype'];
		$api = (int)$param['api'];
		if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
			oo::$config['newmedal'] = 0;
		}

		$aMids = $aOnline = $aMmoney = $aCount = $aLvl = array();

		if($type == 1) { //成就排行
			$aTmp = ($subtype == 1) ? oo::friends()->getIdList($mid, 0) : (($subtype == 2) ? oo::medal()->getMedalTops() : array()); //?好友成就:成就总排
			foreach($aTmp as $key => $val) {
				$fmid = $subtype == 1 ? $val : (((oo::$config['langtype'] == 1) && ($subtype == 2)) ? $key : $val['mid']);
				if(!$aMedal = oo::medal()->getMedal($fmid)) { //过滤无成就的用户
					continue;
				}
				$aMids[$key] = $fmid;
				$aCount[$key] = count($aMedal);
				$aLvl[$key] = oo::expLevel()->getLevelByExp(oo::expLevel()->getUserExp($fmid));
			}
			array_multisort($aCount, SORT_DESC, SORT_NUMERIC, $aLvl, SORT_DESC, SORT_NUMERIC, $aMids);

		} elseif($type == 2) { //财富
			foreach(oo::friends()->getRankList($mid, 2, 0, $sid, 0) as $key => $val) {
				$aMids[$key] = $val['mid'];
				$aMmoney[$key] = (int)$val['mmoney'];
			}
			array_multisort($aMmoney, SORT_DESC, SORT_NUMERIC, $aMids);

		} elseif($type == 3) { //好友
			foreach(oo::friends()->getList($mid, $subtype, $param['tid'], $sid, $unid, array()) as $key => $val) {
				$aMids[$key] = $val['mid'];
				$aOnline[$key] = is_array(ocache::$acache['getList'][$val['mid']]) ? 1 : 0;
				$aMmoney[$key] = (int)$val['mmoney'];
			}
			array_multisort($aOnline, SORT_DESC, SORT_NUMERIC, $aMmoney, SORT_DESC, SORT_NUMERIC, $aMids);
		}

		$aRet['result'] = 1;
		$aRet['list'] = array_values($aMids);
		return $this->genRet($mid, $aRet);
	}

	/**
	 * 取排行mid列表用户详细资料
	 * @deprecated
	 */
	public function getTopMidsDetail($param) {
		if(!$this->auth($param, 1)) {
			return $this->genRet($param['mid'], array('result' => -1));
		}

		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$unid = (int)$param['unid'];
		$mids = (string)$param['param']['mids'];
		$aMids = explode(',', $mids);
		$type = (int)$param['param']['type'];
		$subtype = (int)$param['param']['subtype'];
		$api = (int)$param['api'];
		if(!$mids || (count($aMids) > 80)) {
			return $this->genRet($param['mid'], array('result' => -2));
		}

		$aMembers = oo::member()->getAllByIds($aMids);
		$getList = ocache::$acache['getList'];
		$aTid = array();
		foreach($aMembers as $key => $val) {
			$aMgi = oo::memberGameinfo()->getMgi($val['mid']);
			$aList[$key][0] = $val['mid']; //mid
			$aList[$key][1] = $val['mnick']; //昵称
			$aList[$key][2] = $val['mmoney']; //当前资产
			$aList[$key][3] = $val['micon']; //头像
			$aList[$key][4] = isset($val['mexp']) ? $val['mexp'] : oo::expLevel()->getUserExp($val['mid']); //经验值
			$aList[$key][5] = oo::expLevel()->getLevelByExp($aList[$key][4]); //等级
			$aList[$key][6] = (int)$aMgi['maxOwnChips']; //最高资产
			$aList[$key][7] = (int)$aMgi['bestCardType']; //最大手牌类型
			$aList[$key][8] = isset($aMgi['bestCards']) ? (string)$aMgi['bestCards'] : "[]"; //最大手牌
			$aList[$key][9] = (int)$aMgi['gameCount']; //牌局数
			$aList[$key][10] = (int)$aMgi['winCount']; //赢牌数
			$aList[$key][11] = (int)$aMgi['loseCount']; //输牌数
			if(oo::$config['newmedal'] && in_array($api, array(24, 28, 38)) && ($param['version'] < '2.1.0')) { //ipad简体不更新新成就
				oo::$config['newmedal'] = 0;
			}
			$aList[$key][12] = isset($val['medal']) ? count($val['medal']) : count(oo::medal()->getMedal($val['mid'])); //成就数
			$aList[$key][13] = is_array($getList[$val['mid']]) ? (int)$getList[$val['mid']][0] : -1; //-1离线，0大厅，>0桌子ID
			$aList[$key][14] = -1; //桌子 类型
			$aList[$key][15] = (int)$getList[$val['mid']][1]; //1旁观，2在玩
			//修正桌子类型
			if($aList[$key][13] != -1) {
				$aTid[$key] = $aList[$key][13];
			}
		}

		//批量获取桌子类型
		if(!empty($aTid)) {
			$aTTypes = oo::tables()->getTTypes(); //桌子ID->类型映射
			foreach($aList as $k => &$v) {
				if(!isset($aTid[$k])) continue;
				$tid = $aTid[$k];
				if(!isset($aTTypes[$tid])) continue;
				$v[14] = $aTTypes[$tid];
			}
		}

		$aRet['result'] = 1;
		$aRet['list'] = is_array($aList) ? array_values($aList) : array();
		return $this->genRet($mid, $aRet);
	}

	/**
	 * 登录版本分布统计
	 * @param int $api
	 * @param array $aUser
	 * @param array $aDecryptData
	 */
	private function _loginVerStat($api, &$aUser, &$aDecryptData) {
	}

	/**
	 * 取用户之前所在的桌子服务器IP与端口(用于断线重连,防止进入PC端独有的服务器)
	 *
	 * @param int $api 客户端类型
	 * @param int $tid 桌子ID
	 * @param int $mid 用户ID
	 * @return array 服务器信息
	 */
	private function _getServerIpAndPort($api, &$tid, $mid, $ver = '') {
		$mid = (int)$mid;
		if(!$tid) return array();
		$table = oo::tables()->getTableById($tid, true, array('ttype'));
		if(!$table) return array();
		oo::addSwitchConfig($mid,'switch'); //加载特殊开关，这里暂时仅有openProxy，并且config/config.switch.php是由其他程序自动维护

		$ttype = intval($table['ttype']);
		if(!$srv = oo::servers()->getMobileServerInfo($tid, true, of::isSupportProxy($api, $ver))) {
			return array();
		}
		//移动仅支持新手场、初级场、中级场、高级场、快速场、淘汰赛、晋级赛(仅繁体、泰语、印尼、GREE的iOS版本)
		if(in_array($ttype, array(0, 1, 2, 3, 4, 6, 14)) || ($ttype == 7 && in_array($api, array(14, 19, 20, 24, 33, 34, 37, 38)))) {
			unset($srv['svid']);
			return $srv;
		} else {
			//国内平台晋级赛合服
			if($ttype == 7) {
				$mid += (oo::$config['sid'] == 117 ? 8 : 0) * 100000000;
			}
			$aTb = oo::tables()->getTableById($tid, true, array('svid'));
			oo::CServer()->SendKick($srv['svip'], $srv['svport'], $mid,$aTb['svid']);
			$tid = 0;
			return array();
		}
	}

	/**
	 * 新手注册礼包获得奖励
	 * @param type $param
	 */
	public function getRegGifts($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		};
		$api = (int)$param['api'];
		if($api == 126 && $param['sid'] == 233) { //繁体html5辣椒通行证不给次日登录奖励
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$langtype = $param['langtype'];
		if(!isset(oo::$config['newhandreggift']) || !oo::$config['newhandreggift'] == 1 || !oo::checkin()->regGiftFit($api, $param['version'])
		) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if( !PRODUCTION_SERVER && oo::logs()->getIpCount(functions::getip(), true, false, 2118) >= 3){//开启ip限制
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}

		if(isset(oo::$config['optiRegGift']) && oo::$config['optiRegGift'] == 1 && oo::checkin()->optiRegGiftFit($api, $param['version'])) { ///展示新手注册礼包
			$retData = oo::checkin()->receiveRegGift($mid, $langtype, $api, array('ver' => $param['version']));
		} else {
			$retData = oo::checkin()->receiveRegGift($mid, $langtype, $api);
		}
		if(of::isHtml5($api) && $retData) {
			$ret = (Array)$retData;
		}
		$ret['status'] = $retData ? 1 : 0;

		return $this->genRet($mid, $ret);

	}

	/**
	 * 平台登录 验证码
	 */
	protected function _loginCheckValid(&$ret, $aUser, $param, $api) {
		if(!in_array($api, array(22)) || !isset(oo::$config['openLoginCapt']) || (oo::$config['openLoginCapt'] != 1)) {
			return true;
		}
		$aSetting = oo::guestRegSetting()->awardSettingCache(4);
		if(isset($aSetting[$api])) {
			$isPcRegi = $isPay = $playNum = false;
			if(oo::guestRegSetting()->loginLimit(1)) { //PC端注册
				$isPcRegi = of::isPhone($aUser['sid']) ? false : true;
			}
			if(oo::guestRegSetting()->loginLimit(2)) { //付费用户
				$isPay = ($aUser['mpay'] <= 0) ? true : false;
			}
			if(oo::guestRegSetting()->loginLimit(3)) { //3天牌局为0
				$playNum = (oo::mplay()->getHistoryMobileGames($aUser['mid'], 3) <= 0) ? true : false;
			}
			if($isPcRegi && $isPay && $playNum) {
				if(functions::version_compare($param['version'], $aSetting[$api]) < 0) {
					$ret['result'] = 0;
					$ret['aUser'] = array('-20');
					$ret['errorCode'] = 2000;
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					return $this->genRet($aUser['mid'], $ret, $this->_getClientVersion($api, $param['version']));
					//要求输入验证码
				} elseif(empty($param['param']['verifyCode'])) {
					$ret['result'] = 0;
					$ret['errorCode'] = 2001;
					$ret['aUser'] = array('-21');
					$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
					$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
					$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(2, $aUser['mid']); //验证码图片地址
					return $this->genRet($aUser['mid'], $ret, $this->_getClientVersion($api, $param['version']));
					//判断验证码是否正确
				} else {
					$code = oo::guestRegCode()->get(2, $aUser['mid']);
					//验证码错误
					if(!$code || strtolower($param['param']['verifyCode']) != $code) {
						oo::guestRegCode()->del(2, $aUser['mid']);
						$ret['result'] = 0;
						$ret['errorCode'] = 2002;
						$ret['aUser'] = array('-22');
						$ret['dec'] = lang::$phoneErrCode[$ret['errorCode']];
						$ret['validConf'] = oo::guestRegSetting()->getNewConf(); //矩阵 每个小图长宽 文字高度
						$ret['verifyImage'] = oo::guestRegSetting()->getValidUrl(2, $aUser['mid']); //验证码图片地址
						return $this->genRet($aUser['mid'], $ret, $this->_getClientVersion($api, $param['version']));
						//验证码正确 删除验证码
					} else {
						oo::guestRegCode()->del(2, $aUser['mid']);
					}
				}
			}
		}
		return true;
	}

	/**
	 * 绑定玩家手机号码
	 *
	 * @param unknown_type $param
	 * @return unknown
	 */
	public function bindUserMobileNum($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$langtype = $param['langtype'];
		$sDeviceID = trim((string)$param['param']['device_id']); //设备ID
		$iBid = (int)$param['param']['bid']; //bid 博雅通行证ID
		$iMobileNum = trim((string)$param['param']['mobile_num']); //bid 手机号码
		$ret = array();
		if(!in_array($api, array(36, 65)) || !isset(oo::$config['bindPhone']) || (oo::$config['bindPhone'] != 1)) { //新浪 新浪腾讯登陆
			$ret['result'] = -2;
		}
		if(($sDeviceID != '') && !preg_match('/^[0-9A-Za-z]{32}$/', $sDeviceID)) { //验证设备ID
			$ret['result'] = -4;
		}
		if(($iMobileNum != '') && !preg_match('/^[0-9]{11}$/', $iMobileNum)) { //手机号码的正确性
			$ret['result'] = -4;
		}
		if(count($ret) > 0) {
			return $this->genRet($mid, $ret); //验证失败 返回值
		}
		if(($iBid > 0) && ($iMobileNum > 0)) { //绑定手机号
			$ret['result'] = oo::mobileinfo()->bindUserMobileNum($sDeviceID, $iBid, $iMobileNum) ? 1 : -3; //绑定成功1  绑定失败-3
			return $this->genRet($mid, $ret);
		}

		//验证是否绑定
		$aOne = oo::mobileinfo()->cacheBindUserPhone($sDeviceID);
		$ret['result'] = !empty($aOne) ? 1 : -1; //已经绑定 1 未绑定 -1
		return $this->genRet($mid, $ret);
	}

	/**
	 * 发短信收集手机号
	 * @param type $param
	 * @return type
	 */
	public function collectMobileNum($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}

		$mid = (int)$param['mid'];
		$ret['result'] = 0;
		oo::setLang($param['langtype']); //设置语言文件
		$sDeviceID = trim((string)$param['param']['device_id']); //设备ID
		$iMobileNum = trim((string)$param['param']['mobile_num']); //手机号码
		$CountryCode = isset($param['param']['CountryCode']) ? trim((string)$param['param']['CountryCode']) : '86'; //国家区号
		$key = okey::mkMbMobCaptcha($mid); //入库

		$cac = ocache::cache()->get($key);

		$aOne = oo::mobileinfo()->cacheBindUserPhone($sDeviceID);

		//验证是否绑定过了
		if(isset($param['param']['bind']) && $param['param']['bind'] == 1) { //已经绑定 1 未绑定 -1
			$ret['result'] = !empty($aOne) ? 1 : -1;
			if($ret['result'] > 0) {
				$ret['mobile'] = $aOne[2];
			}
			return $this->genRet($mid, $ret);
		}
		if($iMobileNum && $aOne[2] == $iMobileNum) { //当前用户已经绑定了这个号了
			$ret['result'] = -8;
			return $this->genRet($param['mid'], $ret);
		}

		//验证手机号
		if(isset($param['param']['captcha'])) {
			if(strlen($param['param']['captcha']) != 6) { //验证码格式错误
				return $this->genRet($mid, $ret);
			}
			$captcha = intval($param['param']['captcha']);
			ocache::cache()->delete($key); //清除key
			if($captcha === intval($cac['captcha'])) {
				$sDeviceID = $cac['device_no'];
				$iMobileNum = $cac['mobile'];
				$numKey = okey::mkMbUserPhoneNum($iMobileNum); //kvs 防止多个设备号绑定同一个手机号
				$ret['result'] = $addNum = oo::mobileinfo()->bindUserMobileNum($sDeviceID, $iBid, $iMobileNum, 3) ? 1 : -2; //绑定成功1  绑定失败-2
				$addNum && $ret['result'] = ocache::kvs()->put($numKey, $sDeviceID) ? 1 : -9;
			}
			return $this->genRet($mid, $ret);
		}
		if(($sDeviceID != '') && !preg_match('/^[0-9A-Za-z]{32}$/', $sDeviceID)) { //验证设备ID
			$ret['result'] = -4;
			return $this->genRet($param['mid'], $ret);
		}
		if(time() - $cac['time'] < 60) { //短信发的太快了  缓缓吧
			$ret['result'] = -7;
			return $this->genRet($param['mid'], $ret);
		}

		$numKey = okey::mkMbUserPhoneNum($iMobileNum); //kvs 防止多个设备号绑定同一个手机号
		if(ocache::kvs()->get($numKey)) { //已经有其他用户已经绑定了这个号了
			$ret['result'] = -10;
			return $this->genRet($param['mid'], $ret);
		}

		for($i = 0; $i < 6; $i++) { //随机数字可重复
			$captcha .= mt_rand(0, 9);
		}
		$cacIn = ocache::cache()->set($key, array('captcha' => $captcha, 'device_no' => $sDeviceID, 'mobile' => $iMobileNum, 'time' => time()), 36000); //5分钟有效
		if(property_exists(lang, 'mb_sms')) {
			$smsg = lang::$mb_sms[0] . $captcha;
		} else {
			$smsg = '您的德州扑克验证码是：' . $captcha;
		}

        if(oo::$config['joinPcenterMsgSwitch']){
            $cacIn && $send = oo::BYSmsV2()->smsSend($mid, $iMobileNum, $CountryCode, 42, array('code'=>$captcha));
        } else {
            $cacIn && $send = oo::BYsms()->sms_send($mid,$iMobileNum, $smsg, $CountryCode); //除中国以外，其他国家需要拼接 国家类型和手机号码
        }

		$ret['result'] = (intval($send) === 0 ? 1 : -6);
		!PRODUCTION_SERVER && oo::logs()->debug(date('Y-m-d H:i:s') . "发送状态:$send, 手机号码:$iMobileNum, 类型:{$CountryCode}, 内容:" . $smsg, 'yan.txt');
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 客户端上报玩家设备信息
	 * @param array $param
	 * @return array
	 */
	public function setPhoneInfo($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$param['param']['code'] && $data['code'] = (string)$param['param']['code']; //运营商编号
		$param['param']['country'] && $data['country'] = (string)$param['param']['country']; //国家码
		$param['param']['machine'] && $data['machine'] = (string)$param['param']['machine']; //机型
		$param['param']['resolution'] && $data['resolution'] = (string)$param['param']['resolution']; //分辨率
		$param['param']['network'] && $data['network'] = (string)$param['param']['network']; //网络类型 1 cmwap 2 wifi 4 cmnet 8 uninet 16 uniwap 32 net 64 wap 128 默认 256 cmda net 512 cmda wap
		if(!PRODUCTION_SERVER) {
			$code = ocache::cache()->get("MBTESTSIM|".$mid);
			$code && $data['code'] = $code;//测试用的
		}
		oo::mobileinfo()->setPhoneInfo($mid, $data);
		return $this->genRet($param['mid'], array('result' => 1));
	}

	/**
	 * 获取80个推荐用户 一天只取一次
	 */
	public function getRecommendMembers($param) {
		if(!$this->auth($param, 0) && PRODUCTION_SERVER) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int)$param['api'];
		$sid = $param['sid'];
		$sex = isset($param['param']['sex']) ? $param['param']['sex'] : 2;
		$neet = 80; // 需要返回80条玩家id数据
		$userArr['female'] = $userArr['male'] = $userTables = array();
		$mNum = $fNum = 0; // 男女人数计数$mNum是男性$fNum是女性
		$me = $param['mid'];
		$friend = oo::friends()->getIdList($me, 0); // 我的好友

		if($sex == 2 || $sex == 0) { // 男性或性别未知
			$neetMale = 30;
			$neetFemale = 50;
		} else {
			$neetMale = 50;
			$neetFemale = 30;
		}

		$v2 = oo::mobileConfig()->getSwc($api, 'recommendMembersV2'); // 推荐好友二期优化
		if ($v2) { // 二期显示20页，人数翻倍
			$neet *= 2;
			$neetMale *= 2;
			$neetFemale *= 2;
		}

		$allOnline = oo::membertable()->getAll();
        $partOnline = array_slice($allOnline, 0, 1000, true); // 取1000个在线用户的信息
		$allOnlineInfo = oo::membertable()->getIdsStatus($partOnline);
        $partOnlineInfo = $allOnlineInfo;
		
		$allMids = $mids = array_keys($partOnlineInfo);
		$max_mid = oo::member()->getMaxMid(oo::$config['sid']); // 最后注册的用户mid(也就是最大的mid)
		$sum = count($mids);
		$aUsers = oo::minfo()->getFieldsMulti($mids, array('micon', 'mgender', 'unid'));//批量获取这1000个玩家的信息
		$objFirendWall = oo::friendwall();
		
		//1000玩家预处理，去掉自己(推荐自己是什么鬼)，去掉自己的好友(不能重复推荐),去掉疑似非正常用户的玩家
		foreach($allMids as $key => $one){
			$aUser = $aUsers[$one];
			if(($me == $one) || (in_array($one, (array)$friend)) || ($objFirendWall->nickIcon("noSystemNick", $aUser['micon']) == false) ){
				unset($allMids[$key]);
			}
		}

		// 优先获取：当天内注册的、在大厅中、使用真实头像新玩家
		$mainNum = in_array(oo::$config['sid'],array(13)) ? 500000 : 5000;
		while($mNum + $fNum < $neet && $sum > 0) {
			$mid = array_shift($allMids);
			$sum--;
			if($max_mid - $mainNum < $mid) { // 新注册用户
				if($partOnlineInfo[$mid][1] == 0) { // 大厅玩家
					$aUser = $aUsers[$mid];
				
					//玩家按照新别对号入座
					if($aUser['mgender'] == 0 && count($userArr['male']) < $neetMale ) { // 男性玩家
						$userArr['male'][] = $mid;
						$mNum++;
					} elseif($aUser['mgender'] == 1 && count($userArr['female']) < $neetFemale ) {
						$userArr['female'][] = $mid;
						$fNum++;
					}
				} else { // 房间玩家 （ 不是大厅玩家，放到下面逻辑处理）
					$userTables[] = $mid;
				}
			}
		}
		$sum = count($userTables);//房间玩家
		while($mNum + $fNum < $neet && $sum > 0) { // 新注册、房间玩家
			$mid = array_shift($userTables);
			$sum--;
			$aUser = $aUsers[$mid];

			if($aUser['mgender'] == 0 && count($userArr['male']) < $neetMale ) { // 男性玩家
				$userArr['male'][] = $mid;
				$mNum++;
			} elseif($aUser['mgender'] == 1 && count($userArr['female']) < $neetFemale ) {
				$userArr['female'][] = $mid;
				$fNum++;
			}
		}
		$sum = count($allMids);//离线玩家
		while($mNum + $fNum < $neet && $sum > 0) {
			$mid = array_shift($allMids);
			$sum--;
			$aUser = $aUsers[$mid];

			if($aUser['mgender'] == 0 && count($userArr['male']) < $neetMale ) { // 男性玩家
				$userArr['male'][] = $mid;
				$mNum++;
			} elseif($aUser['mgender'] == 1 && count($userArr['female']) < $neetFemale ) {
				$userArr['female'][] = $mid;
				$fNum++;
			}
		}
		$time = 0; // 随机最多取1000次，不够拉倒
		// 如果还是不满人数，用离线用户补上
//		$maxTime = !PRODUCTION_SERVER ? 100 : 1000; //  内网人数不够，1000次会导致超时
		// add by zengyueming 这里不需要再循环1000次了吧
		$maxTime = count($allMids);
		while(($fNum < $neetFemale || $mNum < $neetMale) && $time <= $maxTime) {
			$randMid =array_shift($allMids);
			$aUser = $aUsers[$randMid];
			$time++;
			if(empty($aUser)) {
				continue;
			}

			if($fNum < $neetFemale && $aUser['mgender'] == 1 && !in_array($randMid, (array)$userArr['female'])) {
				$userArr['female'][] = $randMid;
				$fNum++;
			}
			if($mNum < $neetMale && $aUser['mgender'] == 0 && !in_array($randMid, (array)$userArr['male'])) {
				$userArr['male'][] = $randMid;
				$mNum++;
			}
		}
		
		//格式化，分组方便客户端显示
		$members = oo::member()->sortGender($userArr, $sex);
		if(isset(oo::$config['io']['friendRecommendList'][3]) && !empty(oo::$config['io']['friendRecommendList'][3]) && in_array($me, oo::$config['io']['friendRecommendList'][3])) {
			$lKey = okey::mkFriendRecommendList($me);
			$list = ocache::redis()->sMembers($lKey);
			$count = min(count($list), 8);
			for($i = 0; $i < $count; $i++) {
				$members[0][$i] = (int)$list[$i];
			}
		}

		//获取通讯录好友
		$getpfsuccess = false;
		$members  = $members ? $members : array();
//		$members = array_values($members);
		if (oo::mobileConfig()->getSwc($api, 'phonefriends')) {
			$numberArr = $param['param']['phoneArr'];
			$phonemids = oo::mobileinfo()->getMidsByPhones($numberArr, $friend);
			$phonemids && $getpfsuccess = true;
			if(in_array($me, $phonemids)){
				$mynumkey = array_search($me, $phonemids);
				unset($phonemids[$mynumkey]);
			}
			array_unshift($members, $phonemids);
		}
		return $this->genRet($param['mid'], array('members' => $members,'phonefriends'=>$getpfsuccess));
	}


	/**
	 * 推荐好友的好友
	 */
	public function getRecommendFriends($param) {
		if(!$this->auth($param, 0)) {
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!oo::mobileConfig()->getSwc($param['api'], 'recommendMembers')) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = $param['mid'];
		$sex = isset($param['param']['sex']) ? $param['param']['sex'] : 2;
		$neet = 20;
		$femaleNum = $maleNum = $rand = 0;
		$friend = $myFriend = array();
		$userArr['female'] = $userArr['male'] = array();

		// 我的好友，最多取15个
		$friend = oo::friends()->getIdList($mid, 0);
		$num = min(count($friend), 15); // 最多取15个
		$randArr = ($num > 0) ? array_rand($friend, $num) : array();

		$aKey = okey::mkAlreadyAddFriend(date("Ymd"), $mid); // 今天添加过的好友，不再出现在推荐上
		$alreadyAdd = ocache::redis()->get($aKey);
		if($alreadyAdd) {
			$alreadyAdd = explode("_", $alreadyAdd);
		} else {
			$alreadyAdd = array();
		}

		$objMinfo	= oo::minfo();
		$objFriends = oo::friends();
		for($i = 0; $i < $num; $i++) {
			if($randArr == 0 && $num == 1) { // 数组只有一个的情况
				$rand = 0;
			} else {
				$rand = $randArr[$i];
			}
			$fmid = $friend[$rand];
			if($sex != 1 && $femaleNum >= 20) { // 女性满20人，退出循环
				break;
			} elseif($sex == 1 && $maleNum >= 20) { // 男性或未知性别满20人，退出循环
				break;
			}

			$uFriend = $objFriends->getIdList($fmid, 0);
			if(count($uFriend) == 0) { // 好友数为0，跳过到下一个
				continue;
			}
			$sNum = min(count($uFriend), 20); // 最多取20个
			$randArrSecond = array_rand($uFriend, $sNum);
			if(!is_array($randArrSecond)) {
				$randArrSecond = array();
				$randArrSecond[0] = 0;
			}
			for($t = 0; $t < $sNum; $t++) {
				$ffmid = $uFriend[$randArrSecond[$t]];
				$aUser = $objMinfo->getMinfo((int)$ffmid, array('micon', 'mgender', 'unid'));
				$uApi = of::_getApiByUnid($aUser['unid']);
				if(in_array($ffmid, (array)$friend) || $ffmid == $mid || in_array("b" . $ffmid, (array)$alreadyAdd) || of::isAndroid($uApi)) { //条件是：已经是好友，id等于自己，当天已经添加过，不是安卓用户
					continue;
				}
				if($aUser['mgender'] == 1) {
					$userArr['female'][] = $ffmid;
					$femaleNum++;
				} else {
					$userArr['male'][] = $ffmid;
					$maleNum++;
				}
			}
		}

		if($sex == 1) { // 用户是女性玩家，多返回男性推荐
			if($maleNum >= 20) {
				$aMale = (array)$userArr['male'];
				shuffle($aMale);
				$result = array_slice($aMale,0,20);
			} else {
				$result = $userArr['male'];
			}
		} else { // 多返回女性推荐
			if($femaleNum >= 20) {
				$aFemale = (array)$userArr['female'];
				shuffle($aFemale);//随机打乱数组
				$result = array_slice($aFemale,0,20);//取20个
			} else {
				$result = $userArr['female'];
			}
		}

		$sum = count($result);
		if($sum < 20) { // 如果单独一个性别不够20个推荐好友
			$gap = 20 - $sum; // 还差几个够20
			$fsum = count($userArr['female']);
			$msum = count($userArr['male']);
			if($sex == 1) { //玩家是女性， 所需推荐男性玩家不够20个，剩下在女性玩家里取
				$result = oo::member()->setRecommendGap($fsum, $userArr['female'], $gap, $mid, $result);
			} else {
				$result = oo::member()->setRecommendGap($msum, $userArr['male'], $gap, $mid, $result);
			}
		}

		return $this->genRet($param['mid'], array('members' => $result));
	}

	/**
	 * 生成随机昵称
	 * @param array $param
	 * @return array
	 */
	public function getRandNickname($param) {
		if(!$this->auth($param, 0)) {
			return $this->genRet($param['mid'], array('error' => -1));
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$langtype = (int)$param['langtype'];
		$version = $param['version'];
		$num = (int)$param['param']['num'];
		$num = min(20, max(1, $num)); // 最少1个，最多20个
		$lang = oo::$config['language'][$langtype];
		if($api==155 && !PRODUCTION_SERVER){
			$ret['nickname'] = array();
			$namePre = (property_exists('lang', 'guestNickPrefix') ? lang::$guestNickPrefix : 'GUEST_') . mt_rand(10000,100000);
			for ($i = 0; $i < $num; $i++) {
				$ret['nickname'][] = $namePre.mt_rand(10000,100000);
			}
		}else{
			if(!$conf = oo::mobileConfig()->getDeploy($api, 'randomnickname')) {
				return $this->genRet($param['mid'], array('error' => -2));
			}
			$rand = mt_rand(0, 1);
			if($langtype == 15){ //阿语根据性别来区分随机名 男性是0 女性是1
				$uInfo = oo::minfo()->getMinfo( $mid, array('mgender') );//mgender 0男1女2保密
				$rand = ($uInfo['mgender'] == 1) ? 1 : 0;
			}

			$adjStr = (string)$conf[$rand][$lang]; // 形容词 (名1、名２)
			$nStr = (string)$conf[2][$lang]; // 名词 (名3)
			$ret['nickname'] = array();
			$sep = oo::mobileConfig()->getSwc($api, 'newReg') ? '.' : '';
			if(!empty($adjStr) && !empty($nStr)) {
				$adj = explode(',', $adjStr);
				$n = explode(',', $nStr);
				for($i = 0; $i < $num; $i++) {
					$nickname = $adj[mt_rand(0, count($adj) - 1)] . $sep . $n[mt_rand(0, count($n) - 1)];
					!empty($nickname) && !in_array($nickname, $ret['nickname']) && $ret['nickname'][] = $nickname;
				}
			}
		}

		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 新手模块，牌型测试奖励
	 * @param array $param
	 * @return array
	 */
	public function getTestReward($param) {
		if(!$this->auth($param, PRODUCTION_SERVER ? 1 : 0)) {
			return $this->genRet($param['mid'], array('error' => -1));
		}
		// wmode = 1033
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$suc = (int)$param['param']['suc']; // 是否成功
		$newbie = (int)$param['param']['newbie']; // 是否返回新手升级的奖励
		$reward = $suc == 1 ? 1600 : 1000;
		$cacheKey = okey::mkTestReward($mid);
		if(ocache::redis()->get($cacheKey)) { // 已经领取过了
			return $this->genRet($param['mid'], array('error' => -2));
		}
		$uInfo = oo::minfo()->getMinfo($mid, array('mtime'));
		if(date('Ymd', $uInfo['mtime']) == date('Ymd')) { // 注册第一天
			$exp = oo::expLevel()->getUserExp($mid);
			$addExp = 5 - $exp; // 离2级还差多少经验
			(!$newbie && $suc == 1 && $addExp > 0) && $flg = oo::expLevel()->addUserExp($mid, $addExp, false, 1, true, true);
			ocache::redis()->setex($cacheKey, 1, 86400);
			oo::logs()->addWin($mid, 1033, 0, $reward, '', '新手牌型测试奖励', true);
			!PRODUCTION_SERVER && oo::logs()->debug(date('Ymd H:i:s') . " {$mid}|{$suc}|{$exp}|{$addExp}|" . (int)$flg, 'test_reward.log');
			if($newbie && $suc) {
				$aCfg = oo::mobilenewbie($api)->cfg;
				$bag = oo::bag(494)->get($aCfg[1]['bagid']);
				if($bag) {
					oo::mobilenewbie($api)->taskReward($mid, $aCfg[1]['bagid']); // 完成升到2级的奖励
					$bag['data'][1]['val'] && $reward += (int)$bag['data'][1]['val'];
				}
			}
		} else {
			$reward = 0;
		}
		return $this->genRet($param['mid'], array('reward' => $reward));
	}
	/*
	 * 好友追踪
	 */
	public function getInterFriend($param){
		if( ! $this->auth($param, PRODUCTION_SERVER ? 1 : 0)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int) $param['api'];
		$mid = functions::uint($param['mid']);
		$langtype = (int) $param['langtype'];
		oo::setLang($langtype);

		$langfix = oo::$config['language'][$langtype] ? oo::$config['language'][$langtype] : oo::$config['langfix'];
		$obSvids = !empty(oo::$config['act824_obArr']) ? (array)explode(',', oo::$config['act824_obArr']) : array();//锦标赛旁观灰度svid

		$aConf = oo::mobileConfig()->getDeploy($api,'friendinter');
		if( !$aConf ){
			$ret['errorNo'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$ret['time']= $aConf['time'] ? $aConf['time'] : 10;//持续时长
		$iShow		= $aConf['show'] ? $aConf['show'] : 5;//toast出现次数
		$dispTimes	= $aConf['dispTimes'] ? $aConf['dispTimes'] : 0;//当天当前玩家的一个好友只弹N次提示
		$iCurrent = oo::logs()->limitCount( $mid, 890, 0 );
		$ret['show'] =  max(0,($iShow  - $iCurrent));
		if( $ret['show'] <= 0 ){//每天限制
			$ret['errorNo'] = -3;
			return $this->genRet($param['mid'], $ret);
		}
		$aMids = oo::friends()->getIdList($mid, 0);
		if( !$aMids ){
			$ret['errorNo'] = -4;
			return $this->genRet($param['mid'], $ret);
		}
		(count($aMids) > 100) && ( $aMids = array_slice($aMids, 0, 100));//取1百个好友
		$aOnLine = oo::membertable()->getIdsStatus($aMids);
		if( !$aOnLine ){//木有好友在线
			$ret['errorNo'] = -5;
			return $this->genRet($param['mid'], $ret);
		}
		$aList = $aSort = $aLineMid = array();
		$tInfoCache = array();//内部缓存

		foreach ($aOnLine as $fmid => $aLine) {
			if( count($aList) > 20){//不用返回那么多好友
				break;
			}
			if( !($tid = $aLine[0]) || ($aLine[1] != 2)) { //没在玩，过滤掉
				continue;
			}
			$aTinfo = oo::tables()->getTableById($tid, true, array('tblindmin','ttype','tpostion','privateRoom','tname','tname_'.$langfix,'svid', 'tattr'));
			$whiteList = array(0, 1, 2, 3, 6, 7, 13, 30,38); //移动可好友追踪桌子白名单

			if(oo::$config['act824_mttOB']){//锦标赛旁观总开关开启 锦标赛全面开放
				$whiteList[] = 11;
			}

			if(!in_array($aTinfo['ttype'], $whiteList) && !in_array($aTinfo['svid'],$obSvids)){
				continue;
			}
			//屏蔽pc专用且非私人房间
			if($aTinfo['tpostion'] == 1 && $aTinfo['privateRoom'] == 0){
				continue;
			}
			if(oo::$config['friendsRoom'] && $aTinfo['tattr'] && oo::tables()->isFriendsRoom($tid, $aTinfo['tattr'])){//过滤掉好友俱乐部
				continue;
			}

			$aSort[] = $aTinfo['tblindmin'];
			$aList[] = array('tid'=> $tid,'fmid'=> $fmid, 'ttype'=>$aTinfo['ttype']);
			$aLineMid[] = $fmid;
		}
		if( !$aList ){//木有在玩好友
			$ret['errorNo'] = -6;
			return $this->genRet($param['mid'], $ret);
		}
		array_multisort($aSort, SORT_DESC,SORT_NUMERIC, $aList);
		$aUsers = oo::minfo()->getFieldsMulti($aLineMid, array('mnick'));
		
		if(oo::$config['pineapple']){
			if(method_exists(oo::swoolegame(), 'swMbKg')){
				$aSwKg = oo::swoolegame()->swMbKg();
			}else{
				$aSwKg = array(
					1 => oo::mobileConfig()->getSwc(_API_, "supportSicbo"),
					2 => oo::mobileConfig()->getSwc(_API_, "supportPineapple"),
					3 => oo::mobileConfig()->getSwc(_API_, "supportSlotsV3"),
				);
			}
		}
		foreach ($aList as  $aFm) {

			if( !($mnick = $aUsers[$aFm['fmid']]['mnick'] )) continue;
			$tmp = array('mnick' => $mnick,'fmid'=> $aFm['fmid'],'tid'=> $aFm['tid'],'tname'=>'');
			
			if(oo::$config['pineapple'] && ($gameId = oo::swoolegame()->tidToGameId($aFm['tid']))){//swoole游戏断线重连
				$svid 	= $aOnLine[$aFm['fmid']][2];
				$tmp['svid']	= $svid;
				$tmp['tid']		= 0;
				
				if($aSwKg[$gameId]){
					$tmp['inGame']	= $gameId;
					$ret['list'][]	= $tmp;
					continue;
				}
			}
			$aTinfo = oo::tables()->getTableById($aFm['tid'], true, array('tblindmin','ttype','tname','tname_'.$langfix,'privateRoom'));
			if($tmp['tid']){//锦标赛旁观功能开启
				$tmp['tname'] = $aTinfo['tname_'.$langfix] ? $aTinfo['tname_'.$langfix] : $aTinfo['tname'];
			}
			
			if(in_array(oo::$config['sid'], array(93, 117))){
				$tmp['privateRoom'] = (int)$aTinfo['privateRoom'];
				$tmp['ttype'] = $aFm['ttype'];
			}

			$ret['list'][] = $tmp;
		}
		$ret['errorNo'] = 1;
		$ret['list'] && ($iCurrent = oo::logs()->limitCount( $mid, 890, 1 ));
		$ret['show'] =  max(0,($iShow  - $iCurrent));
		return $this->genRet($param['mid'], $ret);
	}
	/*
	 * 好友追踪 发小喇叭
	 */
	public function interFriend($param){
		if( ! $this->auth($param, PRODUCTION_SERVER ? 1 : 0)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if (!($mid = functions::uint($param['mid'])) || !($fmid = functions::uint($param['param']['fmid']))) {
			$ret['errorNo'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$api = (int) $param['api'];

		if(in_array(oo::$config['sid'],array(93,117))){//经常跟踪了收不到，而且不同联运本身是可以相互跟踪的，但是配置配的不一样就会出现xx联运可以跟踪另一个联运的，反过来就不行了
			$ret['errorNo'] = 1;
			$aUser = oo::minfo()->getMinfo($mid, array('mnick'));
			$aUser && oo::EServer()->sendSingleMsg($fmid,$fmid,json_encode(array('type'=>515,'data'=>array('mid' => $mid,'mnick' => $aUser['mnick']))));
		}else{//海外保持原来的功能
			$aConf = oo::mobileConfig()->getDeploy($api,'friendinter');
			if( !$aConf ){
				$ret['errorNo'] = -3;
				$ret['desc'] = 'friendinter配置不存在';
				return $this->genRet($param['mid'], $ret);
			}
			$tract		= $aConf['tract'] ? $aConf['tract'] : 5;//被追踪出现次数
			$dispTimes	= $aConf['dispTimes'] ? $aConf['dispTimes'] : 0;//当天当前玩家的一个好友只弹N次提示
			$current = oo::logs()->limitCount( $fmid, 891, 1 );
			if( $current > $tract ){
				$ret['errorNo'] = -4;
			}else{
				$ret['errorNo'] = 1;
				$aUser = oo::minfo()->getMinfo($mid, array('mnick'));
				$aUser && oo::EServer()->sendSingleMsg($fmid,$fmid,json_encode(array('type'=>515,'data'=>array('mid' => $mid,'mnick' => $aUser['mnick']))));
			}
		}
		return $this->genRet($param['mid'], $ret);
	}

	public function _getSexOrder($c,$m){
		$sex = $c > 1 ? $c : ($m > 1 ? ($c==0 ? 1 : 0) : ($c==$m  ? 1: 0));
		return  $sex;
	}

	/**
	 * 好友俱乐部房间发送小喇叭邀请
	 * @param $param
	 * @return array
	 *
	 */
	public function friendsRoomInvite($param){
		if( ! $this->auth($param, 1)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if( ! oo::$config['friendsRoom']){
			$ret['errorNo'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$api = (int)$param['api'];
		$langtype = (int)$param['langtype'];
		$tid	= (int)$param['param']['tid'];//当前桌子
		$aMids  = $param['param']['mids']?(array)$param['param']['mids'] :array();
		$verifyCode = (string)$param['param']['verifyCode'];

		if(!$verifyCode){
			$ret['errorNo'] = -3;
			return $this->genRet($param['mid'], $ret);
		}
		oo::setLang($langtype);
		$inviteList = oo::member()->friendRoomInvite($mid,$aMids,$tid,$verifyCode);
		$ret['errorNo'] = 0;
		$ret['list'] = (array)$inviteList;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取在线好友信息
	 * @param $param
	 * @return array
	 */
	public function getOnlineFriends($param){
		if( ! $this->auth($param, 1)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];

		$aOnline = oo::member()->getOnlineFriends($mid);
		$ret['errorNo'] = 0;
		$ret['list']	= (array)$aOnline;
		return $this->genRet($mid, $ret);
	}


	/**
	 * 发红包
	 * @param $param
	 * @return array
	 */
	public function sendLuckyBag($param){
		if( ! $this->auth($param, 1)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$tid = (int)$param['tid'];

		$sendChips = oo::member()->sendLuckyBag($mid,$tid);
		$ret['errorNo'] = 0;
		$ret['sendChips']	= $sendChips ? (int)$sendChips : 0;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 抢红包
	 * @param $param
	 * @return array
	 */
	public function receiveLuckyBag($param){
		if( ! $this->auth($param, 1)){
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$tid = (int)$param['tid'];
		$luckyKey = (int)$param['key'];

		$receiveChips	= oo::member()->receiveLuckyBag($mid,$tid,$luckyKey);
		$ret['errorNo'] = 0;
		$ret['receiveChips'] = $receiveChips ? (int)$receiveChips : 0;
		return $this->genRet($mid, $ret);
	}

	/**
	 * 桌子时间到期，红包没抢完，退回
	 * @param $param
	 * @return array
	 */
	public function returnLuckyBag($param){
		if( ! $this->auth($param, 1)){
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$tid 	= (int)$param['tid'];

		$return	= oo::member()->returnLuckyBag($tid);
		$ret['result'] = $return ? 1 : 0;
		return $this->genRet($param['mid'], $ret);
	}

	/**
	 * 房间内屏蔽他人聊天、互动表情等的名单
	 * @param array $param
	 * $param['param']['type']  int  操作类型： 1获得，2设置
	 * $param['param']['data'] array 操作数据
	 * $param['param']['data']['act'] int 1添加到黑名单 2从黑名单删除
	 * $param['param']['data']['tos'] array 要操作的mid数组
	 * @return  array
	 * $return['ret']['result']=获得返回array((mid,昵称,头像),(mid,昵称,头像) ……)；设置返回true/false
	 * $return['ret']['errorNo'] = 0 错误码//还没想到有什么用
	 *
	 */
	public function chatBlacklist($param)
	{
		if (!$this->auth($param, 1)) {
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$type = (int)$param['param']['type'];
		$data = (array)$param['param']['data'];
		$act = (int)$data['act'];
		$aTos = (array)$data['tos'];
		if ($type == 2) {
			$setRet = oo::member()->setChatBlacklist($mid, $act, $aTos);
		}
		$his = oo::member()->getChatBlacklist($mid); //返回最新的

		$ret['result'] = $his['data'];
		$ret['errorNo'] = 0;//暂时没用到 先占个坑
		return $this->genRet($mid, $ret);
	}

	/**
	 * 获取改名次数
	 * @param $param
	 * @return array|mixed
	 */
	public function getChangeNameNum($param){
		if (!$this->auth($param, 1)) {
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$num = (int)oo::$config['changeNameNum'];
		$money = (int)oo::$config['changeNameMoney'];
		$sid = (int)$param['sid'];
		$aUser	= oo::minfo()->getMinfo($mid, array('isDefaultNick','mbycoins', 'isChangeName'));
		if($aUser['isChangeName'] != 1 && in_array($sid , array(79, 233))){
			$aSets['isDefaultNick'] = 1;
			$aNumKeySets = ovalue::combine( ovalue::getmb(), $aSets );
			$aMongoSet = ocache::mongoMinfos( $mid)->mongoCombine( ovalue::getmb(), $aNumKeySets, false, array(0,40,17,22,23,26,36,43,50,51,52,55,112,113,114,115,116,133,134,137,144));
			$ret = ocache::mongoMinfos( $mid)->update(oo::minfo()->mgtblminfo($mid), array('_id' => $mid), array('$set' => $aMongoSet), array('upsert' => 1));
			oo::minfo()->set($mid, array( 'isChangeName' => 1));
			$aUser['isDefaultNick'] = 1;
		}
		if(empty($aUser)){
			$ret['errorNo'] = -2;
			return $this->genRet($mid, $ret);
		}
		$aUser['isDefaultNick'] = $sid == 79 || $sid == 233 ? $aUser['isDefaultNick'] - 1 : $aUser['isDefaultNick']; //游客账号因为初始化要随机生成一次名字，故补一次机会
		//改名次数判断
		if($num > $aUser['isDefaultNick']){
			$ret['changeNum'] = $num - $aUser['isDefaultNick'];
		}else{
			$ret['changeNum'] = 0;
		}
		$ret['changeMoney'] = $money;
		$ret['errorNo'] = 0;//暂时没用到 先占个坑
		return $this->genRet($mid, $ret);
	}

	/**
	 * 修改名字
	 * @param $param
	 * @return array|mixed
	 */
	public function changeName($param){
		if (!$this->auth($param, 1)) {
			$ret['errorNo'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		$mid = (int)$param['mid'];
		$sid = (int)$param['sid'];
		$name = (string)$param['param']['name'];
		$money = (int)oo::$config['changeNameMoney'];
		$mum = (int)oo::$config['changeNameNum'];
		$aUser	= oo::minfo()->getMinfo($mid, array('isDefaultNick','mbycoins','mnick','isChangeName'));
		$name = (string)str_replace(array("'", "\"", "<", ">", "&", "\\"),'?',$name);
		$aUser['isDefaultNick'] = $sid == 79 || $sid == 233 ? $aUser['isDefaultNick'] - 1 : $aUser['isDefaultNick']; //游客账号因为初始化要随机生成一次名字，故补一次机会
		$ret['mbycoins'] = $aUser['mbycoins'];
		if($aUser['isDefaultNick'] >= $mum){
			if($aUser['mbycoins'] < $money) {
				$ret['errorNo'] = -3;
				return $this->genRet($mid, $ret);
			}
			$boyaaCoin = $aUser['mbycoins'] - $money;
			$desc = '改名消耗'.$money.',余'.$boyaaCoin;
			$status =oo::boyaacoins()->updateBycoins( $mid, $money, 1, 104, $boyaaCoin, 0, $desc);
			oo::lc()->sendEvent( of::getLogcenterSid(), $mid, 'changeName', array('移动博雅币改名' => 1, '移动消耗博雅币' => $money));//发统计
			$ret['mbycoins'] = $aUser['mbycoins'] - $money;
			if(!$status) {
				$ret['errorNo'] = -2;
				return $this->genRet($mid, $ret);
			}
		}else{
			oo::lc()->sendEvent( of::getLogcenterSid(), $mid, 'changeName', array('移动免费改名' => 1));//发统计
		}
		$sta1 = oo::minfo()->set($mid, array( 'lastMnick' => $aUser['mnick']) );
		$sta2 = oo::member()->updateBoyaaNick($mid, $name);
		if(!$sta1 || !$sta2){
			$ret['errorNo'] = -2;
		}else{
			$ret['suc'] = $name;
			$ret['errorNo'] = 0;
		}
		return $this->genRet($mid, $ret);
	}
    
    /*****************以下为VVIP牌局分析新增接口********************/
	/**
	 * 收藏牌局
	 * @param type $param
	 */
	public function collectPlog($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid']) || (!$par['tid'] = (int)$param['param']['tid'])) {
			return $this->genRet($param['mid'], array());
		}
        $par['bid'] = (int)$param['param']['bid'];
		$par['etime'] = (int)$param['param']['etime'];
		$ret = oo::vvipext()->collectPlog($mid,$par);
		return $this->genRet($mid, $ret);
	}

	/**
	 * 牌局详情
	 * @param type $param
	 */
	public function getPdetail($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid']) || (!$par['tid'] = (int)$param['param']['tid'])) {
			return $this->genRet($param['mid'], array());
		}
		$par['etime'] = (int)$param['param']['etime'];
        $par['bid'] = (int)$param['param']['bid'];
        $par['type'] = (int)$param['param']['type'];
		$ret = oo::vvipext()->getPdetail($mid,$par);
		return $this->genRet($mid, $ret);
	}
    
	/**
	 * VVIP初始化入口
	 * @param type $param
	 */
	public function vvipInit($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid'])) {
			return $this->genRet($param['mid'], array());
		}
		$api = (int)$param['api'];
		$ret = oo::vvip()->init($mid,$api);
		return $this->genRet($mid, $ret);
	}
	
	/**
	 * VVIP牌局数据分析
	 * @param type $param
	 * @return type
	 */
	public function pCenterInit($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid'])) {
			return $this->genRet($param['mid'], array());
		}
		$ret = oo::vvipext()->pCenterInit($mid);
		return $this->genRet($mid, $ret);
	}
	
    /**
     * 获得牌局/收藏列表
     * @param type $param
     * @return type
     */
	public function getPlogs($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid'])) {
			return $this->genRet($param['mid'], array());
		}
		$type = (int)$param['param']['type'];
		if($type == 1){
			$ret = oo::vvipext()->getHps($mid);
		}elseif($type == 2){
            $ret = oo::vvipext()->getPlogs($mid);
		}else{
			$ret = oo::vvipext()->getPlogs($mid,true);
		}
		return $this->genRet($mid, $ret);		
	}
    
    /**
     * 获取牌风
     * @param type $param
     * @return type
     */
    public function getPstyle($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid'])) {
			return $this->genRet($param['mid'], array());
		}
        $mids = (array)$param['param']['list'];
        if(!empty($mids)){
            foreach($mids as $tmid){
                $ret['pstyle'][$tmid] = oo::vvipext()->initPlogstyle($tmid);
            }
        }else{
            $ret['pstyle'] = oo::vvipext()->initPlogstyle((int)$mid);
        }
        return $this->genRet($mid, $ret);
    }
	
	/**
	 * 获取段位奖励
	 * @param type $param
	 */
	public function getLvlRwd($param){
		if (!$this->auth($param, 1) || (!$mid = (int)$param['mid'])) {
			return $this->genRet($param['mid'], array());
		}
		$ret = oo::vvip()->getLvlRwd($mid);
		return $this->genRet($mid, $ret);
	}
    /*****************以上为VVIP牌局分析新增接口-end********************/
	
	/**
	 * 举报玩家不当言论
	 * @return array
	 */
	public function speechReport($param){
		$ret = array('code' => 0);
		if (!oo::$config['speechHonor'] || !$this->auth($param, 0) || (!$mid = (int)$param['mid']) || (!$toMid = (int)$param['param']['to'])) {
			$ret['code'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		
		if(!isset($param['param']['list']) || !($list = $param['param']['list']) || !is_array($list)){
			oo::logs()->debug(array(date('Y-m-d H:i:s')), 'speechreport');
			$ret['code'] = -3;
			return $this->genRet($param['mid'], $ret);
		}
		
		$type = isset($param['param']['type']) ? (int)$param['param']['type'] : 1;
		$blindmin = isset($param['param']['blindmin']) ? (int)$param['param']['blindmin'] : 0;
//		$ret['code'] = (int)oo::mobMod('speechReport', $mid)->report($fromMid, $list, $type, $blindmin);
		$methodType = $type == 1 ? 'spamad' : 'dirtywords';
		if(oo::$config['ac'] && oo::ac('speechreport')){
			$ret['code'] = (int)oo::ac('speechreport')->init($methodType, $mid, array('blindmin' => $blindmin, 'type'=>$type, 'list'=>$list, 'to'=>$toMid));//房间举报
		}
		return $this->genRet($mid, $ret);
	}

	/**
	 * @uses:玩家好友模糊搜索
	 * @return:array();
	 */
	public function searchFrisByName($param){
		if(! $this->auth($param,0)){
			$ret['result'] = -1;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$mid = functions::uint($param['mid'])) {
			$ret['result'] = -2;
			return $this->genRet($param['mid'], $ret);
		}
		if(!$search = $param['param']['name']) {
			$ret['result'] = -3;
			return $this->genRet($mid, $ret);
		}
		$friends = oo::friends()->getIdList($mid, 0);
		$afields = array('mnick','micon');
		$aUsers = oo::minfo()->getFieldsMulti($friends, $afields);
		$ret = array('result'=>-1,'list'=>array());
		$i = 0;
		foreach($aUsers as $mid=>$val){
			if(strstr($val['mnick'],$search) !==false || $mid == (int)$search){
				$ret['result']=1;
				$fields = array('mid','mnick','micon');
				foreach($fields as $v){
					$ret['list'][$i][$v]=$val[$v];
				}
				$i++;
			}
		}
		return $this->genRet($mid,$ret);
	}

}
